Introduce CoroutineDispatcher.asExecutor() extension (#1457)


Fixes #1450 | 2019-08-22 12:20:38 | bcf4a8cba083e5650b1c63a05da481f1b61c3e75

Add skip_snapshot_checks flag for snapshot train debuggability | 2019-08-21 14:08:34 | 6ca6ed5af208f72d443f747b7953c073acc4624d

Merge branch 'master' into develop

# Conflicts:
#	docs/coroutine-context-and-dispatchers.md | 2019-08-09 15:03:25 | a6da28e45948a4197fa3e3b80aa29bcee1f042f0

Renaming switchMap to flatMapLatest to better reflect its semantics and to have a consistent and meaningful naming scheme for the rest of the 'latest' operators

    * Make flatMapLatest pure, do not leak cancellation behaviour to downstream
    * Make *latest buffered by default to amortize constant re-dispatch cost
    * Introducing transformLatest
    * Introducing mapLatest

Fixes #1335 | 2019-07-28 18:59:25 | 3a958845a7f091fc9f3218aae20abed17c9e57be

Fully copy CoroutineInfo for DebugProbes.dumpCoroutinesInfo, it is re… (#1368)

* Fully copy CoroutineInfo for DebugProbes.dumpCoroutinesInfo, it is required for IDEA integration (field is left as internal deliberately)
* Make CoroutineInfo non-data class | 2019-08-09 14:36:25 | 0172998c5df4dc219c17f03d03502a42998f535e

Get rid of NonRecoverableThrowable, mention way to opt-out stacktrace… (#1420)

Get rid of NonRecoverableThrowable, mention way to opt-out stacktrace recovery in debugging.md | 2019-08-09 14:32:34 | 897f02e18a8538b53f1eeb6157a1c0cff0b65476

coroutine-context-and-dispatchers.md: Improve article usage, fix typos, reword phrases for better readability | 2019-08-07 15:27:21 | 28241ebd08977fc323d41366ed0c6705f9285095

Use setTimeout-based dispatcher when process is not available on the … (#1409)

* Use setTimeout-based dispatcher when process is not available on the target runtime

Fixes #1404 | 2019-08-05 14:59:11 | 2fc234cb6d24ee3f65a7aa35e4aeea6e506315d2

Update Guava to the latest version 28.0

This fixes vulnerability CVE-2018-10237
See https://ossindex.sonatype.org/vuln/24585a7f-eb6b-4d8d-a2a9-a6f16cc7c1d0 | 2019-08-05 11:58:23 | db95996ceb2758dfc7ccfe9ac805dace2e89128f

Flow.kt: fix typos and rephrase some expressions for better readability (#1408) | 2019-08-05 11:12:26 | 41428a3673f84c40766c9f65421f1649cffb328d

Better docs on coroutines debugging property

* Mention in the guide that `-ea` turns it on.
* Give a link to DEBUG_PROPERTY_NAME instead of newCoroutineContext.
  The later does not have details on its page anymore, since
  the details were only mentioned in JVM version.
* Move description in of debugging facilities to DEBUG_PROPERTY_NAME
  in the code. | 2019-07-23 13:33:07 | d78084b32295c923e2b8312a24729281f19517ca

Properly specify transitive dependencies for kotlinx-coroutines-debug | 2019-07-19 11:16:14 | 2f5036365b035912ce3efd25c307f70479bd9908

Move event loop infrastructure to common code

This makes code of EventLoop (including its task queue impl) shared
between JVM and Native making support and further fixes easier.
It it not actually used in JS and DCE should remove it. | 2019-07-02 12:30:47 | 98a970559601222de378d89920a8f4710d6baa31

Recover stacktraces for no-dispatched continuations, so recovery works in 'suspend fun main' cases to further improve user experience

Fixes #1328 | 2019-07-16 12:36:59 | f22604b01788784fd06b5f01554dc4800e7ff183

Rewrite assertions so that they are checked only in debug mode

* Make sure assertions are absent on native and JS
* Only print full toString for Job in debug mode | 2019-07-02 13:21:22 | 583d39dd4fe1d8f488df3e384901aa19f95166e2

Decouple asFlow from batchSize and move it to buffer instead, promote… (#1279)

* Optimize Publisher.asFlow and fix conflation
* Use channel.receiveOrNull instead of for loop iteration
  (it is more efficient)
* Calling Publisher.asFlow().produceIn(...) uses a single channel
  and is implemented via Publisher.openSubscription() | 2019-06-26 09:09:32 | 502610e7af760a73ea974f9c7cb75ec26a14d167

Unmute debugger test that were broken in 1.3.31, increase debug test timeout (slow CI), make shutdown more graceful by reducing timeout per thread (slow CI + unfortunate timings) | 2019-06-24 17:53:53 | bb97ffbb069774f2ba6ceb8e7dc4c6a2263ef9ff

Update "Shared mutable state and concurrency" guide with best practices

* Properly use structured concurrency in the example code.
* Also remove a special not on <= 2 core CPU, which is no longer needed
because default dispatcher has always at least two CPUs.

Fixed #1241 | 2019-06-01 11:18:42 | d94652feec64040c2c77af630fc4df30032e0efc

Enable R8 optimization of Dispatchers.Main loading

The developer still has to disable the FastServiceLoader manually
if they're using R8.

R8 is then able to optimize away the ServiceLoader and reflection
entirely, resulting in direct class instantiation and no extra I/O
on calling thread.

Fixes #1231 | 2019-05-30 12:17:51 | b9b7d828b18b2462817b6ed0c1a56233a4b6fcf4

Use identity hash code on K/N for debug strings

Fixes #1237 | 2019-05-31 11:39:08 | a3f150e66f7c47e0a0cefed4d9aa03199dff9e7f

Amortize the cost of coroutine dispatch using message queue in all JS dispatchers.
Use Promise.resolve and process.nextTick as dispatch mechanism for cold starts | 2019-03-01 11:25:23 | b7e1499b966175782cf2a5045c5bd3bb95a63b8c

Documentation improvements (#1229)

* Improve MainCoroutineDispatcher.immediate documentation
* Remove obsolete readme and package descriptions
* Clarify possible replacement of onCompletion parameter in produce
* Add paragraph about parent cancellation to async (Mention structured concurrency, but do not explain it there as the term should be easily googlable).

Fixes #1219
Fixes #994 
Fixes #787 | 2019-05-31 10:16:19 | c81dc91159dd1e33060ead8eeccc78df94c4649d

New flow builder: channelFlow (and its alias callbackFlow) and supple… (#1214)

New flow builder: channelFlow (and its alias callbackFlow) and supplementary ProducerScope.await method

Rationale:

    * Can be used in different context without breaking context preservation
    * Can be used to build concurrent operators such as merge
    * Can be used to integrate with callbacks
    * Is less error-prone than flowViaChannel because requires explicit await() call

Partially fixes #1210 | 2019-05-27 21:37:46 | b08d61c6c25d1a030ef37b6788b9ed3922520c85

Improve coroutine exception handling logic

  * Wrap exceptions into CE if parent cancels its child. This is possible because now we can be sure that no one is invoking `cancel(Throwable)`, thus if parent cancels its children, an exception is definitely handled.
  * Now exception is handled only once

First part of fix for #689 | 2019-05-17 08:55:17 | b0f6e05822f225afba43ed6e728669fe320146d8

Fix overflow bug in Flow.drop | 2019-05-20 07:45:03 | e35637a9faabb021d7a5efdc5509910cb499cd7a

Fixed Dispatcher docs

* Fixed typos
* Added reference to kotlinx-coroutines-test for testing `Main` dispatcher | 2019-04-27 19:32:57 | a2499a3ffe7522b8881a41ada45ce1779494be51

Ensure that there are no references to atomicfu in classes

* Updated to 0.12.7 version of atmoicfu with fixes.
* Added test that that is no references to atomicfu in any of the
  resulting class files.

Fixes #1155 | 2019-05-02 23:56:40 | 485eab1611433e49bd1d7c4a302b4825daf0d2e9

Knit: fix handling of backquote when making anchor reference | 2019-05-06 23:46:46 | 80039323d7ef284c3c4b851a6f3a91c46b3d7971

Knit: fix handling of backquote when making anchor reference | 2019-05-06 23:46:46 | b81f5f0ad73bc163a01a2ec88e2cb2e3d61927e1

Fixes kotlin-coroutines-test TestCoroutineDispatcher docs

Fixes #1163 | 2019-04-30 21:27:20 | 9614536ff093c99fc7febd5e31547ede8c8ceb5d

fix: broken anchors | 2019-05-06 07:26:16 | e3030e36945d79d7e54f0decaeef099a1720efcd

kotlinx-coroutines-test cleanup

    * Yield support in test dispatcher
    * Allow partial override of coroutine context
    * Code style fixes | 2019-04-25 21:07:56 | 9e5f9ab46506369f759d72e1195d9d7eb3ef1116

Flow operators: (#1132)

Flow operators:

    * switchMap
    * debounce
    * sample
    * Update RxJava version to 2.2.8

Partially fixes #1107 | 2019-04-24 14:14:03 | fe820bad2dc0743281f6ad130824114507a0a00a

AtomicFu version 0.12.5

This should really fix processing of class files

Fixes #1116
Fixes #1064 | 2019-04-22 18:05:50 | 26a14eef3c6fdf9480719dc1bc25b249b58bcb87

Fix atomicfu post-processing and dependencies

* Update to atomicfu 0.12.4, which fixes plugin operation with
  kotlin-multiplatform
* Remove explicit dependencies (plugins adds them automatically)

Fixes #1116
Fixes #1064 | 2019-04-19 15:51:05 | e1ac2e5c193654469468a04e4cadced3e3040e63

Add a period in the "You can get full code here" blocks and other small fixes | 2019-04-21 07:51:25 | 69c26dfbcefc24c66aadc586f9b5129894516bee

Knitted links and fixed minor style issues in test docs readme | 2019-04-21 08:21:59 | 445e798c3406c182337636026188fefd9f1cc950

Add README.md description of runBlockingTest, TestCoroutineContext, TestCoroutineDispatcher, TestCoroutineExceptionHandler. | 2019-04-21 01:10:09 | c0a8d1c078b6c3de49e3f6a4f77f2c713f47c7ac

TestCoroutineDispatcher code style cleanup and todos

* Kotlin libraries code style: explicit visibility and other style-issues
* DelayController.currentTime() is val
* Using atomicfu in place of AtomicXxx classes
* Added version to ExperimentCoroutineApi annotations
* Some todos are added for future consideration
* Fixed long overflows on delay (clamp) and added test
* License headers added to files
* Tests moved to an appropriate package
* Additional ordering tests using TestBase "expect" infrastructure | 2019-04-20 15:12:08 | d76456f1b6a92868e9f2f01309167003c94c66ca

fix typo: Coroutine"s"Context | 2019-04-17 08:58:42 | 43983505033a67719b0621572b868fc55f492016

Rework purity concept:

   * Purity is a way too polluted word and it is hard to tell what it means in Flow
   * Rename "purity" to "context preservation"
   * Prohibit changing the context, ignore only Job and CoroutineId (for debug mode) in SafeCollector
   * Reword documentation, add more samples
   * Add explanation for deprecated Rx-like methods | 2019-04-09 16:43:11 | d3cc25ff32a80de93ad5eaa912c8b54036c0f978

Unmute test that was failing due to JS BE bug | 2019-03-25 16:21:40 | 0d69e1353d9fcd5867fe74e0912d3f36dc7d8ea8

Merge pull request #1023 from Kotlin/debugger-sm-bypass

Improve stacktrace merge heuristic: skip state machine meaningless fr… | 2019-03-22 15:02:32 | 4ebc1306dd6e0a5929a9044bd65ff92edfeac8e0

Merge branch 'develop' into debugger-sm-bypass

# Conflicts:
#	kotlinx-coroutines-core/common/src/Timeout.kt | 2019-03-22 14:36:33 | 1ea4da4e510f68cb9311b140d2c2e13e8acefe6b

Rename CoroutineState to CoroutineInfo and improve its API

  * Rename jobOrNull to job
  * Replace coroutine with its context
  * Add check-and-act on isInstalled flag into synchronized blocks in order to avoid spurious memory leaks during uninstall
  * Replace WeakHashMap with Set to simplify debug probes | 2019-03-05 15:43:13 | 2496dc256712eb3bb282d3291cedc1497a09cdc8

fix documentation typo | 2019-03-14 13:49:36 | 325b0ad1ee98450e2598e2c0738a398e7b23d959

Add test about threading for immediate dispatch. | 2019-03-14 23:47:26 | a69f73613977bda2c25523cfcae93d6f74bd9cc0

Rename DispatchException to CoroutinesInternalError and make it an Error to better reflect its semantics | 2019-03-07 12:15:40 | 132c1e3f029610208607dcac4d55ed05f62d0642

Get rid of quadratic complexity during stack unrolling in debug agent in 1.3.30 | 2019-03-05 15:26:09 | e35baa43d379e9a7ee3eadc392665dc011268525

Make JobCancellationException copyable in debug mode

This simplifies trouble-shooting of "what caused cancellation", as you
can print out exception and see its recovered stack trace. | 2019-03-04 19:20:25 | d293639980d7a6141394dc8174180f221daa4787

Add operator invoke for CoroutineDispatcher | 2019-02-11 13:21:44 | 57540d452ef82207f14c4235ee690a4323a343fa

Hide cancel(Throwable), introduce cancel(CancellationException)

Job/ReceiveChannel/BroadcastChannel.cancel(Throwable) is now hidden and
cannot be invoked from a newly compiled code. This function had broken
semantics when used with an arbitrary exception. A safe replacement
is available in the form of cancel(CancellationException) where
CancellationException can be used to supply additional information
for debugging purposes.

Fixes #975 | 2019-03-01 09:08:43 | 0aad8f1274c4be7f02ac8f361eb0685d4b438243

Improve CoroutineDispatcher documentation | 2019-02-27 11:19:21 | 08f8214ddbcdbf0becc2b5264caf29080f04576f

Promote Dispatchers.Unconfined to stable API | 2019-02-27 10:16:00 | 9863de1401a90de61307c1ade952ebd7ac65a88a

Promote MainCoroutineDispatcher.immediate to stable API | 2019-02-27 10:02:03 | 4fc4fd555f784775360c464e178d7662291f5fba

Cancellation in consumeEach should dispose Rx Observable

Fixed bugs in MaybeSource/ObservableSource.consumeEach implementation
so that observable is disposed on cancellation.

Also optimized implementation of bridge function to avoid extra dispose
calls if possible (this is permissible by specification, though)

Fixes #1008 | 2019-02-26 16:03:24 | ae8a8743dd37a442c7882a04d1da0de367671ccd

Replace UI with Dispatchers.Main in CoroutineScope documentation

Fixes #803 | 2019-02-27 14:22:29 | b37c296f03ee38cd5cdf5091fa67a010c6a3f6d3

API Cleanup based on review

- removed asyncTest
- added pauseDispatcher(), pausDispatcher(block), and resumeDispatcher() API to delayController
- removed dispatchImmediately (the name was fairly opaque in an actual test case)
- added exception handling to runBlockingTest | 2019-02-12 02:46:06 | 8328a39b39d60fe4e44b6e1e5796d37ab02cbbae

Update coroutine test dispatcher to use structured concurrency. | 2019-02-11 23:40:52 | 9a8842956015a018ee4fa37631052fac82553d36

Make SupervisorCoroutine implement ScopeCoroutine

* Implement ScopeCoroutine in SupervisorCoroutine
* Do not indent scoped coroutines in debug strings

Fixes #915
Fixes #916 | 2019-02-20 15:31:02 | 8d506b3757777664e007b1287ce3c4cb943f4ae5

CoroutinesTimeout debug rule for JUnit 4 (#991)


Fixes #938 | 2019-02-20 14:00:57 | 2bdd4605e797a88019565938cf4a4daca92593a5

Reknit after fixing indentation in code samples | 2019-02-20 10:31:38 | 3785348e32e7180efe86862bc84da14d3631a98d

Update named arguments referenced issue

The issue previously reference was marked as fixed for one of the two problems it was about,
and a new one has been created for the remaining issue that is relevant here. | 2019-02-19 15:17:56 | 919284b159fec82ef2b6f4da9af5f88248e0713a

Obtain real stacktrace of running coroutines in debug agent

  * Capture thread of coroutine when it's transited to running state
  * During dump retrieve the stacktrace of captured thread for running coroutines and merge it with metadata-based stacktrace

Fixes #997 | 2019-02-20 08:43:23 | f18878f632dd28ad8ff847eb4f95e9ed50f373bb

Check that worker thread belongs to the same scheduler in dispatchers.shutdown

Fixes #990 | 2019-02-19 16:01:48 | 703a286e8b55d353b4ebc84320710562d627c96b

Add section about Android in debug agent readme | 2019-02-01 15:13:39 | a68376ceea89bc3599203a4c36e81cd177fc37cd

Additional documentation section about debug mode and stacktrace recovery.

Not included in a guide intentionally | 2019-02-01 11:54:06 | 418ba80a7bb0b8661823fbb325b7edac526ab7db

Call initCause during reflective exception copy in runCatching block to avoid DispatchException when initCause throws

Fixes #933 | 2019-01-15 12:18:43 | 3e4d808200e990e4b5c7e4755b23a5314fdb662a

Move debug example to a proper package | 2019-01-29 09:41:02 | c055f025f4fd3d3dc6a4ceecb798091b31f986e9

Migration to new multiplatorm plugin (#947)

Migration to a new multiplatform plugin
  
  * kotlinx-coroutines-core-[common|js|native] are merged into one core module with multiple source sets
  * Folder structure and readme are restructured
  * Publication process is patched to preserve backward compatibility with artifact names | 2019-01-28 08:34:24 | e50a0fa78aae052e128e8b17666e081e4dfc78be

Update CHM in test to containsKey for KT-18053 fix in 1.3.20 | 2019-01-23 14:49:17 | a672d5f58040f9a14661b157e085c63a7c8b2ff7

Replace old UI dispatcher name with Dispatchers.Main | 2018-12-31 13:52:33 | 8c071247dbe5928ebf5138471c1ac905c5de4018

Update coroutines-guide-ui.md

[Update]
- typo: what you might want to express here is `JavaScript event dispatch thread ` | 2019-01-08 16:01:55 | 66f0123b5fe98f861b46ef1400c8b11bc40c2ace

More idiomatic and readable example for coroutines debug module readme

* Idiomatically use suspend functions
* Idiomatic parallal decomposition with coroutineContext/async
* No GlobalScope
* Use less vertical space & more concise code to aid readability
* Link to full code file (in tests) | 2018-12-22 15:40:39 | b65dc7fe0f75b7dc76e84205c3b57c0aff09c269

Update CHM in test to containsKey for KT-18053 fix in 1.3.20 | 2018-12-22 13:38:36 | 4b60d013508c865dd8430f334e89481d93893ab1

EventLoop integration and reuse for runBlocking and Unconfined dispatchers (#889)

EventLoop integration and reuse for runBlocking and Unconfined dispatchers

* Event loop that is created by runBlocking or by Unconfined dispatcher
  is reused across the same thread to prevent blocking of the loop
* Semantics of runBlocking and Unconfined are fully retained
* DefaultExecutor also registers itself as running event loop and thus
  cannot be blocked by runBlocking
* Consolidates thread-local handling for native
* Also fixes thread-local memory leak on JVM (does not use custom class)
* Restore BlockingEventLoop class name for runBlocking event loop impl
* Internal API for custom waiting loops to be used by kotlinx-io

Fixes #860
Fixes #850 | 2018-12-21 13:41:39 | 51738243c980165ad4fb426105baf6e00d02f87b

Dokka links fixed | 2018-12-18 13:26:58 | 89d43afab3f1090a25697c1e8cebd7faac6612c1

Debug improvements (#900)

Debug improvements

* Rename printHierarchy to printJob and hierarchyToString to jobToString, introduce corresponding methods for scope to simplify scopes debugging
* Remove CoroutineState.job in favor of CoroutineState.jobOrNull
* Use runCatching in Continuation.toDebugString to avoid crashes on some Androids with R8 issue

Addresses #858 | 2018-12-18 09:47:50 | 115a13933adbce880a72c1653b7be94eba566202

Ignore exception on cancel/fail race in CancellableContinuation

There seems to be no other way to satisfactory fix the problem of
a race between cancellation on CancellationContinuation and
concurrent failure of the corresponding background process in a
way the distinguishes "failure from cancellation attempt" from
a "true failure" without placing undue burden on anyone who is
implementing `await()` extension function for various future types.

- Added testTimeoutCancellationFailRace that works as a perfect litmus
  test; being allowed to run for a while it reliably detects various
  problems in alternative approaches.
- Optimized CancellableContinuationImpl; merged its code with
  AbstractContinuation class that is not needed as a separate
  class and removed.
- Deprecated and hidden CancellableContinuation.initCancellability();
  it is now always invoked after the end of the block that was
  passed to suspendCancellableCoroutine.
- Deprecated `holdCancellability` parameter to an internal
  suspendAtomicCancellableCoroutine function.

Fixes #892
Fixes #830 | 2018-12-15 11:12:47 | 876e9bab95d34f311be030a0706497564f96d95a

Introduce test module with testable main dispatcher (#749)

Introduce kotlinx-coroutines-test module with API to set Dispatchers.Main 

  * Dispatchers.setMain and Dispatchers.resetMain extensions
  * Use real factory in HandlerDispatcher instead of using initialized-once statics (prevent ExceptionInInitializerError)
  * Improve MissingCoroutineDispatcher diagnostic
  * Do not cache failed results in test dispatcher to allow reusing it between tests 
  * Deprecate HandlerDispatcher.Main (was accessible only fom Java API)

Fixes #746
Fixed #810 | 2018-12-17 16:49:12 | 4327b2120558c0e232b522b32b3427dc2ad02bf5

fix small typo of async method | 2018-12-16 07:09:02 | 054fcc2b68f9d9933981d65c485af88dba8f89d6

After merge fix: resolve clashes between type alias CoroutineStackFrame and jvm.internal.CoroutineStackFrame | 2018-12-13 09:57:37 | cd162d356e7dbb8a6ed8e02ceae0133af2df95b5

Merge pull request #876 from Kotlin/debug-agent

Coroutines debug agent

Fixes #772 | 2018-12-13 09:39:45 | a5a7cdb86a10d6fcda61c2b9fc55963b86ca8947

Repackage byte-buddy along with debug agent (so it shouldn't be a dependency of target process), use shadow plugin for that to avoid clashes with other byte-buddy versions and publish shadow jar instead of regular one for debug module | 2018-12-13 08:58:29 | 3781a821a11a64670b5a3ffa3c276f1533332ad7

Reknit after docs fix | 2018-12-13 08:58:24 | 75f634c56e3655d475bd93c4d7a5fc7242744d69

Speedup linerizability tests, make conflation part of helpClose (fixes nightly stress failure) | 2018-11-19 16:31:51 | b733f7d0cfd3c8fcca234d7d49f4350dfeb36264

Debug agent cleanup

  * Readme
  * Do not fail on Windows during signal handler installation
  * Do not warn about missing artificial stackframe | 2018-12-12 16:08:32 | 7a6fd89c04b3ee972136c0648700f8500dfb0f23

Rephrase default dispatcher documentation | 2018-12-12 10:36:54 | e06585a482f0f94d2819c24af8ac42582d38af6a

Get rid of top level 'debug' folder | 2018-12-11 16:49:07 | 7520c978464e2f3b1cc075dea36a9f11088e2d85

Unreachable code fix | 2018-12-11 16:44:49 | f64bcde03b4c5e46d63f19d5dcb3b1738c59eefa

Debug agent code style | 2018-12-11 16:20:39 | 12695b763715338149e0bcaa3633a6e0296fc361

Code style in test code fixed | 2018-12-10 13:11:06 | 8e9e4d1706083dd5fb6fcc4c89d2a65caa33914c

Debug agent optimizations

  * Do not store creation stacktrace of the coroutine, recover it from ArtificialStackFrame
  * Reduce lock window where possible to avoid contention
  * Avoid stacktrace copying where possible | 2018-12-10 17:19:35 | 5a80d2a0b0c52121a0788acc036030812fea9f59

Debug agent to track alive coroutines

  * Can be installed dynamically or from command line
  * Captures coroutine creation stacktrace and stores it in completion, automatically enhancing stacktrace recovery mechanism
  * Allows to dump and introspect all active coroutines
  * Allows to dump Job hierarchy
  * When installed from command line, dumps all coroutines on kill -5
  * Probe support in undispatched coroutines | 2018-12-10 08:41:00 | c7239ac4915df344add7386c8aa19038499f5e4b

Scoped builders and exception stacktraces synergy

  * Recover stacktraces via both fast and slow paths in scoped builders
  * Merge stracktraces of nested scoped builders, eliminate common prefix so it looks like a flat profile
  * Optimize stacktrace-related machinery
  * Copy meaningful part of original exception into recovered one, rename "Current coroutine stacktrace" to "Coroutien boundary"
  * Rename Exception.kt to StackTraceRecovery.kt to avoid name clash with another Exception.kt | 2018-11-27 15:13:47 | 1032f5801a9719fbe67325daec944104eff793a9

Initialize JavaFx more accurately, do not leave dispatcher in uninitialized state in case of unexpected failure

Fixes #816 | 2018-11-27 12:57:16 | 69a2d9273288dec1e29a81f2c314ccf23ae99093

Fix: default dispatcher doesn't work with jsdom | 2018-11-06 16:46:00 | bb0ad4ae2772c9c4af0e3b44b129423cf5ae0c58

Sanitize class names received from Kotlin debug metadata | 2018-11-12 17:04:35 | 25a886e9ee0047f755e8d32f496ced3760e7ec64

Debug optimizations:

  * Extract call to suspendCoroutineUninterceptedOrReturn behind recoverability check
  * Cache exceptions constructors into WeakHashMap in order to avoid expensive ctor lookup | 2018-11-02 17:06:14 | e3b80d9c7198728a5566cb2c74da61ee115e61d6

Basic exception stacktrace recovery mechanism

  * Implement CoroutineStackFrame in CancellableContinuationImpl, DispatchedContinuation and ScopeCoroutine
  * On coroutine resumption try to reflectively instantiate exception instance of the same type, but with augmented stacktrace
  * Recover stacktrace by walking over CoroutineStackFrame
  * Recover stacktrace on fast-path exceptions without CoroutineStackFrame walking to provide more context to an exception
  * Unwrap exceptions when doing aggregation in JobSupport
  * Add kill-switch to disable stacktrace recovery, introduce method to recover stacktrace on the exceptional fast-path
  * Add `suspendCoroutineOrReturn` on exceptional fast-path in await in order to provide "real" stacktrace

Design rationale:
All recovery of *suspended* continuations takes place in Dispatched.kt file, the only place where all calls to "resume*" ends up, so we don't have to remember about stacktrace recovery in every primitive we are implementing. But to provide more accurate stacktraces we *have to* recover it on every fast-path for better debuggability.

Fixes #493 | 2018-11-02 12:55:20 | 675c30c4b96533a374ae36b144dbe6b26634b97b

Merge pull request #791 from Kotlin/undispatched-cancellation

Use final Job state in undispatched coroutine completion | 2018-11-06 12:55:53 | 666ea6e554fa52ea03504ab618543ca26e20ce3b

Add ExperimentalCoroutineDispatcher to binary compatibility check, restore binary compatibility in Ktor | 2018-11-06 11:03:39 | e3ab2a692a6da18ee9213a124a4c111235046c75

Add scheduler name to ExperimentalCoroutineDispatcher

Fixes #661 | 2018-10-31 13:15:35 | 92327322442d4c8be225067ff6e16c6827f8b38e

fix link | 2018-11-05 16:56:31 | 64f2b2006b5a7cf2a760ec976dd28e988ce122d0

fixed typo | 2018-11-05 14:28:47 | ace91872cc56113fa10e844069f46eb3bbec9c95

Use final Job state in undispatched coroutine completion

  * When using in-place coroutine builders, startUndispatchedOrReturn will return block's final value on fast-path. This is not correct because if any of the children had failed, whether or not exception is thrown depend only on child timings. Moreover, in the face of such race exception may be ignored if scope owner wasn't cancelled or is missing.
  * Introduce special hack for withTimeout and withTimeoutOrNull to ignore TimeoutCancellationException on the fast path
  * withContext, coroutineScope, supervisorScope, withTimeout and withTimeoutOrNull are affected and now check cancellation on fast-path | 2018-11-04 12:32:34 | 78832e3bb38560f4c4d55cdba436bf7bc9b761ca

SchedulerTask is now an abstract class with optimizations for jvm

* It removes the need for a separate SchedulerTaskBase
* submissionTime and taskContext are marked as @JvmField
* DispatchedTask is also an abstract class
* resumeMode is marked as @JvmField | 2018-11-01 21:10:39 | aa374a95dc7e6df4fd6458fe6d8abe95e2953fce

Scheduler: capture TaskContext for afterTask before running it

This is not strictly needed, since the reusable Task instances
(DispatchedTask) should be always reused in the same context, but
this makes the code more resilient to future changes. | 2018-10-22 02:31:23 | e64d9b706cb5180260e4d95fa3a990449163da51

Avoid allocation of CoroutineScheduler task object

* DispatchedContinuation and CancellableContinuationImpl have all
  the necessarily field to be scheduled | 2018-10-21 17:08:49 | 16e20347dc5557063742ea8a06dbe5162a211c25

Publish: Comments style fixed | 2018-10-26 20:02:08 | f18b9f580faff47af054cb6c0942cd15ccc7675d

Fixed exception handling for publish builder

* Test that ensures proper parent cancellation
* Stress test to ensure that exception in publisher always handled
  by parent
* Also fixed race between request & signal completion that did not
  reproduce before | 2018-10-23 05:28:12 | ac848e872da94e01ed60a6bfecbfe3926229f44f

Reactive streams integration conformance to TCK verified & fixed

* Throw NPE on null subscriber
* Throw IAE when requested n <= 0 elements
* Do not sent any notification after cancel() | 2018-10-20 16:50:05 | 8cced247b1d83f7885f21be8c9b0354dab0fd1f3

fix minor typo | 2018-10-30 19:14:20 | a223f351c1dac80443b02ab905d46acbf4a66720

Implement yield for unconfined dispatchers, documentation improvements

Fixes #737 | 2018-10-23 09:29:56 | c33ef61d4502b71e0cdc354337f261917102d1c6

fix: make snippet as non-runnable | 2018-10-23 12:33:12 | 0661d477332205c23defe65d51e4063cd009e023

Prevent temporary leaks in HandlerDispatcher by properly handling
cancellations in scheduleResumeAfterDelay() implementation | 2018-10-16 22:30:40 | e321394c359758659a07ad1c98429ec2acd8ea59

fixed typo | 2018-10-19 21:16:57 | d981966acf780078119493c1f64e30dc9fa6e02e

Merge branch 'release-candidate' into develop

# Conflicts:
#	core/kotlinx-coroutines-core/test/RunBlockingTest.kt
#	docs/coroutine-context-and-dispatchers.md | 2018-10-18 14:40:10 | a7e10146781744f6df3865a1a33fa4e7cbc2c0b6

Merge branch 'context-elements-opto' into release-candidate

# Conflicts:
#	common/kotlinx-coroutines-core-common/src/Dispatched.kt | 2018-10-18 13:59:46 | cd37d8e8b30656a92a883b646fe050ff479bafdd

Minor optimizations of UndispatchedEventLoop | 2018-10-18 12:17:25 | 23d435b17a1aaaba86cc71656a4080547c4c727e

Do not step into thread-local event-loop on CancellableContinuation#dispatch fast-path | 2018-10-18 08:54:56 | faa477496bc2c05dad4034847a3f7d3f6aae3818

Use FIFO queue in undispatched event loop | 2018-10-17 16:51:50 | 09b9d6c157c9d7c6ec84052c16e64d3eebd0bc8e

Move undispatched thread-local event loop to dispatched continuation, execute all undispatched tasks in that loop to avoid SOE in user-supplied unconfined dispatchers and 'immediate' main dispatchers. | 2018-10-17 15:37:36 | fd54bc4882357771d0bec29abbd6e99dfccab725

Rework Dispatchers.Unconfined to use thread-local event loop

Fixes #704 | 2018-10-17 07:57:30 | 7ee722a595b416023c69d987fb7e4682ac0ffe91

Cache result of ThreadContext#foldAll in the field of DispatchedCoroutine to avoid context fold in tight loops

Fixes #537 | 2018-10-16 12:47:26 | ae85797805f93f98bfad64f5f91ba97e4f2c1fbc

Dokka fixes

  * Provide module with Kotlin 1.3 API because Kotlin 1.2 from Dokka can't read classes marked as "from the future"
  * Add runConfiguration dokkaStubs which is included only during dokka task with some classpath magic for Kotlin 1.3
  * Add package.list for slf4j
  * Fix unresolved types/links in documentation
  * Suppress all internal/inherited API | 2018-10-13 12:40:32 | 706e39363b586127b29e28fd97d476129c22fe93

Make EventLoop internal, @JvmName("from") for ExecutorService.asCoroutineDispatcher | 2018-10-11 16:09:44 | b6eca2a62158b2dc8d9b41d86040924095dca662

Use toString implementation for continuations to leverage debug metadata

Fixes #679 | 2018-10-10 11:46:53 | 4220ca2106bea653f2831f19c2c93752ea0e468a

Cleanup: get rid of workarounds, cleanup guide, suppress/fix compilation warnings | 2018-10-10 08:56:41 | 1bdbb3ef364006515157b5884dc663d9c3172c6c

Experimental annotation revisit:

  * Mark our API annotation as experimental with corresponding warning or error
  * Get rid of workaround for new inference bug
  * Migrate to compiler arguments instead of annotations | 2018-10-09 16:06:29 | e6e82391c33716033996ef6718756feab641816c

Restore TOC in the root coroutines-guide.md file with links to individual files

* Knit supports new TOC_REF directive for that.
* Reknit docs (also fixed out-of-date sample file). | 2018-10-08 17:20:12 | 715acd33e564dbff128a12b10ec2c6e24240d330

Migrate to Kotlin 1.3 coroutines, drop experimental from package

* Features based on version 0.30.0
* Uses Kotlin version 1.3.0-rc-57
* Uses Kotlin/Native version 0.9.2
* Uses AtomicFu 0.11.9-eap13
* Replace SuccessOrFailure with Result
* Replace buildSequence and buildIterator with sequence and iterator
* Apply @BuilderInference on all builders (including extension methods to workaround inference bug) | 2018-07-13 07:33:25 | 0950dfa1fe114e3682a546e3e53ef34dec9dfd4a

Fix lost exception from dispatched withContext on cancelled job

Fixes #675 | 2018-10-08 13:13:01 | 0f94304c6ae46c8f0cec24dde29d2e7af9ae7e97

Mark newSingle/FixedThreadPoolContext as obsolete, document the reason

* The will be replaced by another mechanism in the future.
  See #261 for details.
* The proposed replacement is to use the standard java API:
  Executors.newSingleThreadExecutor/newFixedThreadPool
  and convert to dispatcher via asCoroutineDispatcher() extension. | 2018-10-06 13:36:13 | f5126d0a9263f0b73a57d17031c340f78e3a25bd

Lazily load Dispatchers.Main and provide a stub impl on failure

Also specified explicit public visibility for Dispatchers object.

Fixes #658
Fixes #665 | 2018-10-06 14:09:05 | 0ece3885d445b60d254dc0fb21c7c05c7ebfb1bf

fix grammar typo

removed repeated 'for' | 2018-10-05 13:16:33 | e7a0723e930d52c4cb4665c5a3918f883287c039

Short Dispatchers.Default.toString value ("DefaultDispatcher") | 2018-10-02 09:59:11 | ec8cbd252d20adcdc91149ae9129149b252d945c

Move UI dispatcher to common Dispatchers.Main (#641)

* Main thread dispatchers are grouped under Dispatchers object and are discoverable via ServiceLoader

  * Dispatchers.Main can be consistently used and easily discovered, its implementation is discovered with ServiceLoader
  * It allows us to add iOS Dispatchers.Main implementation in the future thus opening the door for multiplatform UI-dispatched code
  * Workaround for #626, now Android users can start migration to RC coroutines

Fixed #626 | 2018-10-01 16:01:16 | cfe699fb59d799ab22da23aae983cc34b1164f29

Never loose coroutines when CoroutineScheduler is closed

* CoroutineScheduler close/shutdown sequence now guaranteed that a
  submitted task is either executed by the scheduler that is being
  concurrently shutdown or RejectedExecutionException is thrown.
* RejectedExecutionException is caught by the coroutine dispatcher
  implementation and coroutines are rescheduled into DefaultExecutor
  if a (custom) instance  of CoroutineScheduler is being shutdown.
* Added stress test for coroutine scheduler closing. | 2018-10-01 07:52:56 | 4b0f4dec24b93db4e0e0abbfe59b115e886a30c1

Coroutine scheduler is used by default instead of deprecated CommonPool

* Documentation and guide are updated correspondingly
* "DefaultDispatcher" is used as a public name of the default impl
* Implementation is integrated with virtual time-source
* Shutdown sequence is reimplemented in a safe way for tests,
  makes "close" safe to use on custom instances.
* "close" on DefaultDispatcher throws exception just in case
* -Dkotlinx.coroutines.scheduler=off can be used to switch back to
  CommonPool

Fixes #198 | 2018-09-28 09:20:49 | 303708b27f8d997ae482e3106679a7d170bc16d7

Exception unwrapping logic rework, do not unwrap cancellation exception if parent can handle exceptions

It allows to properly handle only relevant exceptions by child without reporting the same exception multiple times, fixes suppressions hierarchy and allows to implement supervisorScope properly | 2018-09-28 09:29:21 | 88e72f9973810119f105f78768b59e19f6a49c26

Introduce SupervisorJob & supervisorScope

This change also fixes propagation of cancellation for Job() constructor.
When both Job() and SupervisorJob() are cancelled with exception (fail),
they cancel their parent, too. So we have similar behavior between:
* Job() and coroutineScope { ... }
* SupervisorJob() and supervisorScope { ... }

Fixes #576 | 2018-09-23 16:16:04 | 21f171c8cb09831e25acdeab5c667cf3c15a9692

Avoid OOM in thread-pool dispatchers, try to reflectively invoke setRemoveFutureOnCancel on executor instance and use default dispatcher if attempt failed

Fixes #571 | 2018-09-25 12:45:53 | e29f49799d118b5c3feb38886af3030d027e7b60

async and async-like builders cancel parent on failure

* Affects async, CompletableDeferred, and all Rx integration builders.
* This makes all coroutine builders totally consistent. They all
  cancel parent on failure, but they all consider "CancellationException"
  to be the case of "normal cancellation" that does not propagate to
  parent. The only missing case is Job() that should be fixed together
  with introduction of SupervisorJob().
* Note that "scoping" builders don't "cancel the parent", but rethrow
  the corresponding exception instead, so it that is how it gets
  propagated up the stack.
* This makes parallel decomposition exception-safe. You
  cannot loose an exception as along as default (child async)
  behavior is not overridden.

Fixes #552 | 2018-09-27 16:17:16 | 52bfdabfa1476f55c1b3880d43f49977fc8df943

Copy deprecated annotations on Job member to inheritors

* Makes them easier to find for cleanup
* Avoids bug with light classes | 2018-09-28 09:41:58 | ffda1da6aec27b51f0bc8640f0e48c8fcd1e8f59

Restore binary compatibility of Executor.asCoroutineDispatcher

Fixes #629 | 2018-09-27 18:19:38 | 18cc588106ff7f4c680831809e5af8d75063c689

fix broken links for kotlin web site (#628)

* fix broken links for Kotlin web site | 2018-09-27 15:42:04 | cbeef1039d7402939bac8ec4674e1a7b1adf993a

Merge pull request #588 from Kotlin/handle-exception-fix

Handle exceptions fix | 2018-09-25 21:00:29 | 25b4388ef2f94909acac51cf1e0206975cc4b84a

Add name parameter to Handler.asCoroutineDispatcher

Fixes #580 | 2018-09-25 13:40:30 | a180ff75e9f7c97189a2651e96f4212bff0b105e

Fix lost exception during cancellation in produce, fix integration with play services after rebase | 2018-09-25 16:16:02 | 1b22af7e462272cbc33fd019975ee3ec5dbf1b78

Merge branch 'develop' into handle-exception-fix | 2018-09-25 13:10:26 | 1e0a2f0ad358c49d97602ee01ecf76602721fa4f

fix compilation | 2018-09-24 17:29:00 | f30715955637d2006e17fda7f99d002877fedc1c

Docs for context/coroutineContext in AbstractCoroutine are fixed | 2018-09-24 17:29:42 | 2d8cad05755d47af7987f39385527d3bddb15377

Fix exception aggregation to ensure atomic handling of exceptions

* Removed legacy onFinishing handler support from JobSupport.
  - It is no longer needed, because handleJobException covers #208
* Fixed bugs that were masked by cancelling parent from onFinishing.
* Consistent "Finishing" state was introduced in internal machinery:
  - Job enters finishing state when it is failing or it is completing
    and has children
  - Finishing state cleanly aggregates all failures, tracks cancellation
    and completion status
* Job.isFailed is introduced as a consistent way to query the "failing"
  state of the job that was previously only implicitly available via
  invokeOnCompletion handler (cause != null means a failed job) and
  the documentation for both Job & Deferred is updated to reflect that.
* Source-incompatible change: Job.invokeOnCompletion boolean parameter is
  change to onFailing. Such handlers are now invoked as soon as the job
  starts failing and the root cause exception of the failure is consistently
  passed to all the handlers.
* The following internal methods were introduced to facilitate this:
  - Job.failParent(exception) is used by child to signal failure to parent
  - Job.cancelChild(parentJob) is used by parent to cancel child.
* Child never aggregates exception received from it parent, but uses
  it as it root cause if there is no other exception.
* JobSupport.handleJobException() logic for launch/actor is split into:
  - failParent - can be invoked multiple times on race;
  - handleJobException which is invoked exactly once.
* Exception materiazization is much lazier now, which should
  significantly improve performance when cancelling large hierarchies.
* Other minor perf improvements in JobSupport code.

Fixes #585 | 2018-09-14 09:52:50 | ecbc85cbdad134d868698e22c0fdd7220eaced0f

Typo fixed | 2018-09-22 13:28:37 | 63e3896d85f827f2e403ffd25593ac5d9af54715

Fix typo in deprecation message of JavaFx dispatcher | 2018-09-20 17:10:30 | 39a2c559b538b8681c0724d5ec3ee6058af4e1c3

Cosmetic fixes | 2018-09-20 08:25:56 | 2dd53204e7047e970f145281c11a9c834021b3a9

Improve HandlerDispatcherTest, check that jobs are actually executed | 2018-09-19 11:30:51 | 847eba7c935ed784e918d976c9c43464179a2df9

Reknit guide, fixed TOC in Knit with comma & verify mode in example-context-09 | 2018-09-19 11:49:42 | bca98f4e9ea3c485c8691209be32fee487f812fe

CoroutineScheduler: fixed race between createNewWorker & shutdown for tests | 2018-09-14 12:17:12 | 241e74e6a2cdadaa2753f40a326c732e95fac2d0

Fixed sporadic test crashes related to withTimeout and children

- The bug only manifested when withTimeout coroutine had children working
  in a different dispatcher
- A separate stress-test that reproduces this problem with much higher
  probability | 2018-09-16 12:31:13 | fa9586bc283d60427ad3e9162de7962da4b0ec1d

Updated dispatchers references in readmes and docs | 2018-09-11 16:16:49 | f189cec57d7d0751464a5939f1bbcbd32e15d7c0

Dispatchers are renamed and grouped in the Dispatchers object

* Dispatchers.Default — a default dispatcher for background asynchronous tasks
  (currently backed by FJP commonPool, a new dispatcher in the future).
* Dispatchers.IO — a dispatcher for blocking background operations (#79).
* Dispatchers.Main — a dispatcher for Android Main Thread (#533).
* Dispatchers.Swing — a dispatcher for Swing Event Dispatch Thread.
* Dispatchers.JavaFx — a dispatcher for JavaFx Application Thread.
* Old dispatchers are deprecated, CommonPool is deprecated, too.
* awaitPulse() in JavaFx and awaitFrame() in Android are top-level funs.
* Introduced HandlerDispatcher, SwingDispatcher, and JavaFxDispatcher types
  in the corresponding UI modules for type-safety and future extensions

Fixes #41
Fixes #533 | 2018-09-11 15:42:03 | dc29b071d4784e3739f89223ced2333ecd5408ad

Fixed hangs during thread termination in IO dispatcher

Fixes #524
Fixes #525 | 2018-09-11 12:38:14 | 750d468b3281570910d0cd4000d4e29702b25020

Invoke handler using invokeIt to avoid JS bugs | 2018-09-07 11:36:05 | c430e0797e87af77f812bbcfb8751e4a0e31ffc6

AtomicFU 0.11.5 to fix Windows compilation | 2018-09-04 14:58:45 | 61abcd224a13f674bffae096afa7250de262df87

typo fixed | 2018-08-24 12:24:02 | 1a1237083b14d5de8f13f66b7a4ba6d9e26183d7

Introduce IO dispatcher to offload blocking I/O-intensive tasks

Fixes #79 | 2018-08-23 14:27:19 | f5e67ba597acdfb90ef84d29e4d6028f3f17a6ba

Introduce ThreadContextElement API to integrate with thread-local sensitive code

* Debug thread name is redesigned using ThreadContextElement API
  where the name of thread reflects the name of currently coroutine.
* Intrinsics for startCoroutineUndispatched that correspond to
  CoroutineStart.UNDISPATCHED properly update coroutine context.
* New intrinsics named startCoroutineUnintercepted are introduced.
  They do not update thread context.
* withContext logic is fixed properly update context is various situations.
* DebugThreadNameTest is introduced.
* Reporting of unhandled errors in TestBase is improved.
  Its CoroutineExceptionHandler records but does not rethrow exception.
  This makes sure that failed tests actually fail and do not hang in
  recursive attempt to handle unhandled coroutine exception.

Fixes #119 | 2018-07-25 09:22:46 | 7587eba96a230f3f0ab0c04f52723e926f7a845d

AtomicFu version 0.11.3 (bug fix) | 2018-08-23 11:05:46 | be065fd2c566acf4f600de23d45d70cf9f2144bc

Introduce ExecutorCoroutineDispatcher instead of CloseableCoroutineDispatcher

Fixes #385 | 2018-08-15 10:03:23 | b517f0529fe4a2066ca8ac985c08206cd4587758

Add workaround for K/N bug | 2018-08-22 09:37:41 | bbe6d8a915b2be9c0a7ff9d92677c878718fa219

Implement withTimeoutOrNull via withTimeout to avoid timing bugs and races.
Remove deprecated API

Fixes #498 | 2018-08-21 16:45:29 | 988eb26469819f7cc8cb1ba26c3a76a6805e8387

Provide API to create limited view of experimental dispatcher

Fixes #475 | 2018-08-15 09:06:06 | cac1a0f13c5b81cdfa3c2d1020e8d86ac8cd0029

Additional debug output for CoroutineSchedulerStressTest | 2018-08-10 17:38:41 | 21ce9c066c752adf4db1e8388a9d38a390b5f08b

Execute EventLoop#invokeOnTimeout in DefaultDispatcher to allow busy-wait loops

Fixes #479 | 2018-08-08 15:04:59 | e90cdb031ffab87d9f7671cc9e856b2a9534d59e

Scheduler tests fixed:

[temporary] Ignore flaky tests
Fix benchmark compilation
Fix WorkQueueStressTest | 2018-07-26 17:02:03 | 9542f1ce4f84d08ef2b33d14ce3ae79a8a93fa86

Scheduler improvements:

Fix (one more) ABA problem in tryUnpark
Global TaskContext to speedup CPU tasks
Documentation improvements
Stress tests constants tuned to be more robust and faster on local machine (and when ran from IDEA)
Style fixes | 2018-07-26 10:57:04 | e50fb89c4e80d7accb9bdfff3ce54c59d2857c26

Scheduler tests infrastructure

Support "kotlinx.coroutines.scheduler" property to change DefaultDispatcher
Updated scheduler shrink test with custom idleWorkerKeepAliveNs config,
so that they execute faster
Fix submissions from another instance of CoroutineScheduler
Run JDK16 tests and tests under new scheduler tests only during nightly stress test | 2018-07-20 20:57:57 | 5c7454b8a872d925f206f418c16d9880bf23e25f

Removed wrapper from LimitingBlockingDispatcher by introducing TaskContext | 2018-07-23 09:38:06 | 216e4d30a2b225361a4f3e59465c079a0f116379

Fixed ABA problem in parkedWorkersStack and other stress improvements

* Workers are now numbered starting from 1, zero is used as sentinel
* Workers are lazily created (no threads initially)
* Close/shutdown of the scheduler also clears state so that subsequent
  rogue attempt to dispatch anything fails.
* Work stealing is more predictable. It starts at random index but
  then goes linearly via workers array. | 2018-07-20 20:25:58 | db22e4023442341d39d0c3797de73e74efb25882

Scheduler cosmetics

Stealing logic cleaned up a bit (mostly style)
Update worker thread names when worker threads are terminated to maintain
consistency between their index in array and name;
Improved debugging info (toString)
Merged yield and spin counters, parkTimeNs is in Int | 2018-07-19 11:12:31 | bba6e8918e32d521109583a9024b3d5e82da53f5

Improved management of parkedWorkersStack in terms of ABA/concurrency;
Also includes documentation, naming and packaging fixes | 2018-07-18 10:12:31 | 1d3b0191ecbf498965d81257c80ad6f87e583552

Improved tasks dispatching:

Merge blocking and created workers into single state variable
Replace j.u.c. queue of parked workers with intrusive stack to support shrinking and increase performance
Replace j.u.c. global queue with Michael & Scott queue which supports conditional polling
Poll for blocking tasks from global queue when CPU token is not available
Make last ditch effort before thread termination
Idle reset on requestCpuWorker | 2018-05-03 11:52:00 | 18a91347466560b63144d0097f248d9edb029780

Fix ordering bug in QuasarTest | 2018-07-25 16:16:23 | a608a335ff57e969f69985c43ee70c30da1dba8f

Get rid of compiler bugs workarounds | 2018-07-25 13:27:14 | 5f73827f3131332018c02650057eff4aa2886ae7

Channels concurrency improvement:

Make close, cancel, isClosedForSend, isClosedForReceive and offer linearizable with other operations
Fix bug when send operation can be stuck in channel forever
New concurrency tests

Fixes #359 | 2018-07-17 15:39:20 | ea651aa5badbc20f911c844db2a57ea4f68fc38b

Access to PlatformImpl in JavaFx dispatcher, on Java 9 it's an internal module which should be explicitly exported

Fixes #443 | 2018-07-20 12:07:28 | 5557245405f965ec5ca26083301559066a1be147

Minor grammatical changes to the Coroutines guide

Minor fixes for the English grammar in the coroutines guide to help ensure new readers understand coroutines properly. | 2018-07-19 20:01:40 | 977ada1e74e0ae9b011fb219891433a6d36e9ef3

Validate FJP.commonPool parallelism to avoid pathological bugs

Also always construct private FJP pool if
kotlinx.coroutines.default.parallelism is explicitly specified.

Fixes #432, #288 | 2018-07-11 10:36:07 | 1e12210cd2bccdfd866b1c9649cd19e40663fb5f

Change order of handlers in JobSupport and CancellableContinuation
1) Invoke handlers before dispatching in CancellableContinuation to make behaviour timing-independent and Unconfined doesn't produce unexpected results
2) Invoke onCancellation -> handlers -> onCompletion in Job to make behaviour timing-independent

Fixes #415 | 2018-07-03 08:11:21 | b10287ecb35463f471ac120367a0a4f56f6b5c49

Typo fixed | 2018-06-26 11:58:39 | 7981999a156918abced59de696b02d9bc731f808

IO: fix joining and continuous writing byte array interference | 2018-06-13 16:49:45 | 9faa0395afd26a3c29cd67de5dce635a7882cf5c

Update ThreadPoolDispatcher.kt

Fixed typos. | 2018-06-09 17:01:53 | 517a2592077b067032d6c0379226d0467d7662f1

IO: fix continuous writing session interfered with joining | 2018-06-01 14:23:47 | e15eae8e3537080a82078873d762ad9de61f50f4

Typo fix | 2018-06-03 23:34:22 | e185ed6f918a1df082832c9059a091505b9a5cf9

Introduce deprecated ReceiveChannel#use to preserve backward compatibility with SubscriptionReceiveChannel, fix reactive samples | 2018-06-01 12:30:34 | 313978cf6b3901b1d7fbfb5d1f688c068a072c09

LockFreeMPSCQueue optimized & fixed

* no need for REMOVE token to hurry up GC
* Placeholder logic is fixed to avoid potential data loss on wraparound
* Stress test for resize/copy added | 2018-05-30 18:58:02 | c22a1c748e93db6e7d4e73f9118e8435edbeb698

Leaking handles in awaitAll are fixed | 2018-04-28 16:22:29 | e0b6db04b3bd86e942bc7e40081a82aedd8fd200

Delay bug fixes:
Invoke clearTimeout on cancellation in JSDispatcher
Remove delayed task on cancellation from ThreadSafeHeap on cancellation to avoid memory leak | 2018-04-26 13:03:40 | cd00643b92c9698ca728f92a66f52b30b3811d05

Documentation for debug property values | 2018-04-11 19:21:23 | 590c8889c2bb5341f15ee20e440c5599342fe34b

typo fixed | 2018-04-04 06:59:33 | 905a512625ad96dcd45c789f983babd93dfde011

Add extension to ExecutorService to return closeable CoroutineDispatcher

Fixes #278 | 2018-03-20 19:28:52 | 26f4b9ecd1bdd03299b668541f7c7c9ecaf9ab7c

Debug toString for channels

Fixes #185 | 2018-03-06 10:37:42 | e4b6f09af7c0d0b6963fa8611e867ff3292fad0e

rx-example: Added application plugin & fixed to use runBlocking | 2018-03-05 14:58:59 | 00560e8b0add1628bd0a32202b6f3cc301b35af3

Use NodeDispatcher on ReactNative

Fixes #236 | 2018-03-05 09:01:07 | ecc68f13141d1353aa2bb1d027a077e0fd7be4fb

Check for undefined `window.addEventListener` when choosing default coroutine dispatcher.

Fixes #230 | 2018-02-10 19:35:58 | 54d57e0c1fff22fe1d72c762f2bdbf01995395ca

Update README.md

Minor typo and typography fixes. | 2018-02-04 00:30:58 | 7dd6b66eced47e4ddf0b2c76c974ac19612b827c

IO: fix error propagation in blocking adapter | 2018-02-02 14:18:47 | f0c1d99e2c5c5978da7ace9d58c61a5648ed7687

Update coroutines-guide.md

This tutorial suggests just Async suffix:
https://github.com/Kotlin/kotlin-coroutines/blob/master/kotlin-coroutines-informal.md#asynchronous-programming-styles
Also, there was "of" instead of "or" | 2018-01-29 17:39:02 | 7e94e70734f6e01b0522d11071e6825879a221e7

runBlocking is improved to properly support specified dispatchers,
so that `runBlocking(UI) { ... }` can be used outside of UI thread.

Fixes #209 | 2018-01-29 15:07:21 | cb78787638039096804bc1b97031bcb9801c0547

Workarounds for KT-21968 to fix JS tests | 2018-01-24 20:31:22 | dfeba242b9e328f7528507f9349623671a00333c

IO: fix joining sequence, avoid infinite joinTo suspension | 2018-01-23 20:16:54 | d1842c6301d8debca8509809d473ce7e889b1d7b

IO: make reusable cancellable continuation implement DispatchedTask | 2018-01-12 15:46:22 | 4d01f7ec3b33f7633f3737a5ab3a3fc90703f57f

JS: Introduce Window.asCoroutineDispatcher and use custom queue in
Window.awaitAnimationFrame to align all animations | 2018-01-13 08:20:32 | 1867f6de0fb39077d0cb13fdc0400dd4568f717b

Actually fixed startup/shutdown of DefaultExecutor for tests to prevent
thread leak. Includes test-case. | 2018-01-12 15:28:24 | 9483301695f4c0784d663238ecd0ef04bbfcbea3

MPP: Debug toString should not depend on kotlin-reflect | 2018-01-11 16:04:12 | b79277b4fab5353680445f36dd9b19a740828203

IO: Use TestBase in all tests and fix leaking threads in tests | 2018-01-11 10:48:19 | c45f5fa3b636d66b824351c8d8d9368b8ee4e37f

MPP: Ported DispatchedTask perf improvements to JS and more code is made common | 2018-01-11 09:39:36 | f29203c158a526f90ae8574abfc1ba6dd5249262

Performance: Remove DispatchTask, store value in DispatchedContinuation | 2018-01-10 13:25:25 | f2239e191f55883486d5ce04ffb0c6f75cdc3468

Update coroutines-guide.md

Correct `Dispatcher` spelling | 2018-01-08 13:56:54 | fa13beba79e6ebb68588ba2167b67a77196907d3

Optimize creation of DispatchTask for cancellable continuations (fixed) | 2017-12-28 09:21:14 | bdf23f28c425ea391baa7ddbc3ba012d15e6dfa5

Optimize creation of DispatchTask for cancellable continuations | 2017-12-27 22:09:43 | ac48070de5e20b727b6d9ffd5cc7c259426fb6fb

MPP: DefaultDispatcher internal impl class renamed to JSDispatcher | 2017-12-27 10:14:54 | a919827885289271a6c598ab47fdf4434a8e0da3

fix typos | 2017-12-24 19:55:06 | d2d42ea802b54d2ede23f3edf3c18521ae46a3e9

IO: fix accidentally used tryResumeWithException | 2017-12-06 14:09:01 | 9ef4e0c05168acdb2c955079e2ee857cfec9de06

IO: fix spuriously hanging pipe tests | 2017-12-05 12:41:42 | 4adac45480b33664d79b24f7a779e7d4c1da68b1

IO: fix joining with different write byte orders | 2017-12-05 09:35:56 | 8af8937a34e893661dfe15f9be598eac50b101df

IO: fix infinite writeSuspend loop caused by auto-resuming flush | 2017-12-05 09:27:09 | e6764086ef4a03ec610245740b379f5da617224c

Bug fix: start hangs on lazy coroutine with attached invokeOnCompletion | 2017-11-30 13:41:47 | 5610e1df2eb3f67be8b45633b5d6ffbf73ec6bb8

Add DefaultDispatcher on some reactive operators | 2017-11-29 21:12:35 | e19ee04ca72316f9d67a58d35b8be398b059f1f5

IO: fix too expensive joinTo fast-path | 2017-11-23 09:39:27 | 060f36a06d341f43c0f9e77fd6706bf71f94972c

IO: fix typo in test name | 2017-11-20 08:43:26 | 9a6ca1a006debfa08392027508d03a141ae53841

Introduced ReceiveChannel.cancel method;
all operators on ReceiveChannel fully consume the original channel
using a helper consume extension, which is reflected in docs;
removed `suspend` modifier from intermediate channel operators;
consistently renamed channel type param to <E>;
added two versions for xxxTo fun -- with MutableList & SendChannel;
added tests for all channel operators;
dropped/deprecated ActorJob/ProducerJob, fixes #127 | 2017-08-17 18:01:33 | b555d91193d9e76710062451cf94a94d14820e98

IO: fix race in closeWaitJob of JoiningState | 2017-11-17 16:30:22 | 47d92bafe90d899dfb53cd0f8bf7eae75504047e

IO: fix accidentally missed it | 2017-11-17 16:29:49 | d42bdadc8520ec490d5b37f5f160b54d4541d2f8

IO: fix race in ByteBufferChannel.write(lambda) | 2017-11-17 15:39:03 | 7bf4fa9e3b19a8200450fabe396a0ff854615596

IO: fix joining of already closed but not empty channel | 2017-11-14 11:52:32 | 9e9929d376d2b92cd5fda2f21f7cc1eb51f66ca8

IO: fix lincheck dependency | 2017-11-10 20:22:53 | b94ce42827dc5f9294f19b99da356ad585fb01ea

IO: fixed awaitClose and copyDirect | 2017-11-10 09:22:23 | 373d590e103f3203f61b2fb93b3b82bcce1de13e

IO: fix race in joined flush once again | 2017-11-09 18:18:05 | 8e9138ca4a297189f49bece8e739b6584f69e061

IO: fix joined close/flush | 2017-11-08 13:50:13 | 2fdb5aa4867b60f7c659cf4d950babfd2a43a67a

IO: fixed joined channel flush | 2017-11-08 03:15:39 | 625c1fefa57f95af2b723b7c7e3b1a5319c69faf

IO: fixed joined ByteChannel close | 2017-11-08 03:11:53 | ca8762b2f6a1043103a45153357a5f9e5dc010af

IO: fix writeByte BufferOverflowException

it is important to setup buffer's positions again after suspension
it is not the case if we don't hold writing state during suspension | 2017-11-07 16:42:15 | bab9f7927ca780b242c794578c02ddf63db40375

IO: fix race in readSuspend

consider state change:
writer: IDLE(empty) -> !do write -> IDLE(buffer) -> !close -> closed = C
reader:  !suspend -> resumed -> closed = C -> [here]

here reader can see that there is closed state however to see published
written state it should read state again rather than simply use already
readen state to get happens-before guarantee | 2017-11-07 16:18:16 | 32c90b169d05bd372317f90ae5ad511bbcb05bc5

IO: rewrite if/else/return code to identical

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 11:23:34 | fde1a646fe5a60c8aa211764d63527ec429672c3

IO: eliminate tail suspend calls in when blocks

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 10:54:47 | 4eccfba8d4cbe55ce49ac7b70c40eea1d0adf7c9

No Job in newSingleThreadContext and newFixedThreadPoolContext anymore

* This resolves the common issue of using `run(ctx)` where ctx comes from
either `newSingleThreadContext` or `newFixedThreadPoolContext`
invocation. They both used to return a combination of dispatcher + job,
and this job was overriding the parent job, thus preventing propagation
of cancellation. Not anymore.
* ThreadPoolDispatcher class is now public and is the result type for
both functions. It has the `close` method to release the thread pool.

Fixes #149
Fixes #151 | 2017-10-20 09:36:56 | d9ae2bcb88403e0854b895ba46c2417b4c0a4752

run uses cancelling state & propagates exceptions when cancelled

* When coroutine that was switched into a different dispatcher using
`run` is cancelled, the run invocation does not complete immediately,
but waits until the body completes.
* If the body completes with exception, then this exception is
propagated.

Fixes #147 | 2017-10-20 08:42:06 | bcdd8e17fed40097f9bb8fdb3e218f95ff8603a9

Exception propagation logic from cancelled coroutines is adjusted

* When cancelled coroutine crashes due to some other exception, this
other exception becomes the cancellation reason of the coroutine, while
the original cancellation reason is suppressed.
* UnexpectedCoroutineException is no longer used to report those cases
as is removed.
* This fixes a race between crash of CPU-consuming coroutine and
cancellation which resulted in an unhandled exception and lead to
crashes on Android.

Fixes #152 | 2017-10-20 06:00:50 | 6aed878a67e6f707e6c3afb0879beb8822a95d6f

Fixed Reactor docs (Scheduler.asCoroutineDispatcher) | 2017-10-07 19:58:40 | 8348b8c31d5b07541bd3d268ca2a186b0fe1ad6f

Failed parent Job cancels all children jobs, then waits them

Also improved debug output a little bit | 2017-10-07 12:44:48 | a36ab94253bb9945c6377eb43db0cb1071019c40

IO: eliminate race in close

I knew that I'll hit this bug anyway. Here we MUST flush twice as
flush at read suspend is not enough. If a writer closes then the first
flush does flush and it closes so all readers will see all pending data.
If a foreign thread does close then the first flush is makes no
difference however the second is required for proper cleanup and
to do tryTerminate | 2017-10-04 18:34:18 | ad68c06c1200f2038c26adeab2abf801a2a2114b

IO: fix verifying pool usage

buffer view doesn't hold original pool reference to make
pool chaining working | 2017-09-29 15:18:00 | ccf8dde980a4701b9cd30e1df23e5cbefdd93b53

IO: fix writing byte packet | 2017-09-28 07:58:15 | 754a19b188dc6d486d73b8e3a2f0c483c3f88f9b

Documentation for DefaultDispatcher in the guide | 2017-09-29 18:39:03 | 66f018c489c6b0ec0831fa9953db34da3edff5f3

DefaultDispatcher is introduced | 2017-09-28 11:27:05 | c0d559b594fce802f1d1be9a6feef49019d17160

IO: fix ByteWritePacket.writePacket size update | 2017-09-17 19:48:26 | 5ca0d12c1e8a9672d40fe83cd31d1b2426f397e7

IO: fix writer scope type | 2017-09-11 10:06:54 | ea3a418f84f3731e92658cedfa11878a8828500c

IO: fix byte channel readX operations return -1 during close+flush

Read operation should try flush before return -1 if closed because
the close operation setting close status first then do flush
so reader could see closed status but not-yet-flushed byte counters | 2017-09-11 07:31:08 | e4d3ce750ed8b864a435fb0926d0d77e9c02b208

IO: add more byte packet tests and fix few bugs | 2017-09-06 18:50:51 | 5feaf6973c23fae3c5a8df64748e2181c50dd0d6

IO: fix delimiter lookahead | 2017-09-06 15:52:04 | 1cc86083e7be17ce53f7c80cfa6ba67e8569e33e

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 99cdb380bf6391db7e7d08e8673c627c554074d8

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 776b370d58883e9bce0c309ebb4919ef4cdac13c

IO: fix byte packet write buffer leak | 2017-08-25 08:39:00 | 974cbb3b21b8d7613c41ee2221ce435e347b068f

IO: fix byte channel close with error buffer leak | 2017-08-25 08:06:59 | 24b040f1345db27b45589a975daab45bf9325494

IO: fix CR-only line endings processing + tests | 2017-08-23 11:39:41 | a9a936d1a325ee0baf36df444414e1e17ac539da

IO: rename writeStringUtf8, fix implementation + tests | 2017-08-23 09:26:18 | fbcba264a37580b5c47f3314395e5146afb38287

IO: fix copyAndClose + tests | 2017-08-23 09:11:55 | fc84a634ff9a1acca04e09fa5a031b904c5c8838

IO: byte packet readLine support + bugfixes | 2017-07-26 09:59:16 | 0b12ffc0178844e813223039adf5d7510703485d

Fixed bug in LockFreeLinkedList (invariant & lock-freedom violation)
Migrated atomic ops to AtomicFU library for ease of code maintenance
Implement lock-freedom testing in LockFreeLinkedListAtomicStressLFTest | 2017-08-10 18:09:26 | 7eb41efbacd498704f25465e2a58f4892c16aa32

Typo fixed | 2017-07-24 13:42:34 | a448903dcac25e450d87c49705e7a6693a300d29

Use CompletableDeferred in the guide section on coroutines;
fix (reknit) broken links to factory functions that are now top-level | 2017-07-21 22:00:30 | 256812a1c09511744575ed3d2c64fec27979f391

More documentation on CompletableDeferred states and style fixes | 2017-07-21 15:04:23 | 8e2ae9964614e35295a8d695114b00c35f5fc755

Better debug strings for continuations | 2017-07-12 12:22:21 | 69d9c852289f1a4a9ffe107dc75cc71871cfe34e

ObservableBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 10:16:30 | ed6985459318209be084ff807676cb722387fb6f

PublisherBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 09:58:44 | 58246ca7e7727632ba50c41d0314df47ba9e3fc0

Fixed IllegalStateException in select that concurrently selects, which
was due a problem with Job concurrent cancel and dispose of handle.
The bug was introduced by addition of Cancelling state for a Job.

Original stack trace in select was:
java.lang.IllegalStateException: Check failed.
	at kotlinx.coroutines.experimental.internal.LockFreeLinkedListNode.remove(LockFreeLinkedList.kt:236)
	at kotlinx.coroutines.experimental.JobSupport.removeNode$kotlinx_coroutines_core(Job.kt:734)
	at kotlinx.coroutines.experimental.JobNode.dispose(Job.kt:995)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.initCancellability(Select.kt:294)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.getResult(Select.kt:273) | 2017-07-11 09:50:00 | e9f64491787433b3d53ad5800456524820058d5f

typo fixed | 2017-07-10 10:46:13 | d28cc872fb7815b51ceb7c84a4e77117fce380c7

typo fixed | 2017-07-10 10:44:07 | 8b0b07ab81f12bc605462a6a1333b61abce547cb

typo fixed | 2017-07-10 10:43:20 | 93f7e8e22019643caaf14ae480c05ab0a349064d

Bug fixed on waitTimeoutOrNull (was flaky testOuterTimeoutTest) | 2017-07-10 10:38:54 | 769d48217f8787c7f64c07da6e53c27b2d703274

Refactor DispatchTask to reuse it for dispatchYield | 2017-07-10 10:16:20 | 2a93646a8054ce7819e9bdbff8d28849a19e874b

Fix SecurityException when trying to read "kotlinx.coroutines.debug" prop | 2017-07-10 07:15:40 | e824eaaab9d053ff0f2cc028c7413bb83adcacc0

A fix & optimization for select impl helping scheme | 2017-07-05 06:53:29 | 907074f1f63871ed29feab3173a2e38b30d8fbb6

Reactive tests fixed for cancellation logic change | 2017-06-26 11:25:56 | 7a7b00938934ef7d0855eb24ec93a06d0b0c97e7

Fix typo: debugging more -> debugging mode | 2017-06-24 21:03:35 | ed5ed49913498b4e880415d2f0fb9004e20e1b5a

Typo fixed | 2017-06-23 10:27:02 | 6c18dfd15f6e1703db57531422bc0df3cb7d08ff

fix typo.

somethine -> something | 2017-06-18 07:37:59 | 81a6f23ca68d7ed37f36dcb966fe74e3bc53de57

Typo fixed | 2017-06-09 17:25:03 | c3c2f3269220f5d7ae20e7592ca1253061b50a95

CoroutineExceptionHandlerTest fixed | 2017-06-09 15:59:25 | 866521b83ed0676d0203dec35de5fb797bc9a59d

SimpleSendReceiveTest is fixed to account for close conflation | 2017-06-06 11:36:38 | 9ff32644381bf1a692d9a935170a9f7b7023f244

Fixed lock-freedom of send/offer on closed channels and related bugs.
Conflated[Broadcast]Channel hang of concurrent offer/close is fixed. | 2017-06-05 14:04:39 | e6e8ce8d46cee273e00ee130334239880734dc2f

Integration readme title fixed | 2017-05-17 11:59:49 | 0c2e25d7c38f50bd3c9866ea1fc2c12d5d74251a

launched jobs and await can be cancelled while waiting in dispatch queue

* suspendAtomicCancellableCoroutine function is introduced for funs like
  send/receive/receiveOrNull that require atomic cancellation
  (they cannot be cancelled after decision was made)
* Coroutines started with default mode (CoroutineStart.ATOMIC) using
  async/launch/actor builders can be cancelled before execution starts.
* CoroutineStart.ATOMIC is introduced as a start mode to specify that
  coroutine cannot be cancelled before its execution start. | 2017-05-11 17:15:18 | a74eb5f8b08e84f904e75aa71da4547c9178da8d

Fix withTimeout/OrNull bug with spurious concurrency on cancellation | 2017-04-20 16:23:18 | ca9d5be31a30c5f6a20875438f9ae40db4183f4c

Refactored ThreadPoolDispatcher to reuse code of ExecutorCoroutineDispatcher | 2017-04-18 12:28:35 | f04f51d5b05a0aec7c97acc202d180096a095fbf

equals/hashCode for wrapper CoroutineDispatcher impls | 2017-04-11 10:50:03 | 30dd5c129c493ca7b1a3b2b80437e8a7ec68f3ec

Starting coroutine in UI event handlers without dispatch in UI guide | 2017-04-07 15:06:22 | f724f6e2fe7c20cb48b69cd7b19b2658313231e4

Nicer toString implementations for CommonPool & Unconfined dispatchers | 2017-04-07 07:35:28 | dc9fd1c2d18da2f23d9907148b4674cda6418e49

Few minor docs & build fixes for reactor support | 2017-04-06 19:15:35 | 523516abd2023f8d968d389b32dee713130a9f83

Merge pull request #53 from mkobit/patch-1

Correct typo in coroutines-guide-reactive.md | 2017-04-05 09:41:56 | 7676e2239947273c6cbb4cb77536042bd9f2ce43

Fix repository urls

need to be reverted once bintray will fix jcenter sync issue | 2017-03-23 14:45:39 | 78fd3cb8932410af9beab4effc04bdeea4343732

Merge pull request #42 from jakiejj/master

fix typos in comments to Nio functions | 2017-03-20 07:16:24 | 9ef792fec6775bb5cdb08c84511488f324db3322

fix typos in comments | 2017-03-17 20:48:39 | 4d927c76488b96abaae7ba003f8064ad84b8334e

Typo fixed | 2017-03-14 17:39:50 | 81a5b7144484dcc8ebc89cd98fd9bd8a2d45afbe

startUndispatchedCoroutine is renamed to startCoroutineUndispatched for consistency with coroutine intrinsics | 2017-03-14 16:39:26 | 4638d79097a3d5b0c1b32c1e468ad723cc4b2bd9

Fixed bug with sometimes missing `onComplete` in `publish`, `rxObservable`, and `rxFlowable` builders | 2017-03-13 09:03:35 | d14a3901f365f622d9a7ba96fc00900011c9c009

Scheduler.asCoroutineDispatcher extension for Rx 2.x | 2017-03-10 12:06:01 | a1fe3da17907024afa50a35cbfcc72639d62bf78

not -> no typo fixed | 2017-03-09 09:57:57 | 228d084bfb87f967e216b84029b58649fcbe7472

Executor.toCoroutineDispatcher is renamed to asCoroutineDispatcher | 2017-03-09 09:03:39 | 38b5ea18e36f1a53d4cde27bf3fd21522727cbbb

Fixed dispatching logic of `withTimeout` (removed extra dispatch) | 2017-03-02 21:15:21 | 43d831f61f33262dcb4621069451d1699898d1cb

More links and typos fixed | 2017-03-01 14:21:48 | cc63363ead9d82f4e246a319ca3e0cb9f15e3a14

top-level readme links fixed to produce & co | 2017-02-22 12:04:28 | 40e89f689f89ae643f68c68efc57aebd8f8284ed

Jon.onJoin select clause is implemented, lazy onAwait/onJoin & dispatch fixed | 2017-02-22 11:56:58 | d84dbc2d75927fe8446098a225a3fbb884683bde

startUndispatchedCoroutine utility functions | 2017-02-22 06:53:49 | ee88fbef2d78e4b25f741efffabf4756bff8e7f3

buildChannel deprecation template fixed | 2017-02-20 12:53:30 | de8b9e9b336491ff0dbf107fe35d9efa030d92d3

Merge pull request #31 from gildor/on-completion-deprecation-fix

Job.onCompletion deprecation template fixed | 2017-02-20 12:49:41 | 85923e2de75ed522903cc3d64aef2ad178c1cbf8

Job.onCompletion deprecation template fixed | 2017-02-19 13:26:29 | c8f9ca308abe963cafa5f676410402fc287cfa5a

Delay implementation in Swing, JavaFx, and scheduled executors is fixed to avoid an extra dispatch
CancellableContinuation.resumeUndispatched is introduced to make this efficient implementation possible
Additional documentation for CoroutineDispatcher implementors | 2017-02-10 10:30:38 | a198bad7365a508baf1041993e9a14007f9d5aa3

Doc fixed | 2017-02-10 10:14:35 | 8c8551e7dbea7c2467060c2d3c6aa1c54c721e68

Merge pull request #29 from cbeust/patch-1

Update coroutines-guide.md | 2017-02-07 17:52:01 | 4d821e3901d038f005850b38d1e4954506306383

Merge pull request #28 from erokhins/patch-1

Update 1.1.0-beta-37 to 1.1.0-beta-38 | 2017-02-02 19:24:36 | 40f69cf704e7b31cec9c8a935317d8c173e79623

Added deprecated (with error level) plus operators on Job and CoroutineDispatcher to catch potential problem with their incorrect use at compile time | 2017-02-01 15:43:32 | 79a2868295127b81056f66d644da72db5a40d772

Merge pull request #27 from tairrzayev/readme-fix

Fixes the typo in the coroutines-guide.md | 2017-02-02 06:15:26 | 9d844fa1733f83e5e1b85c3e762a69729d3c5ef2

Dispatchers default behaviour is changed to schedule new coroutine for execution later.
Job.getInactiveCancellationException is introduced.
yield is cancellable while it is waiting to executed.
core tutorial is expanded. | 2017-01-29 18:58:33 | 7cf452eab59cdca570227f071cba2da374f77110

Finer grained control on debugging facilities | 2017-01-24 07:29:53 | aecb9aa1606b79243c8e93221de9713c164ce015

Added context parameter to CoroutineDispatcher methods, implemented Executor.toCoroutineDispatcher | 2017-01-23 13:47:20 | 67891d867da022d608d4589859002f256d9a313e

Fixed initialization of Job with parent (initParentJob), fixed handling on uncaught exceptions in standalone coroutines | 2017-01-20 09:19:52 | 58a7add417403811e822a4f6f7689ae3fd0e2018

Minor: fix version of maven-deploy-plugin, fix pom warnings | 2016-12-21 17:21:30 | c4ad15fc6246b7496d610da7419441020dfe1c56

Merge pull request #6 from hhariri/patch-1

Fixed packaged names | 2016-07-27 07:04:12 | c6993089412fbc491ddeb0a71b57e67bf31e21d6

Fixed packaged names 

On the repo, the package names don't have the suffix -1. | 2016-07-27 06:03:41 | 1abe89716c093c9e010a45a5235da7f9b50eea17

Leaking handles in awaitAll are fixed | 2018-04-28 16:22:29 | e0b6db04b3bd86e942bc7e40081a82aedd8fd200

Delay bug fixes:
Invoke clearTimeout on cancellation in JSDispatcher
Remove delayed task on cancellation from ThreadSafeHeap on cancellation to avoid memory leak | 2018-04-26 13:03:40 | cd00643b92c9698ca728f92a66f52b30b3811d05

Documentation for debug property values | 2018-04-11 19:21:23 | 590c8889c2bb5341f15ee20e440c5599342fe34b

typo fixed | 2018-04-04 06:59:33 | 905a512625ad96dcd45c789f983babd93dfde011

Add extension to ExecutorService to return closeable CoroutineDispatcher

Fixes #278 | 2018-03-20 19:28:52 | 26f4b9ecd1bdd03299b668541f7c7c9ecaf9ab7c

Debug toString for channels

Fixes #185 | 2018-03-06 10:37:42 | e4b6f09af7c0d0b6963fa8611e867ff3292fad0e

rx-example: Added application plugin & fixed to use runBlocking | 2018-03-05 14:58:59 | 00560e8b0add1628bd0a32202b6f3cc301b35af3

Use NodeDispatcher on ReactNative

Fixes #236 | 2018-03-05 09:01:07 | ecc68f13141d1353aa2bb1d027a077e0fd7be4fb

Check for undefined `window.addEventListener` when choosing default coroutine dispatcher.

Fixes #230 | 2018-02-10 19:35:58 | 54d57e0c1fff22fe1d72c762f2bdbf01995395ca

Update README.md

Minor typo and typography fixes. | 2018-02-04 00:30:58 | 7dd6b66eced47e4ddf0b2c76c974ac19612b827c

IO: fix error propagation in blocking adapter | 2018-02-02 14:18:47 | f0c1d99e2c5c5978da7ace9d58c61a5648ed7687

Update coroutines-guide.md

This tutorial suggests just Async suffix:
https://github.com/Kotlin/kotlin-coroutines/blob/master/kotlin-coroutines-informal.md#asynchronous-programming-styles
Also, there was "of" instead of "or" | 2018-01-29 17:39:02 | 7e94e70734f6e01b0522d11071e6825879a221e7

runBlocking is improved to properly support specified dispatchers,
so that `runBlocking(UI) { ... }` can be used outside of UI thread.

Fixes #209 | 2018-01-29 15:07:21 | cb78787638039096804bc1b97031bcb9801c0547

Workarounds for KT-21968 to fix JS tests | 2018-01-24 20:31:22 | dfeba242b9e328f7528507f9349623671a00333c

IO: fix joining sequence, avoid infinite joinTo suspension | 2018-01-23 20:16:54 | d1842c6301d8debca8509809d473ce7e889b1d7b

IO: make reusable cancellable continuation implement DispatchedTask | 2018-01-12 15:46:22 | 4d01f7ec3b33f7633f3737a5ab3a3fc90703f57f

JS: Introduce Window.asCoroutineDispatcher and use custom queue in
Window.awaitAnimationFrame to align all animations | 2018-01-13 08:20:32 | 1867f6de0fb39077d0cb13fdc0400dd4568f717b

Actually fixed startup/shutdown of DefaultExecutor for tests to prevent
thread leak. Includes test-case. | 2018-01-12 15:28:24 | 9483301695f4c0784d663238ecd0ef04bbfcbea3

MPP: Debug toString should not depend on kotlin-reflect | 2018-01-11 16:04:12 | b79277b4fab5353680445f36dd9b19a740828203

IO: Use TestBase in all tests and fix leaking threads in tests | 2018-01-11 10:48:19 | c45f5fa3b636d66b824351c8d8d9368b8ee4e37f

MPP: Ported DispatchedTask perf improvements to JS and more code is made common | 2018-01-11 09:39:36 | f29203c158a526f90ae8574abfc1ba6dd5249262

Performance: Remove DispatchTask, store value in DispatchedContinuation | 2018-01-10 13:25:25 | f2239e191f55883486d5ce04ffb0c6f75cdc3468

Update coroutines-guide.md

Correct `Dispatcher` spelling | 2018-01-08 13:56:54 | fa13beba79e6ebb68588ba2167b67a77196907d3

Optimize creation of DispatchTask for cancellable continuations (fixed) | 2017-12-28 09:21:14 | bdf23f28c425ea391baa7ddbc3ba012d15e6dfa5

Optimize creation of DispatchTask for cancellable continuations | 2017-12-27 22:09:43 | ac48070de5e20b727b6d9ffd5cc7c259426fb6fb

MPP: DefaultDispatcher internal impl class renamed to JSDispatcher | 2017-12-27 10:14:54 | a919827885289271a6c598ab47fdf4434a8e0da3

fix typos | 2017-12-24 19:55:06 | d2d42ea802b54d2ede23f3edf3c18521ae46a3e9

IO: fix accidentally used tryResumeWithException | 2017-12-06 14:09:01 | 9ef4e0c05168acdb2c955079e2ee857cfec9de06

IO: fix spuriously hanging pipe tests | 2017-12-05 12:41:42 | 4adac45480b33664d79b24f7a779e7d4c1da68b1

IO: fix joining with different write byte orders | 2017-12-05 09:35:56 | 8af8937a34e893661dfe15f9be598eac50b101df

IO: fix infinite writeSuspend loop caused by auto-resuming flush | 2017-12-05 09:27:09 | e6764086ef4a03ec610245740b379f5da617224c

Bug fix: start hangs on lazy coroutine with attached invokeOnCompletion | 2017-11-30 13:41:47 | 5610e1df2eb3f67be8b45633b5d6ffbf73ec6bb8

Add DefaultDispatcher on some reactive operators | 2017-11-29 21:12:35 | e19ee04ca72316f9d67a58d35b8be398b059f1f5

IO: fix too expensive joinTo fast-path | 2017-11-23 09:39:27 | 060f36a06d341f43c0f9e77fd6706bf71f94972c

IO: fix typo in test name | 2017-11-20 08:43:26 | 9a6ca1a006debfa08392027508d03a141ae53841

Introduced ReceiveChannel.cancel method;
all operators on ReceiveChannel fully consume the original channel
using a helper consume extension, which is reflected in docs;
removed `suspend` modifier from intermediate channel operators;
consistently renamed channel type param to <E>;
added two versions for xxxTo fun -- with MutableList & SendChannel;
added tests for all channel operators;
dropped/deprecated ActorJob/ProducerJob, fixes #127 | 2017-08-17 18:01:33 | b555d91193d9e76710062451cf94a94d14820e98

IO: fix race in closeWaitJob of JoiningState | 2017-11-17 16:30:22 | 47d92bafe90d899dfb53cd0f8bf7eae75504047e

IO: fix accidentally missed it | 2017-11-17 16:29:49 | d42bdadc8520ec490d5b37f5f160b54d4541d2f8

IO: fix race in ByteBufferChannel.write(lambda) | 2017-11-17 15:39:03 | 7bf4fa9e3b19a8200450fabe396a0ff854615596

IO: fix joining of already closed but not empty channel | 2017-11-14 11:52:32 | 9e9929d376d2b92cd5fda2f21f7cc1eb51f66ca8

IO: fix lincheck dependency | 2017-11-10 20:22:53 | b94ce42827dc5f9294f19b99da356ad585fb01ea

IO: fixed awaitClose and copyDirect | 2017-11-10 09:22:23 | 373d590e103f3203f61b2fb93b3b82bcce1de13e

IO: fix race in joined flush once again | 2017-11-09 18:18:05 | 8e9138ca4a297189f49bece8e739b6584f69e061

IO: fix joined close/flush | 2017-11-08 13:50:13 | 2fdb5aa4867b60f7c659cf4d950babfd2a43a67a

IO: fixed joined channel flush | 2017-11-08 03:15:39 | 625c1fefa57f95af2b723b7c7e3b1a5319c69faf

IO: fixed joined ByteChannel close | 2017-11-08 03:11:53 | ca8762b2f6a1043103a45153357a5f9e5dc010af

IO: fix writeByte BufferOverflowException

it is important to setup buffer's positions again after suspension
it is not the case if we don't hold writing state during suspension | 2017-11-07 16:42:15 | bab9f7927ca780b242c794578c02ddf63db40375

IO: fix race in readSuspend

consider state change:
writer: IDLE(empty) -> !do write -> IDLE(buffer) -> !close -> closed = C
reader:  !suspend -> resumed -> closed = C -> [here]

here reader can see that there is closed state however to see published
written state it should read state again rather than simply use already
readen state to get happens-before guarantee | 2017-11-07 16:18:16 | 32c90b169d05bd372317f90ae5ad511bbcb05bc5

IO: rewrite if/else/return code to identical

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 11:23:34 | fde1a646fe5a60c8aa211764d63527ec429672c3

IO: eliminate tail suspend calls in when blocks

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 10:54:47 | 4eccfba8d4cbe55ce49ac7b70c40eea1d0adf7c9

No Job in newSingleThreadContext and newFixedThreadPoolContext anymore

* This resolves the common issue of using `run(ctx)` where ctx comes from
either `newSingleThreadContext` or `newFixedThreadPoolContext`
invocation. They both used to return a combination of dispatcher + job,
and this job was overriding the parent job, thus preventing propagation
of cancellation. Not anymore.
* ThreadPoolDispatcher class is now public and is the result type for
both functions. It has the `close` method to release the thread pool.

Fixes #149
Fixes #151 | 2017-10-20 09:36:56 | d9ae2bcb88403e0854b895ba46c2417b4c0a4752

run uses cancelling state & propagates exceptions when cancelled

* When coroutine that was switched into a different dispatcher using
`run` is cancelled, the run invocation does not complete immediately,
but waits until the body completes.
* If the body completes with exception, then this exception is
propagated.

Fixes #147 | 2017-10-20 08:42:06 | bcdd8e17fed40097f9bb8fdb3e218f95ff8603a9

Exception propagation logic from cancelled coroutines is adjusted

* When cancelled coroutine crashes due to some other exception, this
other exception becomes the cancellation reason of the coroutine, while
the original cancellation reason is suppressed.
* UnexpectedCoroutineException is no longer used to report those cases
as is removed.
* This fixes a race between crash of CPU-consuming coroutine and
cancellation which resulted in an unhandled exception and lead to
crashes on Android.

Fixes #152 | 2017-10-20 06:00:50 | 6aed878a67e6f707e6c3afb0879beb8822a95d6f

Fixed Reactor docs (Scheduler.asCoroutineDispatcher) | 2017-10-07 19:58:40 | 8348b8c31d5b07541bd3d268ca2a186b0fe1ad6f

Failed parent Job cancels all children jobs, then waits them

Also improved debug output a little bit | 2017-10-07 12:44:48 | a36ab94253bb9945c6377eb43db0cb1071019c40

IO: eliminate race in close

I knew that I'll hit this bug anyway. Here we MUST flush twice as
flush at read suspend is not enough. If a writer closes then the first
flush does flush and it closes so all readers will see all pending data.
If a foreign thread does close then the first flush is makes no
difference however the second is required for proper cleanup and
to do tryTerminate | 2017-10-04 18:34:18 | ad68c06c1200f2038c26adeab2abf801a2a2114b

IO: fix verifying pool usage

buffer view doesn't hold original pool reference to make
pool chaining working | 2017-09-29 15:18:00 | ccf8dde980a4701b9cd30e1df23e5cbefdd93b53

IO: fix writing byte packet | 2017-09-28 07:58:15 | 754a19b188dc6d486d73b8e3a2f0c483c3f88f9b

Documentation for DefaultDispatcher in the guide | 2017-09-29 18:39:03 | 66f018c489c6b0ec0831fa9953db34da3edff5f3

DefaultDispatcher is introduced | 2017-09-28 11:27:05 | c0d559b594fce802f1d1be9a6feef49019d17160

IO: fix ByteWritePacket.writePacket size update | 2017-09-17 19:48:26 | 5ca0d12c1e8a9672d40fe83cd31d1b2426f397e7

IO: fix writer scope type | 2017-09-11 10:06:54 | ea3a418f84f3731e92658cedfa11878a8828500c

IO: fix byte channel readX operations return -1 during close+flush

Read operation should try flush before return -1 if closed because
the close operation setting close status first then do flush
so reader could see closed status but not-yet-flushed byte counters | 2017-09-11 07:31:08 | e4d3ce750ed8b864a435fb0926d0d77e9c02b208

IO: add more byte packet tests and fix few bugs | 2017-09-06 18:50:51 | 5feaf6973c23fae3c5a8df64748e2181c50dd0d6

IO: fix delimiter lookahead | 2017-09-06 15:52:04 | 1cc86083e7be17ce53f7c80cfa6ba67e8569e33e

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 99cdb380bf6391db7e7d08e8673c627c554074d8

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 776b370d58883e9bce0c309ebb4919ef4cdac13c

IO: fix byte packet write buffer leak | 2017-08-25 08:39:00 | 974cbb3b21b8d7613c41ee2221ce435e347b068f

IO: fix byte channel close with error buffer leak | 2017-08-25 08:06:59 | 24b040f1345db27b45589a975daab45bf9325494

IO: fix CR-only line endings processing + tests | 2017-08-23 11:39:41 | a9a936d1a325ee0baf36df444414e1e17ac539da

IO: rename writeStringUtf8, fix implementation + tests | 2017-08-23 09:26:18 | fbcba264a37580b5c47f3314395e5146afb38287

IO: fix copyAndClose + tests | 2017-08-23 09:11:55 | fc84a634ff9a1acca04e09fa5a031b904c5c8838

IO: byte packet readLine support + bugfixes | 2017-07-26 09:59:16 | 0b12ffc0178844e813223039adf5d7510703485d

Fixed bug in LockFreeLinkedList (invariant & lock-freedom violation)
Migrated atomic ops to AtomicFU library for ease of code maintenance
Implement lock-freedom testing in LockFreeLinkedListAtomicStressLFTest | 2017-08-10 18:09:26 | 7eb41efbacd498704f25465e2a58f4892c16aa32

Typo fixed | 2017-07-24 13:42:34 | a448903dcac25e450d87c49705e7a6693a300d29

Use CompletableDeferred in the guide section on coroutines;
fix (reknit) broken links to factory functions that are now top-level | 2017-07-21 22:00:30 | 256812a1c09511744575ed3d2c64fec27979f391

More documentation on CompletableDeferred states and style fixes | 2017-07-21 15:04:23 | 8e2ae9964614e35295a8d695114b00c35f5fc755

Better debug strings for continuations | 2017-07-12 12:22:21 | 69d9c852289f1a4a9ffe107dc75cc71871cfe34e

ObservableBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 10:16:30 | ed6985459318209be084ff807676cb722387fb6f

PublisherBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 09:58:44 | 58246ca7e7727632ba50c41d0314df47ba9e3fc0

Fixed IllegalStateException in select that concurrently selects, which
was due a problem with Job concurrent cancel and dispose of handle.
The bug was introduced by addition of Cancelling state for a Job.

Original stack trace in select was:
java.lang.IllegalStateException: Check failed.
	at kotlinx.coroutines.experimental.internal.LockFreeLinkedListNode.remove(LockFreeLinkedList.kt:236)
	at kotlinx.coroutines.experimental.JobSupport.removeNode$kotlinx_coroutines_core(Job.kt:734)
	at kotlinx.coroutines.experimental.JobNode.dispose(Job.kt:995)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.initCancellability(Select.kt:294)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.getResult(Select.kt:273) | 2017-07-11 09:50:00 | e9f64491787433b3d53ad5800456524820058d5f

typo fixed | 2017-07-10 10:46:13 | d28cc872fb7815b51ceb7c84a4e77117fce380c7

typo fixed | 2017-07-10 10:44:07 | 8b0b07ab81f12bc605462a6a1333b61abce547cb

typo fixed | 2017-07-10 10:43:20 | 93f7e8e22019643caaf14ae480c05ab0a349064d

Bug fixed on waitTimeoutOrNull (was flaky testOuterTimeoutTest) | 2017-07-10 10:38:54 | 769d48217f8787c7f64c07da6e53c27b2d703274

Refactor DispatchTask to reuse it for dispatchYield | 2017-07-10 10:16:20 | 2a93646a8054ce7819e9bdbff8d28849a19e874b

Fix SecurityException when trying to read "kotlinx.coroutines.debug" prop | 2017-07-10 07:15:40 | e824eaaab9d053ff0f2cc028c7413bb83adcacc0

A fix & optimization for select impl helping scheme | 2017-07-05 06:53:29 | 907074f1f63871ed29feab3173a2e38b30d8fbb6

Reactive tests fixed for cancellation logic change | 2017-06-26 11:25:56 | 7a7b00938934ef7d0855eb24ec93a06d0b0c97e7

Fix typo: debugging more -> debugging mode | 2017-06-24 21:03:35 | ed5ed49913498b4e880415d2f0fb9004e20e1b5a

Typo fixed | 2017-06-23 10:27:02 | 6c18dfd15f6e1703db57531422bc0df3cb7d08ff

fix typo.

somethine -> something | 2017-06-18 07:37:59 | 81a6f23ca68d7ed37f36dcb966fe74e3bc53de57

Typo fixed | 2017-06-09 17:25:03 | c3c2f3269220f5d7ae20e7592ca1253061b50a95

CoroutineExceptionHandlerTest fixed | 2017-06-09 15:59:25 | 866521b83ed0676d0203dec35de5fb797bc9a59d

SimpleSendReceiveTest is fixed to account for close conflation | 2017-06-06 11:36:38 | 9ff32644381bf1a692d9a935170a9f7b7023f244

Fixed lock-freedom of send/offer on closed channels and related bugs.
Conflated[Broadcast]Channel hang of concurrent offer/close is fixed. | 2017-06-05 14:04:39 | e6e8ce8d46cee273e00ee130334239880734dc2f

Integration readme title fixed | 2017-05-17 11:59:49 | 0c2e25d7c38f50bd3c9866ea1fc2c12d5d74251a

launched jobs and await can be cancelled while waiting in dispatch queue

* suspendAtomicCancellableCoroutine function is introduced for funs like
  send/receive/receiveOrNull that require atomic cancellation
  (they cannot be cancelled after decision was made)
* Coroutines started with default mode (CoroutineStart.ATOMIC) using
  async/launch/actor builders can be cancelled before execution starts.
* CoroutineStart.ATOMIC is introduced as a start mode to specify that
  coroutine cannot be cancelled before its execution start. | 2017-05-11 17:15:18 | a74eb5f8b08e84f904e75aa71da4547c9178da8d

Fix withTimeout/OrNull bug with spurious concurrency on cancellation | 2017-04-20 16:23:18 | ca9d5be31a30c5f6a20875438f9ae40db4183f4c

Refactored ThreadPoolDispatcher to reuse code of ExecutorCoroutineDispatcher | 2017-04-18 12:28:35 | f04f51d5b05a0aec7c97acc202d180096a095fbf

equals/hashCode for wrapper CoroutineDispatcher impls | 2017-04-11 10:50:03 | 30dd5c129c493ca7b1a3b2b80437e8a7ec68f3ec

Starting coroutine in UI event handlers without dispatch in UI guide | 2017-04-07 15:06:22 | f724f6e2fe7c20cb48b69cd7b19b2658313231e4

Nicer toString implementations for CommonPool & Unconfined dispatchers | 2017-04-07 07:35:28 | dc9fd1c2d18da2f23d9907148b4674cda6418e49

Few minor docs & build fixes for reactor support | 2017-04-06 19:15:35 | 523516abd2023f8d968d389b32dee713130a9f83

Merge pull request #53 from mkobit/patch-1

Correct typo in coroutines-guide-reactive.md | 2017-04-05 09:41:56 | 7676e2239947273c6cbb4cb77536042bd9f2ce43

Fix repository urls

need to be reverted once bintray will fix jcenter sync issue | 2017-03-23 14:45:39 | 78fd3cb8932410af9beab4effc04bdeea4343732

Merge pull request #42 from jakiejj/master

fix typos in comments to Nio functions | 2017-03-20 07:16:24 | 9ef792fec6775bb5cdb08c84511488f324db3322

fix typos in comments | 2017-03-17 20:48:39 | 4d927c76488b96abaae7ba003f8064ad84b8334e

Typo fixed | 2017-03-14 17:39:50 | 81a5b7144484dcc8ebc89cd98fd9bd8a2d45afbe

startUndispatchedCoroutine is renamed to startCoroutineUndispatched for consistency with coroutine intrinsics | 2017-03-14 16:39:26 | 4638d79097a3d5b0c1b32c1e468ad723cc4b2bd9

Fixed bug with sometimes missing `onComplete` in `publish`, `rxObservable`, and `rxFlowable` builders | 2017-03-13 09:03:35 | d14a3901f365f622d9a7ba96fc00900011c9c009

Scheduler.asCoroutineDispatcher extension for Rx 2.x | 2017-03-10 12:06:01 | a1fe3da17907024afa50a35cbfcc72639d62bf78

not -> no typo fixed | 2017-03-09 09:57:57 | 228d084bfb87f967e216b84029b58649fcbe7472

Executor.toCoroutineDispatcher is renamed to asCoroutineDispatcher | 2017-03-09 09:03:39 | 38b5ea18e36f1a53d4cde27bf3fd21522727cbbb

Fixed dispatching logic of `withTimeout` (removed extra dispatch) | 2017-03-02 21:15:21 | 43d831f61f33262dcb4621069451d1699898d1cb

More links and typos fixed | 2017-03-01 14:21:48 | cc63363ead9d82f4e246a319ca3e0cb9f15e3a14

top-level readme links fixed to produce & co | 2017-02-22 12:04:28 | 40e89f689f89ae643f68c68efc57aebd8f8284ed

Jon.onJoin select clause is implemented, lazy onAwait/onJoin & dispatch fixed | 2017-02-22 11:56:58 | d84dbc2d75927fe8446098a225a3fbb884683bde

startUndispatchedCoroutine utility functions | 2017-02-22 06:53:49 | ee88fbef2d78e4b25f741efffabf4756bff8e7f3

buildChannel deprecation template fixed | 2017-02-20 12:53:30 | de8b9e9b336491ff0dbf107fe35d9efa030d92d3

Merge pull request #31 from gildor/on-completion-deprecation-fix

Job.onCompletion deprecation template fixed | 2017-02-20 12:49:41 | 85923e2de75ed522903cc3d64aef2ad178c1cbf8

Job.onCompletion deprecation template fixed | 2017-02-19 13:26:29 | c8f9ca308abe963cafa5f676410402fc287cfa5a

Delay implementation in Swing, JavaFx, and scheduled executors is fixed to avoid an extra dispatch
CancellableContinuation.resumeUndispatched is introduced to make this efficient implementation possible
Additional documentation for CoroutineDispatcher implementors | 2017-02-10 10:30:38 | a198bad7365a508baf1041993e9a14007f9d5aa3

Doc fixed | 2017-02-10 10:14:35 | 8c8551e7dbea7c2467060c2d3c6aa1c54c721e68

Merge pull request #29 from cbeust/patch-1

Update coroutines-guide.md | 2017-02-07 17:52:01 | 4d821e3901d038f005850b38d1e4954506306383

Merge pull request #28 from erokhins/patch-1

Update 1.1.0-beta-37 to 1.1.0-beta-38 | 2017-02-02 19:24:36 | 40f69cf704e7b31cec9c8a935317d8c173e79623

Added deprecated (with error level) plus operators on Job and CoroutineDispatcher to catch potential problem with their incorrect use at compile time | 2017-02-01 15:43:32 | 79a2868295127b81056f66d644da72db5a40d772

Merge pull request #27 from tairrzayev/readme-fix

Fixes the typo in the coroutines-guide.md | 2017-02-02 06:15:26 | 9d844fa1733f83e5e1b85c3e762a69729d3c5ef2

Dispatchers default behaviour is changed to schedule new coroutine for execution later.
Job.getInactiveCancellationException is introduced.
yield is cancellable while it is waiting to executed.
core tutorial is expanded. | 2017-01-29 18:58:33 | 7cf452eab59cdca570227f071cba2da374f77110

Finer grained control on debugging facilities | 2017-01-24 07:29:53 | aecb9aa1606b79243c8e93221de9713c164ce015

Added context parameter to CoroutineDispatcher methods, implemented Executor.toCoroutineDispatcher | 2017-01-23 13:47:20 | 67891d867da022d608d4589859002f256d9a313e

Fixed initialization of Job with parent (initParentJob), fixed handling on uncaught exceptions in standalone coroutines | 2017-01-20 09:19:52 | 58a7add417403811e822a4f6f7689ae3fd0e2018

Minor: fix version of maven-deploy-plugin, fix pom warnings | 2016-12-21 17:21:30 | c4ad15fc6246b7496d610da7419441020dfe1c56

Merge pull request #6 from hhariri/patch-1

Fixed packaged names | 2016-07-27 07:04:12 | c6993089412fbc491ddeb0a71b57e67bf31e21d6

Fixed packaged names 

On the repo, the package names don't have the suffix -1. | 2016-07-27 06:03:41 | 1abe89716c093c9e010a45a5235da7f9b50eea17

BlockHound integration (#1821)

* BlockHound integration for Dispatchers.Default and Dispatchers.IO
* Use JNA-based self-attach mechanism in order to workaround a problem when tools.jar is loader by multiple classloaders
* publication-validator is renamed to integration-testing;
* Each test is now in a separate source set, which allows for more
  flexibility in their configuration; for example, failing to set
  `dryRun=true` doesn't prevent tests other than NPM to run, and
  it is possible to run the tests (and their dependencies)
  separately.
* Add an integration test for coroutine debugger java agent

Fixes #1060
Fixes #1031

Co-authored-by: Vsevolod Tolstopyatov <qwwdfsad@gmail.com> | 2020-03-16 14:27:06 | ed7c668c33ee6c0ac487ccb6d76e067e571a12ef

ReceiveChannel.broadcast shall start lazy coroutine when closed (#1717)

* ReceiveChannel.broadcast shall start lazy coroutine when closed
* Documentation on broadcast operators is added that explains that the resulting BroadcastChannel shall be cancelled if it is not needed anymore.
* The only functional change is that closing a broadcast channel for lazy coroutine shall start the corresponding coroutine to give it a chance to promptly fail.
*  Also fix the order of events in lazy actor to be consistent with a broadcast channel

Fixes #1713 | 2020-03-16 14:17:18 | e0a6533ecd56b5dc61c91c23cd6fd9e78e29479e

Fill in stacktrace of cancellation exception with an empty array to properly work on Android <= 6.0 that had a bug on a code-path with an empty stacktrace (#1868)

Fixes #1866 | 2020-03-16 11:08:02 | 0bc5d21a2ac6b101562c6d2ac053402ed5d36f9b

Fill in stacktrace of cancellation exception with an empty array to properly work on Android <= 6.0 that had a bug on a code-path with an empty stacktrace

Fixes #1866 | 2020-03-16 09:36:08 | cfb3ff92f175c6ef66e6ed3257cdd52262031966

Implement DebugTestBase in DebugProbesTest | 2020-03-13 12:02:40 | 8aaf2f70b26e5d9095c9e6ea121f6daa5247be5b

Make DebugProbes ready to production (#1862)

* Speed-up installed debug probes by splitting global probes lock to RW-lock, guard all state transitions with read lock and all read operations with write lock to guarantee a consistent snapshot
* Prevent IllegalStateException during 'kill -5' command
* Introduce flag to disable creation stacktrace capturing in DebugProbes
* Support proposed changes in JUnit4 rules

Fixes #1379
Fixes #1372 | 2020-03-13 11:13:09 | 4116fbf1dda610d13095e0e23642a66862f56065

Document the fact that dispatch should eventually invoke the given runnable (#1854) | 2020-03-13 11:10:13 | 10fd73e8a1751819280ab4d7e4ba26b89ff57d9f

Leverage polymorphic keys un CoroutineDispatcher and ExecutorCoroutineDispatcher (#1840) | 2020-03-05 20:02:30 | 214f156c7915185b04489c23ad5468cd5266aabb

Temporary workaround bug in K/N 1.3.70 codegen (KT-37061) | 2020-02-26 14:14:10 | 21bb6fb201b12e26d6763519b46881f89914d6fc

Optimize the size of the coroutines library in Android projects (#1282)

* Includes additional R8 rules to disable debugging & stack-trace recovery in optimized
Android builds. Additional savings with AGP 4.0.0-alpha06 (r8-2.0.4-dev) are ~16kb
in uncompressed DEX size.
* Tests are modified to verify that the classes that are supposed to be removed are
indeed removed.
* Cleaner build logic without error-prone "return" in the middle
* Report the size of optimized Android Dex as teamcity metric | 2020-02-14 12:52:10 | bf9509da7a0eff08e489555254d9662f2cc1894f

Fix a race in some tests for JavaRX integration (#1801)

An extremely rare race could happen in any of the tests in
`LeakedExceptionTest` in the following case:
* `withExceptionHandler` runs the block passed to it;
* In one of the last iterations of `repeat`, `select` in `combine`
  happens on both flows at the same time, that is, the block that
  was passed to `rx[Something]` runs in two threads
  simultaneously;
* One of these two threads (thread A) runs anomalously slow;
* The other thread successfully throws an exception;
* This exception is propagated to `catch`, so `collect` is
  finished;
* `repeat` is exited, the block passed to `withExceptionHandler` is
  done executing;
* `withExceptionHandler` sets back the usual exception handler,
  which fails when an exception in JavaRX happens (see
  https://github.com/ReactiveX/RxJava/wiki/What's-different-in-2.0#error-handling);
* Thread A wakes up and throws an exception. This time, it is
  passed not to `handler`, which is made specifically to deal with
  this, but to the default handler.

As a fix, now a special coroutine context passed to `rx[Something]`
ensures that the spawned executions are run in a thread pool that
blocks until all the tasks are done. | 2020-02-13 13:44:49 | 9f4fd70597567dc4477e5d935d06a380edd09eae

Do not request additional worker from 'yield' calls and during post-e… (#1728)

Do not request additional worker from 'yield' calls and during post-execution phase in LimitingDispatcher

Fixes #1704
Fixes #1706 | 2019-12-25 11:16:39 | c526c3fafa0efdb638e99cb30a10cdcfb8e2bc1c

CoroutineScheduler parking strategy rework

    * WorkQueue.trySteal reports not only whether the steal was successful, but also a waiting time unless task becomes stealable
    * CoroutineScheduler.trySteal attempts to steal from all the workers (starting from the random position) per iteration to have deterministic stealing
    * Parking mechanics rework. After unsuccessful findTask, worker immediately adds itself to parking stack, then rescans all the queues to avoid missing tryUnparks and only then parks itself (parking duration depends on WorkQueue.trySteal result), terminating later
    * Excessive spinning and parking is completely eliminated, significantly (x3) reducing CPU-consumption and making CoroutineScheduler on-par with FJP and FTP on Ktor-like workloads
    * Downside of aggressive parking is a cost of slow-path unpark payed by external submitters that can be shown in degraded DispatchersContextSwitchBenchmark. Follow-up commits will fix that problem
    * Retry on tryStealLastScheduled failures to avoid potential starvation
    * Merge available CPU permits with controlState to simplify reasoning about pool state and make all state transitions atomic
    * Get rid of synthetic accessors | 2019-10-01 17:22:56 | f27d176e7a6add3b92f268c413b0ea4d27de35aa

User Class.forName instead of ServiceLoader to instantiate Dispatchers.Main on Android (#1572)

Fixes #1557
Fixes #878
Fixes #1606 | 2019-12-12 09:10:21 | e60ec8e1fa2a55006f67b0e113b17388595bce97

Introduce DebugProbes.isInstalled method | 2019-12-11 16:04:47 | af9a2010611248a16f6c271274028770d5a4f067

Better diagnostic exception message in MissingMainCoroutineDispatcher | 2019-12-10 14:14:46 | 6cb317b500d176aa0d13b3a2f2ca9ead336f6b0c

ContextScope.toString for better debuggability | 2019-12-05 15:52:43 | c02648baee0f490a150bdb645637e0ee940ef7bf

Promote isDispatchNeeded to stable API | 2019-11-26 11:07:53 | 391042f20bbc12b77b33a550b566265346e2a423

Improve documentation

    * Clarifications of CoroutineExceptionHandler execution
    * Clarifications of MainCoroutineDispatcher.immediate
    * Outdated documentation (pointed out by Google AndoidX team) for isDispatchNeeded is rewritten
    *

Fixes #1650
Fixes #1651
Fixes #1634 | 2019-11-25 15:56:24 | 445e026f95392c19e4eb8be17af9ef454d0647e8

Optimize yield via dispatcher.isDispatchNeeded

Also, as it was before, throw UnsupportedOperationException from the
Dispatcher.Unconfined.dispatch method in case some code wraps
the Unconfined dispatcher but fails to delegate isDispatchNeeded
properly. | 2019-11-26 08:33:08 | 69d1d4160154105a7944feeb67f851d676ee7f94

Avoid potential StackOverflow on wrapped UnconfinedDispatcher+yield

See ImmediateYieldTest.testWrappedUnconfinedDispatcherYieldStackOverflow

This commit changes the way Unconfined dispatcher is detected.
Instead of equality check we try to dispatch to the dispatcher with
a specially updated coroutine context that has YieldContext element
that is processed by the Unconfied dispatcher in a special way. | 2019-11-23 15:21:22 | 8f1f252a31a43534dc6dfac8af465c2bc78cb115

Support yield in immediate dispatchers

So yield now checks for "Unconfined" dispatcher instead of
"isDispatchNeeded" and works properly for immediate dispatchers.

Fixes #1474 | 2019-11-20 08:02:46 | 3ab34d808b5aa2c8673754bd43e4879b9d4af8c9

Clarify documentation around Dispatcher.IO parallelism | 2019-11-02 09:40:23 | 9d1146fdc91177320fb22c455086e14da0be008d

Fix ReactorFlow integration bug exposed by TestBase | 2019-10-29 16:48:49 | 1652bb9602a23a6c6a7c445a88f8da9a24f39ef5

Properly choose timeout exception with a recovered stacktrace to provide better debugging experience

Fixes #1625 | 2019-10-22 16:18:22 | 3affb90f51029781fb3384ff2fda51586441d1d3

Eagerly create cancellation exception during Job.cancel call to make stacktrace even shorter

Also, fix stacktrace recovery in select clause | 2019-10-04 19:35:19 | ae57774c1ea253e0272d92c4c064b2b721847989

Change stacktrace recovery contract

    * Stacktraces are no longer recovered in DispatchedTask.run
    * Callers of uCont.resumeWithException are responsible for recovering the stacktrace
    * CancellableContinuation.resumeWithException recovers stacktrace if necessary
    * Properly recover stacktrace in Channel.receive fast-path
    * Properly recover stactraces on Channel.send fast-path
    * Restructure stacktrace recovery tests | 2019-10-03 13:45:49 | 3b2e4377ac14b9c9c4acfc01d9d50a5c9519e9de

Shorten resume call stack

Calls of afterCompletionInternal are pulled up the call stack. This
is very important, since scoped coroutines do "uCont.resumeWith" from
afterCompletionInternal, which makes all the JVM method visible in the
debugger call frames and in exceptions.

Additionally, this allows for some simplification of the JobSupport
code, as a number of methods do not need "mode" parameter anymore.
Moreover, the kludge of MODE_IGNORE is no longer needed and is
dropped.

Make TimeoutCoroutine extends ScopedCoroutines.

Fixes #1574 | 2019-09-25 21:14:05 | ff9060c5f0054940e9204049ba30fd6797899ca0

Fix race in channel select/cancel

This bug was introduced by PR #1524. It was reproducing when there
is a regular "send" operation on one side of a channel and
"select { onReceive }" on another side of the channel and the
"send" coroutine gets cancelled. The problem is that
SendElement.tryResumeSend implementation was calling finishPrepare
before it has successfully resumed continuation, so if that
continuation was already cancelled, the code in "finishPrepare" had
already stored the wrong affected node which it would later try to
call "completeResume" on.

This patch also adds hexAddress to the debug toString method of
all internal node classes in channel implementation.

Fixes #1588 | 2019-10-02 11:42:30 | d9d35747cfa336108734a47f7aac1aa05410389a

Fix race condition in pair select

This bug was introduced by #1524. The crux of problem is that
TryOffer/PollDesc.onPrepare method is no longer allowed to update
fields in these classes (like "resumeToken" and "pollResult") after call
to tryResumeSend/Receive method, because the latter will complete
the ongoing atomic operation and helper method might find it complete
and try reading "resumeToken" which was not initialized yet.

This change removes "pollResult" field which was not really needed
("result.pollResult" field is used) and removes "resumeToken" by
exploiting the fact that current implementation of
CancellableContinuationImpl does not need a token anymore. However,
CancellableContinuation.tryResume/completeResume ABI is left intact,
because it is used by 3rd party code.

This fix lead to overall simplification of the code. A number of fields
and an auxiliary IdempotentTokenValue class are removed, tokens used to
indicate various results are consolidated, so that resume success
is now consistently indicated by a single RESUME_TOKEN symbol.

Fixes #1561 | 2019-09-22 18:13:12 | 2f8bff1b0972defc473dd8c857600db481f013a3

Introduce reusable cancellable continuations for hot loops with channels (#1534)


  * Average performance improvement is around 25%
  * API is internal and targeted to specific usage
  * DispatchedTask and DispatchedContinuation are extracted to separate files for better readability and maintainability
  * Ensure ConsumeAsFlow does not retain reference to the last element of the flow with test | 2019-09-25 15:02:24 | 946e5789fa982e397d49b788d308afdc5d44ccce

Fix StackOverflowException with select expressions

* onSend/onReceive clauses on the same channel: Instead of
  StackOverflowError we throw IllegalStateException and leave
  the channel in the original state.
* Fix SOE in select with "opposite channels" stress-test. The fix is
  based on the sequential numbering of atomic select operation.
  Deadlock is detected and the operation with the lower sequential
  number is aborted and restarted (with a larger number).

Fixes #504
Fixes #1411 | 2019-08-30 10:01:19 | 3dbe82b44e6af89719c6d331400aed58de9e5521

Install debug probes in CoroutinesTimeout constructor to capture coroutines launched from within a test constructor

Fixes #1542 | 2019-09-17 14:26:45 | fcc004c2a03be7c7389a3a95b7a805058fb936e5

Eagerly create coroutine for lazily-started coroutine builders in order to trigger DebugProbes.probeCoroutineCreated

Fixes #1544 | 2019-09-17 15:32:43 | 858094ee4262ab93a8ec9a1ff24e6df4bc9a8ed4

Do not aggregate all coroutine info into a single string before dumping it to the out in DebugProbes.dumpCoroutines

Previously it was done intentionally to reduce synchronization window of DebugProbesImpl, but still have a consistent view of the world and to avoid interleaving with other usages of out.

Apparently, applications with a significant amount of coroutines (e.g. Ktor) may spend a lot of time or even experience OOM in DebugProbes.dumpCoroutines. To make it usable in such applications, we dump coroutines incrementally without releasing a lock in DebugProbesImpl (thus significantly increasing synchronization window) while holding a lock on out to still have a continuous dump.

Fixes #1535 | 2019-09-16 17:21:33 | 3826ae58bc3651a6d76be256d51b866947581b60

Improve docs / fix grammar | 2019-08-05 13:32:34 | a7afd4657de916978898570d0baf86c0d73906f5

Fixed site publication in build script

:example-frontend-js:bundle task is fixed. | 2019-09-04 15:57:21 | a70022d6e7d9aa5d8fe27a2c46e987a2e8b85c21

Fix of a bug in the semaphore (#1477)

* Add a failing test for a semaphore

This test consistently fails for the current implementation. It
attempts to cause the following state: after `job2` increments
`availablePermits` but before it wakes up the acquirer in the
queue, the acquirer is cancelled. Then, regardless of whether
`RESUMED` or `CANCELLED` was written first, another cell in the
queue is marked to be resumed. However, this is incorrect: on
cancellation, the acquirer incremented the number of available
permits once more, making it `1`; thus, at the same time there
exist two permits for acquiring the mutex. At the next loop
iteration, a new acquirer tries to claim ownership of the mutex and
succeeds because it goes to the thread queue and sees its cell as
`RESUMED`. Thus, two entities own a mutex at the same time.

* Fix a bug in semaphore implementation

The fix works as follows: if `availablePermits` is negative, its
absolute value denotes the logical length of the thread queue.
Increasing its value if it was negative means that this thread
promises to wake exactly one thread, and if its positive, returns
one permit to the semaphore itself.

Before, the error was in that a queue could be of negative length:
if it consisted of only `N` cells, and `N` resume queries arrived,
cancelling any threads would mean that there are more wakers then
there are sleepers, which breaks the invariants of the semaphore.
Thus, if on cancellation the acquirer detects that it leaves the
queue empty in the presence of resumers, it simply transfers the
semaphore acquisition permit to the semaphore itself, because it
knows that it, in a sense, owns it already: there is a thread that
is bound to resume this cell. | 2019-09-03 13:43:23 | 9a62f27d1fe53552b0838156c17adc3b68dcc585

Repaired some of ListenableFuture.kt's cancellation corner cases.

This fixes:
  - Cancellation without an untrapped CancellationException propagating
    through a Callback; isCancelled() is the correct way to check for
    cancellation
  - Bidirectional propagation of cancellation through
    `asListenableFuture()`
  - The cause getting lost in the `asListenableFuture()` future  when
    cancelling its `Deferred` parent with a cause

This also:
  - Extensively documents the package and the contracts created by the
    promise-creating extension methods and `future()`
  - Uses `getUninterruptibly()` for speed
  - Uses `AbstractFuture` to make as certain as possible that
    `Future.cancel()` will return `true` at most once
  - Should clear up rare spooky race conditions around
    cancellation/interruption in hybrid Coroutines/Guava Futures
    codebases

There are probably a few more interesting corner cases hiding in here,
but this should be a good start improving the correctness of `.guava`'s
adapters.

This is a squash commit of kotlin/pr/1347, rebased on develop:

- Incorporated first-round feedback.

- Merged CancellationToCoroutine into ListenableFutureCoroutine to save an
allocation.

- Documented and tested for null completion of asDeferred()'s parent
Future.

- Renamed a cancellation test case for clarity of purpose.

- Split asDeferred() documentation between KDoc/details

- Implemented InternalFutures faster-fast path. Documented. | 2019-07-16 20:19:17 | 57cc36454da6851ecd2a00abe7cfd6ee6e06928f

flow: fix recursion in combineTransform<T1, T2, R>() | 2019-08-23 14:21:37 | 1f5ab53f7c7259fee1d28994b6402f40669f8a52

Introduce CoroutineDispatcher.asExecutor() extension (#1457)


Fixes #1450 | 2019-08-22 12:20:38 | bcf4a8cba083e5650b1c63a05da481f1b61c3e75

Add skip_snapshot_checks flag for snapshot train debuggability | 2019-08-21 14:08:34 | 6ca6ed5af208f72d443f747b7953c073acc4624d

Merge branch 'master' into develop

# Conflicts:
#	docs/coroutine-context-and-dispatchers.md | 2019-08-09 15:03:25 | a6da28e45948a4197fa3e3b80aa29bcee1f042f0

Renaming switchMap to flatMapLatest to better reflect its semantics and to have a consistent and meaningful naming scheme for the rest of the 'latest' operators

    * Make flatMapLatest pure, do not leak cancellation behaviour to downstream
    * Make *latest buffered by default to amortize constant re-dispatch cost
    * Introducing transformLatest
    * Introducing mapLatest

Fixes #1335 | 2019-07-28 18:59:25 | 3a958845a7f091fc9f3218aae20abed17c9e57be

Fully copy CoroutineInfo for DebugProbes.dumpCoroutinesInfo, it is re… (#1368)

* Fully copy CoroutineInfo for DebugProbes.dumpCoroutinesInfo, it is required for IDEA integration (field is left as internal deliberately)
* Make CoroutineInfo non-data class | 2019-08-09 14:36:25 | 0172998c5df4dc219c17f03d03502a42998f535e

Get rid of NonRecoverableThrowable, mention way to opt-out stacktrace… (#1420)

Get rid of NonRecoverableThrowable, mention way to opt-out stacktrace recovery in debugging.md | 2019-08-09 14:32:34 | 897f02e18a8538b53f1eeb6157a1c0cff0b65476

coroutine-context-and-dispatchers.md: Improve article usage, fix typos, reword phrases for better readability | 2019-08-07 15:27:21 | 28241ebd08977fc323d41366ed0c6705f9285095

Use setTimeout-based dispatcher when process is not available on the … (#1409)

* Use setTimeout-based dispatcher when process is not available on the target runtime

Fixes #1404 | 2019-08-05 14:59:11 | 2fc234cb6d24ee3f65a7aa35e4aeea6e506315d2

Update Guava to the latest version 28.0

This fixes vulnerability CVE-2018-10237
See https://ossindex.sonatype.org/vuln/24585a7f-eb6b-4d8d-a2a9-a6f16cc7c1d0 | 2019-08-05 11:58:23 | db95996ceb2758dfc7ccfe9ac805dace2e89128f

Flow.kt: fix typos and rephrase some expressions for better readability (#1408) | 2019-08-05 11:12:26 | 41428a3673f84c40766c9f65421f1649cffb328d

Better docs on coroutines debugging property

* Mention in the guide that `-ea` turns it on.
* Give a link to DEBUG_PROPERTY_NAME instead of newCoroutineContext.
  The later does not have details on its page anymore, since
  the details were only mentioned in JVM version.
* Move description in of debugging facilities to DEBUG_PROPERTY_NAME
  in the code. | 2019-07-23 13:33:07 | d78084b32295c923e2b8312a24729281f19517ca

Properly specify transitive dependencies for kotlinx-coroutines-debug | 2019-07-19 11:16:14 | 2f5036365b035912ce3efd25c307f70479bd9908

Move event loop infrastructure to common code

This makes code of EventLoop (including its task queue impl) shared
between JVM and Native making support and further fixes easier.
It it not actually used in JS and DCE should remove it. | 2019-07-02 12:30:47 | 98a970559601222de378d89920a8f4710d6baa31

Recover stacktraces for no-dispatched continuations, so recovery works in 'suspend fun main' cases to further improve user experience

Fixes #1328 | 2019-07-16 12:36:59 | f22604b01788784fd06b5f01554dc4800e7ff183

Rewrite assertions so that they are checked only in debug mode

* Make sure assertions are absent on native and JS
* Only print full toString for Job in debug mode | 2019-07-02 13:21:22 | 583d39dd4fe1d8f488df3e384901aa19f95166e2

Decouple asFlow from batchSize and move it to buffer instead, promote… (#1279)

* Optimize Publisher.asFlow and fix conflation
* Use channel.receiveOrNull instead of for loop iteration
  (it is more efficient)
* Calling Publisher.asFlow().produceIn(...) uses a single channel
  and is implemented via Publisher.openSubscription() | 2019-06-26 09:09:32 | 502610e7af760a73ea974f9c7cb75ec26a14d167

Unmute debugger test that were broken in 1.3.31, increase debug test timeout (slow CI), make shutdown more graceful by reducing timeout per thread (slow CI + unfortunate timings) | 2019-06-24 17:53:53 | bb97ffbb069774f2ba6ceb8e7dc4c6a2263ef9ff

Update "Shared mutable state and concurrency" guide with best practices

* Properly use structured concurrency in the example code.
* Also remove a special not on <= 2 core CPU, which is no longer needed
because default dispatcher has always at least two CPUs.

Fixed #1241 | 2019-06-01 11:18:42 | d94652feec64040c2c77af630fc4df30032e0efc

Enable R8 optimization of Dispatchers.Main loading

The developer still has to disable the FastServiceLoader manually
if they're using R8.

R8 is then able to optimize away the ServiceLoader and reflection
entirely, resulting in direct class instantiation and no extra I/O
on calling thread.

Fixes #1231 | 2019-05-30 12:17:51 | b9b7d828b18b2462817b6ed0c1a56233a4b6fcf4

Use identity hash code on K/N for debug strings

Fixes #1237 | 2019-05-31 11:39:08 | a3f150e66f7c47e0a0cefed4d9aa03199dff9e7f

Amortize the cost of coroutine dispatch using message queue in all JS dispatchers.
Use Promise.resolve and process.nextTick as dispatch mechanism for cold starts | 2019-03-01 11:25:23 | b7e1499b966175782cf2a5045c5bd3bb95a63b8c

Documentation improvements (#1229)

* Improve MainCoroutineDispatcher.immediate documentation
* Remove obsolete readme and package descriptions
* Clarify possible replacement of onCompletion parameter in produce
* Add paragraph about parent cancellation to async (Mention structured concurrency, but do not explain it there as the term should be easily googlable).

Fixes #1219
Fixes #994 
Fixes #787 | 2019-05-31 10:16:19 | c81dc91159dd1e33060ead8eeccc78df94c4649d

New flow builder: channelFlow (and its alias callbackFlow) and supple… (#1214)

New flow builder: channelFlow (and its alias callbackFlow) and supplementary ProducerScope.await method

Rationale:

    * Can be used in different context without breaking context preservation
    * Can be used to build concurrent operators such as merge
    * Can be used to integrate with callbacks
    * Is less error-prone than flowViaChannel because requires explicit await() call

Partially fixes #1210 | 2019-05-27 21:37:46 | b08d61c6c25d1a030ef37b6788b9ed3922520c85

Improve coroutine exception handling logic

  * Wrap exceptions into CE if parent cancels its child. This is possible because now we can be sure that no one is invoking `cancel(Throwable)`, thus if parent cancels its children, an exception is definitely handled.
  * Now exception is handled only once

First part of fix for #689 | 2019-05-17 08:55:17 | b0f6e05822f225afba43ed6e728669fe320146d8

Fix overflow bug in Flow.drop | 2019-05-20 07:45:03 | e35637a9faabb021d7a5efdc5509910cb499cd7a

Fixed Dispatcher docs

* Fixed typos
* Added reference to kotlinx-coroutines-test for testing `Main` dispatcher | 2019-04-27 19:32:57 | a2499a3ffe7522b8881a41ada45ce1779494be51

Ensure that there are no references to atomicfu in classes

* Updated to 0.12.7 version of atmoicfu with fixes.
* Added test that that is no references to atomicfu in any of the
  resulting class files.

Fixes #1155 | 2019-05-02 23:56:40 | 485eab1611433e49bd1d7c4a302b4825daf0d2e9

Knit: fix handling of backquote when making anchor reference | 2019-05-06 23:46:46 | 80039323d7ef284c3c4b851a6f3a91c46b3d7971

Knit: fix handling of backquote when making anchor reference | 2019-05-06 23:46:46 | b81f5f0ad73bc163a01a2ec88e2cb2e3d61927e1

Fixes kotlin-coroutines-test TestCoroutineDispatcher docs

Fixes #1163 | 2019-04-30 21:27:20 | 9614536ff093c99fc7febd5e31547ede8c8ceb5d

fix: broken anchors | 2019-05-06 07:26:16 | e3030e36945d79d7e54f0decaeef099a1720efcd

kotlinx-coroutines-test cleanup

    * Yield support in test dispatcher
    * Allow partial override of coroutine context
    * Code style fixes | 2019-04-25 21:07:56 | 9e5f9ab46506369f759d72e1195d9d7eb3ef1116

Flow operators: (#1132)

Flow operators:

    * switchMap
    * debounce
    * sample
    * Update RxJava version to 2.2.8

Partially fixes #1107 | 2019-04-24 14:14:03 | fe820bad2dc0743281f6ad130824114507a0a00a

AtomicFu version 0.12.5

This should really fix processing of class files

Fixes #1116
Fixes #1064 | 2019-04-22 18:05:50 | 26a14eef3c6fdf9480719dc1bc25b249b58bcb87

Fix atomicfu post-processing and dependencies

* Update to atomicfu 0.12.4, which fixes plugin operation with
  kotlin-multiplatform
* Remove explicit dependencies (plugins adds them automatically)

Fixes #1116
Fixes #1064 | 2019-04-19 15:51:05 | e1ac2e5c193654469468a04e4cadced3e3040e63

Add a period in the "You can get full code here" blocks and other small fixes | 2019-04-21 07:51:25 | 69c26dfbcefc24c66aadc586f9b5129894516bee

Knitted links and fixed minor style issues in test docs readme | 2019-04-21 08:21:59 | 445e798c3406c182337636026188fefd9f1cc950

Add README.md description of runBlockingTest, TestCoroutineContext, TestCoroutineDispatcher, TestCoroutineExceptionHandler. | 2019-04-21 01:10:09 | c0a8d1c078b6c3de49e3f6a4f77f2c713f47c7ac

TestCoroutineDispatcher code style cleanup and todos

* Kotlin libraries code style: explicit visibility and other style-issues
* DelayController.currentTime() is val
* Using atomicfu in place of AtomicXxx classes
* Added version to ExperimentCoroutineApi annotations
* Some todos are added for future consideration
* Fixed long overflows on delay (clamp) and added test
* License headers added to files
* Tests moved to an appropriate package
* Additional ordering tests using TestBase "expect" infrastructure | 2019-04-20 15:12:08 | d76456f1b6a92868e9f2f01309167003c94c66ca

fix typo: Coroutine"s"Context | 2019-04-17 08:58:42 | 43983505033a67719b0621572b868fc55f492016

Rework purity concept:

   * Purity is a way too polluted word and it is hard to tell what it means in Flow
   * Rename "purity" to "context preservation"
   * Prohibit changing the context, ignore only Job and CoroutineId (for debug mode) in SafeCollector
   * Reword documentation, add more samples
   * Add explanation for deprecated Rx-like methods | 2019-04-09 16:43:11 | d3cc25ff32a80de93ad5eaa912c8b54036c0f978

Unmute test that was failing due to JS BE bug | 2019-03-25 16:21:40 | 0d69e1353d9fcd5867fe74e0912d3f36dc7d8ea8

Merge pull request #1023 from Kotlin/debugger-sm-bypass

Improve stacktrace merge heuristic: skip state machine meaningless fr… | 2019-03-22 15:02:32 | 4ebc1306dd6e0a5929a9044bd65ff92edfeac8e0

Merge branch 'develop' into debugger-sm-bypass

# Conflicts:
#	kotlinx-coroutines-core/common/src/Timeout.kt | 2019-03-22 14:36:33 | 1ea4da4e510f68cb9311b140d2c2e13e8acefe6b

Rename CoroutineState to CoroutineInfo and improve its API

  * Rename jobOrNull to job
  * Replace coroutine with its context
  * Add check-and-act on isInstalled flag into synchronized blocks in order to avoid spurious memory leaks during uninstall
  * Replace WeakHashMap with Set to simplify debug probes | 2019-03-05 15:43:13 | 2496dc256712eb3bb282d3291cedc1497a09cdc8

fix documentation typo | 2019-03-14 13:49:36 | 325b0ad1ee98450e2598e2c0738a398e7b23d959

Add test about threading for immediate dispatch. | 2019-03-14 23:47:26 | a69f73613977bda2c25523cfcae93d6f74bd9cc0

Rename DispatchException to CoroutinesInternalError and make it an Error to better reflect its semantics | 2019-03-07 12:15:40 | 132c1e3f029610208607dcac4d55ed05f62d0642

Get rid of quadratic complexity during stack unrolling in debug agent in 1.3.30 | 2019-03-05 15:26:09 | e35baa43d379e9a7ee3eadc392665dc011268525

Make JobCancellationException copyable in debug mode

This simplifies trouble-shooting of "what caused cancellation", as you
can print out exception and see its recovered stack trace. | 2019-03-04 19:20:25 | d293639980d7a6141394dc8174180f221daa4787

Add operator invoke for CoroutineDispatcher | 2019-02-11 13:21:44 | 57540d452ef82207f14c4235ee690a4323a343fa

Hide cancel(Throwable), introduce cancel(CancellationException)

Job/ReceiveChannel/BroadcastChannel.cancel(Throwable) is now hidden and
cannot be invoked from a newly compiled code. This function had broken
semantics when used with an arbitrary exception. A safe replacement
is available in the form of cancel(CancellationException) where
CancellationException can be used to supply additional information
for debugging purposes.

Fixes #975 | 2019-03-01 09:08:43 | 0aad8f1274c4be7f02ac8f361eb0685d4b438243

Improve CoroutineDispatcher documentation | 2019-02-27 11:19:21 | 08f8214ddbcdbf0becc2b5264caf29080f04576f

Promote Dispatchers.Unconfined to stable API | 2019-02-27 10:16:00 | 9863de1401a90de61307c1ade952ebd7ac65a88a

Promote MainCoroutineDispatcher.immediate to stable API | 2019-02-27 10:02:03 | 4fc4fd555f784775360c464e178d7662291f5fba

Cancellation in consumeEach should dispose Rx Observable

Fixed bugs in MaybeSource/ObservableSource.consumeEach implementation
so that observable is disposed on cancellation.

Also optimized implementation of bridge function to avoid extra dispose
calls if possible (this is permissible by specification, though)

Fixes #1008 | 2019-02-26 16:03:24 | ae8a8743dd37a442c7882a04d1da0de367671ccd

Replace UI with Dispatchers.Main in CoroutineScope documentation

Fixes #803 | 2019-02-27 14:22:29 | b37c296f03ee38cd5cdf5091fa67a010c6a3f6d3

API Cleanup based on review

- removed asyncTest
- added pauseDispatcher(), pausDispatcher(block), and resumeDispatcher() API to delayController
- removed dispatchImmediately (the name was fairly opaque in an actual test case)
- added exception handling to runBlockingTest | 2019-02-12 02:46:06 | 8328a39b39d60fe4e44b6e1e5796d37ab02cbbae

Update coroutine test dispatcher to use structured concurrency. | 2019-02-11 23:40:52 | 9a8842956015a018ee4fa37631052fac82553d36

Make SupervisorCoroutine implement ScopeCoroutine

* Implement ScopeCoroutine in SupervisorCoroutine
* Do not indent scoped coroutines in debug strings

Fixes #915
Fixes #916 | 2019-02-20 15:31:02 | 8d506b3757777664e007b1287ce3c4cb943f4ae5

CoroutinesTimeout debug rule for JUnit 4 (#991)


Fixes #938 | 2019-02-20 14:00:57 | 2bdd4605e797a88019565938cf4a4daca92593a5

Reknit after fixing indentation in code samples | 2019-02-20 10:31:38 | 3785348e32e7180efe86862bc84da14d3631a98d

Update named arguments referenced issue

The issue previously reference was marked as fixed for one of the two problems it was about,
and a new one has been created for the remaining issue that is relevant here. | 2019-02-19 15:17:56 | 919284b159fec82ef2b6f4da9af5f88248e0713a

Obtain real stacktrace of running coroutines in debug agent

  * Capture thread of coroutine when it's transited to running state
  * During dump retrieve the stacktrace of captured thread for running coroutines and merge it with metadata-based stacktrace

Fixes #997 | 2019-02-20 08:43:23 | f18878f632dd28ad8ff847eb4f95e9ed50f373bb

Check that worker thread belongs to the same scheduler in dispatchers.shutdown

Fixes #990 | 2019-02-19 16:01:48 | 703a286e8b55d353b4ebc84320710562d627c96b

Add section about Android in debug agent readme | 2019-02-01 15:13:39 | a68376ceea89bc3599203a4c36e81cd177fc37cd

Additional documentation section about debug mode and stacktrace recovery.

Not included in a guide intentionally | 2019-02-01 11:54:06 | 418ba80a7bb0b8661823fbb325b7edac526ab7db

Call initCause during reflective exception copy in runCatching block to avoid DispatchException when initCause throws

Fixes #933 | 2019-01-15 12:18:43 | 3e4d808200e990e4b5c7e4755b23a5314fdb662a

Move debug example to a proper package | 2019-01-29 09:41:02 | c055f025f4fd3d3dc6a4ceecb798091b31f986e9

Migration to new multiplatorm plugin (#947)

Migration to a new multiplatform plugin
  
  * kotlinx-coroutines-core-[common|js|native] are merged into one core module with multiple source sets
  * Folder structure and readme are restructured
  * Publication process is patched to preserve backward compatibility with artifact names | 2019-01-28 08:34:24 | e50a0fa78aae052e128e8b17666e081e4dfc78be

Update CHM in test to containsKey for KT-18053 fix in 1.3.20 | 2019-01-23 14:49:17 | a672d5f58040f9a14661b157e085c63a7c8b2ff7

Replace old UI dispatcher name with Dispatchers.Main | 2018-12-31 13:52:33 | 8c071247dbe5928ebf5138471c1ac905c5de4018

Update coroutines-guide-ui.md

[Update]
- typo: what you might want to express here is `JavaScript event dispatch thread ` | 2019-01-08 16:01:55 | 66f0123b5fe98f861b46ef1400c8b11bc40c2ace

More idiomatic and readable example for coroutines debug module readme

* Idiomatically use suspend functions
* Idiomatic parallal decomposition with coroutineContext/async
* No GlobalScope
* Use less vertical space & more concise code to aid readability
* Link to full code file (in tests) | 2018-12-22 15:40:39 | b65dc7fe0f75b7dc76e84205c3b57c0aff09c269

Update CHM in test to containsKey for KT-18053 fix in 1.3.20 | 2018-12-22 13:38:36 | 4b60d013508c865dd8430f334e89481d93893ab1

EventLoop integration and reuse for runBlocking and Unconfined dispatchers (#889)

EventLoop integration and reuse for runBlocking and Unconfined dispatchers

* Event loop that is created by runBlocking or by Unconfined dispatcher
  is reused across the same thread to prevent blocking of the loop
* Semantics of runBlocking and Unconfined are fully retained
* DefaultExecutor also registers itself as running event loop and thus
  cannot be blocked by runBlocking
* Consolidates thread-local handling for native
* Also fixes thread-local memory leak on JVM (does not use custom class)
* Restore BlockingEventLoop class name for runBlocking event loop impl
* Internal API for custom waiting loops to be used by kotlinx-io

Fixes #860
Fixes #850 | 2018-12-21 13:41:39 | 51738243c980165ad4fb426105baf6e00d02f87b

Dokka links fixed | 2018-12-18 13:26:58 | 89d43afab3f1090a25697c1e8cebd7faac6612c1

Debug improvements (#900)

Debug improvements

* Rename printHierarchy to printJob and hierarchyToString to jobToString, introduce corresponding methods for scope to simplify scopes debugging
* Remove CoroutineState.job in favor of CoroutineState.jobOrNull
* Use runCatching in Continuation.toDebugString to avoid crashes on some Androids with R8 issue

Addresses #858 | 2018-12-18 09:47:50 | 115a13933adbce880a72c1653b7be94eba566202

Ignore exception on cancel/fail race in CancellableContinuation

There seems to be no other way to satisfactory fix the problem of
a race between cancellation on CancellationContinuation and
concurrent failure of the corresponding background process in a
way the distinguishes "failure from cancellation attempt" from
a "true failure" without placing undue burden on anyone who is
implementing `await()` extension function for various future types.

- Added testTimeoutCancellationFailRace that works as a perfect litmus
  test; being allowed to run for a while it reliably detects various
  problems in alternative approaches.
- Optimized CancellableContinuationImpl; merged its code with
  AbstractContinuation class that is not needed as a separate
  class and removed.
- Deprecated and hidden CancellableContinuation.initCancellability();
  it is now always invoked after the end of the block that was
  passed to suspendCancellableCoroutine.
- Deprecated `holdCancellability` parameter to an internal
  suspendAtomicCancellableCoroutine function.

Fixes #892
Fixes #830 | 2018-12-15 11:12:47 | 876e9bab95d34f311be030a0706497564f96d95a

Introduce test module with testable main dispatcher (#749)

Introduce kotlinx-coroutines-test module with API to set Dispatchers.Main 

  * Dispatchers.setMain and Dispatchers.resetMain extensions
  * Use real factory in HandlerDispatcher instead of using initialized-once statics (prevent ExceptionInInitializerError)
  * Improve MissingCoroutineDispatcher diagnostic
  * Do not cache failed results in test dispatcher to allow reusing it between tests 
  * Deprecate HandlerDispatcher.Main (was accessible only fom Java API)

Fixes #746
Fixed #810 | 2018-12-17 16:49:12 | 4327b2120558c0e232b522b32b3427dc2ad02bf5

fix small typo of async method | 2018-12-16 07:09:02 | 054fcc2b68f9d9933981d65c485af88dba8f89d6

After merge fix: resolve clashes between type alias CoroutineStackFrame and jvm.internal.CoroutineStackFrame | 2018-12-13 09:57:37 | cd162d356e7dbb8a6ed8e02ceae0133af2df95b5

Merge pull request #876 from Kotlin/debug-agent

Coroutines debug agent

Fixes #772 | 2018-12-13 09:39:45 | a5a7cdb86a10d6fcda61c2b9fc55963b86ca8947

Repackage byte-buddy along with debug agent (so it shouldn't be a dependency of target process), use shadow plugin for that to avoid clashes with other byte-buddy versions and publish shadow jar instead of regular one for debug module | 2018-12-13 08:58:29 | 3781a821a11a64670b5a3ffa3c276f1533332ad7

Reknit after docs fix | 2018-12-13 08:58:24 | 75f634c56e3655d475bd93c4d7a5fc7242744d69

Speedup linerizability tests, make conflation part of helpClose (fixes nightly stress failure) | 2018-11-19 16:31:51 | b733f7d0cfd3c8fcca234d7d49f4350dfeb36264

Debug agent cleanup

  * Readme
  * Do not fail on Windows during signal handler installation
  * Do not warn about missing artificial stackframe | 2018-12-12 16:08:32 | 7a6fd89c04b3ee972136c0648700f8500dfb0f23

Rephrase default dispatcher documentation | 2018-12-12 10:36:54 | e06585a482f0f94d2819c24af8ac42582d38af6a

Get rid of top level 'debug' folder | 2018-12-11 16:49:07 | 7520c978464e2f3b1cc075dea36a9f11088e2d85

Unreachable code fix | 2018-12-11 16:44:49 | f64bcde03b4c5e46d63f19d5dcb3b1738c59eefa

Debug agent code style | 2018-12-11 16:20:39 | 12695b763715338149e0bcaa3633a6e0296fc361

Code style in test code fixed | 2018-12-10 13:11:06 | 8e9e4d1706083dd5fb6fcc4c89d2a65caa33914c

Debug agent optimizations

  * Do not store creation stacktrace of the coroutine, recover it from ArtificialStackFrame
  * Reduce lock window where possible to avoid contention
  * Avoid stacktrace copying where possible | 2018-12-10 17:19:35 | 5a80d2a0b0c52121a0788acc036030812fea9f59

Debug agent to track alive coroutines

  * Can be installed dynamically or from command line
  * Captures coroutine creation stacktrace and stores it in completion, automatically enhancing stacktrace recovery mechanism
  * Allows to dump and introspect all active coroutines
  * Allows to dump Job hierarchy
  * When installed from command line, dumps all coroutines on kill -5
  * Probe support in undispatched coroutines | 2018-12-10 08:41:00 | c7239ac4915df344add7386c8aa19038499f5e4b

Scoped builders and exception stacktraces synergy

  * Recover stacktraces via both fast and slow paths in scoped builders
  * Merge stracktraces of nested scoped builders, eliminate common prefix so it looks like a flat profile
  * Optimize stacktrace-related machinery
  * Copy meaningful part of original exception into recovered one, rename "Current coroutine stacktrace" to "Coroutien boundary"
  * Rename Exception.kt to StackTraceRecovery.kt to avoid name clash with another Exception.kt | 2018-11-27 15:13:47 | 1032f5801a9719fbe67325daec944104eff793a9

Initialize JavaFx more accurately, do not leave dispatcher in uninitialized state in case of unexpected failure

Fixes #816 | 2018-11-27 12:57:16 | 69a2d9273288dec1e29a81f2c314ccf23ae99093

Fix: default dispatcher doesn't work with jsdom | 2018-11-06 16:46:00 | bb0ad4ae2772c9c4af0e3b44b129423cf5ae0c58

Sanitize class names received from Kotlin debug metadata | 2018-11-12 17:04:35 | 25a886e9ee0047f755e8d32f496ced3760e7ec64

Debug optimizations:

  * Extract call to suspendCoroutineUninterceptedOrReturn behind recoverability check
  * Cache exceptions constructors into WeakHashMap in order to avoid expensive ctor lookup | 2018-11-02 17:06:14 | e3b80d9c7198728a5566cb2c74da61ee115e61d6

Basic exception stacktrace recovery mechanism

  * Implement CoroutineStackFrame in CancellableContinuationImpl, DispatchedContinuation and ScopeCoroutine
  * On coroutine resumption try to reflectively instantiate exception instance of the same type, but with augmented stacktrace
  * Recover stacktrace by walking over CoroutineStackFrame
  * Recover stacktrace on fast-path exceptions without CoroutineStackFrame walking to provide more context to an exception
  * Unwrap exceptions when doing aggregation in JobSupport
  * Add kill-switch to disable stacktrace recovery, introduce method to recover stacktrace on the exceptional fast-path
  * Add `suspendCoroutineOrReturn` on exceptional fast-path in await in order to provide "real" stacktrace

Design rationale:
All recovery of *suspended* continuations takes place in Dispatched.kt file, the only place where all calls to "resume*" ends up, so we don't have to remember about stacktrace recovery in every primitive we are implementing. But to provide more accurate stacktraces we *have to* recover it on every fast-path for better debuggability.

Fixes #493 | 2018-11-02 12:55:20 | 675c30c4b96533a374ae36b144dbe6b26634b97b

Merge pull request #791 from Kotlin/undispatched-cancellation

Use final Job state in undispatched coroutine completion | 2018-11-06 12:55:53 | 666ea6e554fa52ea03504ab618543ca26e20ce3b

Add ExperimentalCoroutineDispatcher to binary compatibility check, restore binary compatibility in Ktor | 2018-11-06 11:03:39 | e3ab2a692a6da18ee9213a124a4c111235046c75

Add scheduler name to ExperimentalCoroutineDispatcher

Fixes #661 | 2018-10-31 13:15:35 | 92327322442d4c8be225067ff6e16c6827f8b38e

fix link | 2018-11-05 16:56:31 | 64f2b2006b5a7cf2a760ec976dd28e988ce122d0

fixed typo | 2018-11-05 14:28:47 | ace91872cc56113fa10e844069f46eb3bbec9c95

Use final Job state in undispatched coroutine completion

  * When using in-place coroutine builders, startUndispatchedOrReturn will return block's final value on fast-path. This is not correct because if any of the children had failed, whether or not exception is thrown depend only on child timings. Moreover, in the face of such race exception may be ignored if scope owner wasn't cancelled or is missing.
  * Introduce special hack for withTimeout and withTimeoutOrNull to ignore TimeoutCancellationException on the fast path
  * withContext, coroutineScope, supervisorScope, withTimeout and withTimeoutOrNull are affected and now check cancellation on fast-path | 2018-11-04 12:32:34 | 78832e3bb38560f4c4d55cdba436bf7bc9b761ca

SchedulerTask is now an abstract class with optimizations for jvm

* It removes the need for a separate SchedulerTaskBase
* submissionTime and taskContext are marked as @JvmField
* DispatchedTask is also an abstract class
* resumeMode is marked as @JvmField | 2018-11-01 21:10:39 | aa374a95dc7e6df4fd6458fe6d8abe95e2953fce

Scheduler: capture TaskContext for afterTask before running it

This is not strictly needed, since the reusable Task instances
(DispatchedTask) should be always reused in the same context, but
this makes the code more resilient to future changes. | 2018-10-22 02:31:23 | e64d9b706cb5180260e4d95fa3a990449163da51

Avoid allocation of CoroutineScheduler task object

* DispatchedContinuation and CancellableContinuationImpl have all
  the necessarily field to be scheduled | 2018-10-21 17:08:49 | 16e20347dc5557063742ea8a06dbe5162a211c25

Publish: Comments style fixed | 2018-10-26 20:02:08 | f18b9f580faff47af054cb6c0942cd15ccc7675d

Fixed exception handling for publish builder

* Test that ensures proper parent cancellation
* Stress test to ensure that exception in publisher always handled
  by parent
* Also fixed race between request & signal completion that did not
  reproduce before | 2018-10-23 05:28:12 | ac848e872da94e01ed60a6bfecbfe3926229f44f

Reactive streams integration conformance to TCK verified & fixed

* Throw NPE on null subscriber
* Throw IAE when requested n <= 0 elements
* Do not sent any notification after cancel() | 2018-10-20 16:50:05 | 8cced247b1d83f7885f21be8c9b0354dab0fd1f3

fix minor typo | 2018-10-30 19:14:20 | a223f351c1dac80443b02ab905d46acbf4a66720

Implement yield for unconfined dispatchers, documentation improvements

Fixes #737 | 2018-10-23 09:29:56 | c33ef61d4502b71e0cdc354337f261917102d1c6

fix: make snippet as non-runnable | 2018-10-23 12:33:12 | 0661d477332205c23defe65d51e4063cd009e023

Prevent temporary leaks in HandlerDispatcher by properly handling
cancellations in scheduleResumeAfterDelay() implementation | 2018-10-16 22:30:40 | e321394c359758659a07ad1c98429ec2acd8ea59

fixed typo | 2018-10-19 21:16:57 | d981966acf780078119493c1f64e30dc9fa6e02e

Merge branch 'release-candidate' into develop

# Conflicts:
#	core/kotlinx-coroutines-core/test/RunBlockingTest.kt
#	docs/coroutine-context-and-dispatchers.md | 2018-10-18 14:40:10 | a7e10146781744f6df3865a1a33fa4e7cbc2c0b6

Merge branch 'context-elements-opto' into release-candidate

# Conflicts:
#	common/kotlinx-coroutines-core-common/src/Dispatched.kt | 2018-10-18 13:59:46 | cd37d8e8b30656a92a883b646fe050ff479bafdd

Minor optimizations of UndispatchedEventLoop | 2018-10-18 12:17:25 | 23d435b17a1aaaba86cc71656a4080547c4c727e

Do not step into thread-local event-loop on CancellableContinuation#dispatch fast-path | 2018-10-18 08:54:56 | faa477496bc2c05dad4034847a3f7d3f6aae3818

Use FIFO queue in undispatched event loop | 2018-10-17 16:51:50 | 09b9d6c157c9d7c6ec84052c16e64d3eebd0bc8e

Move undispatched thread-local event loop to dispatched continuation, execute all undispatched tasks in that loop to avoid SOE in user-supplied unconfined dispatchers and 'immediate' main dispatchers. | 2018-10-17 15:37:36 | fd54bc4882357771d0bec29abbd6e99dfccab725

Rework Dispatchers.Unconfined to use thread-local event loop

Fixes #704 | 2018-10-17 07:57:30 | 7ee722a595b416023c69d987fb7e4682ac0ffe91

Cache result of ThreadContext#foldAll in the field of DispatchedCoroutine to avoid context fold in tight loops

Fixes #537 | 2018-10-16 12:47:26 | ae85797805f93f98bfad64f5f91ba97e4f2c1fbc

Dokka fixes

  * Provide module with Kotlin 1.3 API because Kotlin 1.2 from Dokka can't read classes marked as "from the future"
  * Add runConfiguration dokkaStubs which is included only during dokka task with some classpath magic for Kotlin 1.3
  * Add package.list for slf4j
  * Fix unresolved types/links in documentation
  * Suppress all internal/inherited API | 2018-10-13 12:40:32 | 706e39363b586127b29e28fd97d476129c22fe93

Make EventLoop internal, @JvmName("from") for ExecutorService.asCoroutineDispatcher | 2018-10-11 16:09:44 | b6eca2a62158b2dc8d9b41d86040924095dca662

Use toString implementation for continuations to leverage debug metadata

Fixes #679 | 2018-10-10 11:46:53 | 4220ca2106bea653f2831f19c2c93752ea0e468a

Cleanup: get rid of workarounds, cleanup guide, suppress/fix compilation warnings | 2018-10-10 08:56:41 | 1bdbb3ef364006515157b5884dc663d9c3172c6c

Experimental annotation revisit:

  * Mark our API annotation as experimental with corresponding warning or error
  * Get rid of workaround for new inference bug
  * Migrate to compiler arguments instead of annotations | 2018-10-09 16:06:29 | e6e82391c33716033996ef6718756feab641816c

Restore TOC in the root coroutines-guide.md file with links to individual files

* Knit supports new TOC_REF directive for that.
* Reknit docs (also fixed out-of-date sample file). | 2018-10-08 17:20:12 | 715acd33e564dbff128a12b10ec2c6e24240d330

Migrate to Kotlin 1.3 coroutines, drop experimental from package

* Features based on version 0.30.0
* Uses Kotlin version 1.3.0-rc-57
* Uses Kotlin/Native version 0.9.2
* Uses AtomicFu 0.11.9-eap13
* Replace SuccessOrFailure with Result
* Replace buildSequence and buildIterator with sequence and iterator
* Apply @BuilderInference on all builders (including extension methods to workaround inference bug) | 2018-07-13 07:33:25 | 0950dfa1fe114e3682a546e3e53ef34dec9dfd4a

Fix lost exception from dispatched withContext on cancelled job

Fixes #675 | 2018-10-08 13:13:01 | 0f94304c6ae46c8f0cec24dde29d2e7af9ae7e97

Mark newSingle/FixedThreadPoolContext as obsolete, document the reason

* The will be replaced by another mechanism in the future.
  See #261 for details.
* The proposed replacement is to use the standard java API:
  Executors.newSingleThreadExecutor/newFixedThreadPool
  and convert to dispatcher via asCoroutineDispatcher() extension. | 2018-10-06 13:36:13 | f5126d0a9263f0b73a57d17031c340f78e3a25bd

Lazily load Dispatchers.Main and provide a stub impl on failure

Also specified explicit public visibility for Dispatchers object.

Fixes #658
Fixes #665 | 2018-10-06 14:09:05 | 0ece3885d445b60d254dc0fb21c7c05c7ebfb1bf

fix grammar typo

removed repeated 'for' | 2018-10-05 13:16:33 | e7a0723e930d52c4cb4665c5a3918f883287c039

Short Dispatchers.Default.toString value ("DefaultDispatcher") | 2018-10-02 09:59:11 | ec8cbd252d20adcdc91149ae9129149b252d945c

Move UI dispatcher to common Dispatchers.Main (#641)

* Main thread dispatchers are grouped under Dispatchers object and are discoverable via ServiceLoader

  * Dispatchers.Main can be consistently used and easily discovered, its implementation is discovered with ServiceLoader
  * It allows us to add iOS Dispatchers.Main implementation in the future thus opening the door for multiplatform UI-dispatched code
  * Workaround for #626, now Android users can start migration to RC coroutines

Fixed #626 | 2018-10-01 16:01:16 | cfe699fb59d799ab22da23aae983cc34b1164f29

Never loose coroutines when CoroutineScheduler is closed

* CoroutineScheduler close/shutdown sequence now guaranteed that a
  submitted task is either executed by the scheduler that is being
  concurrently shutdown or RejectedExecutionException is thrown.
* RejectedExecutionException is caught by the coroutine dispatcher
  implementation and coroutines are rescheduled into DefaultExecutor
  if a (custom) instance  of CoroutineScheduler is being shutdown.
* Added stress test for coroutine scheduler closing. | 2018-10-01 07:52:56 | 4b0f4dec24b93db4e0e0abbfe59b115e886a30c1

Coroutine scheduler is used by default instead of deprecated CommonPool

* Documentation and guide are updated correspondingly
* "DefaultDispatcher" is used as a public name of the default impl
* Implementation is integrated with virtual time-source
* Shutdown sequence is reimplemented in a safe way for tests,
  makes "close" safe to use on custom instances.
* "close" on DefaultDispatcher throws exception just in case
* -Dkotlinx.coroutines.scheduler=off can be used to switch back to
  CommonPool

Fixes #198 | 2018-09-28 09:20:49 | 303708b27f8d997ae482e3106679a7d170bc16d7

Exception unwrapping logic rework, do not unwrap cancellation exception if parent can handle exceptions

It allows to properly handle only relevant exceptions by child without reporting the same exception multiple times, fixes suppressions hierarchy and allows to implement supervisorScope properly | 2018-09-28 09:29:21 | 88e72f9973810119f105f78768b59e19f6a49c26

Introduce SupervisorJob & supervisorScope

This change also fixes propagation of cancellation for Job() constructor.
When both Job() and SupervisorJob() are cancelled with exception (fail),
they cancel their parent, too. So we have similar behavior between:
* Job() and coroutineScope { ... }
* SupervisorJob() and supervisorScope { ... }

Fixes #576 | 2018-09-23 16:16:04 | 21f171c8cb09831e25acdeab5c667cf3c15a9692

Avoid OOM in thread-pool dispatchers, try to reflectively invoke setRemoveFutureOnCancel on executor instance and use default dispatcher if attempt failed

Fixes #571 | 2018-09-25 12:45:53 | e29f49799d118b5c3feb38886af3030d027e7b60

async and async-like builders cancel parent on failure

* Affects async, CompletableDeferred, and all Rx integration builders.
* This makes all coroutine builders totally consistent. They all
  cancel parent on failure, but they all consider "CancellationException"
  to be the case of "normal cancellation" that does not propagate to
  parent. The only missing case is Job() that should be fixed together
  with introduction of SupervisorJob().
* Note that "scoping" builders don't "cancel the parent", but rethrow
  the corresponding exception instead, so it that is how it gets
  propagated up the stack.
* This makes parallel decomposition exception-safe. You
  cannot loose an exception as along as default (child async)
  behavior is not overridden.

Fixes #552 | 2018-09-27 16:17:16 | 52bfdabfa1476f55c1b3880d43f49977fc8df943

Copy deprecated annotations on Job member to inheritors

* Makes them easier to find for cleanup
* Avoids bug with light classes | 2018-09-28 09:41:58 | ffda1da6aec27b51f0bc8640f0e48c8fcd1e8f59

Restore binary compatibility of Executor.asCoroutineDispatcher

Fixes #629 | 2018-09-27 18:19:38 | 18cc588106ff7f4c680831809e5af8d75063c689

fix broken links for kotlin web site (#628)

* fix broken links for Kotlin web site | 2018-09-27 15:42:04 | cbeef1039d7402939bac8ec4674e1a7b1adf993a

Merge pull request #588 from Kotlin/handle-exception-fix

Handle exceptions fix | 2018-09-25 21:00:29 | 25b4388ef2f94909acac51cf1e0206975cc4b84a

Add name parameter to Handler.asCoroutineDispatcher

Fixes #580 | 2018-09-25 13:40:30 | a180ff75e9f7c97189a2651e96f4212bff0b105e

Fix lost exception during cancellation in produce, fix integration with play services after rebase | 2018-09-25 16:16:02 | 1b22af7e462272cbc33fd019975ee3ec5dbf1b78

Merge branch 'develop' into handle-exception-fix | 2018-09-25 13:10:26 | 1e0a2f0ad358c49d97602ee01ecf76602721fa4f

fix compilation | 2018-09-24 17:29:00 | f30715955637d2006e17fda7f99d002877fedc1c

Docs for context/coroutineContext in AbstractCoroutine are fixed | 2018-09-24 17:29:42 | 2d8cad05755d47af7987f39385527d3bddb15377

Fix exception aggregation to ensure atomic handling of exceptions

* Removed legacy onFinishing handler support from JobSupport.
  - It is no longer needed, because handleJobException covers #208
* Fixed bugs that were masked by cancelling parent from onFinishing.
* Consistent "Finishing" state was introduced in internal machinery:
  - Job enters finishing state when it is failing or it is completing
    and has children
  - Finishing state cleanly aggregates all failures, tracks cancellation
    and completion status
* Job.isFailed is introduced as a consistent way to query the "failing"
  state of the job that was previously only implicitly available via
  invokeOnCompletion handler (cause != null means a failed job) and
  the documentation for both Job & Deferred is updated to reflect that.
* Source-incompatible change: Job.invokeOnCompletion boolean parameter is
  change to onFailing. Such handlers are now invoked as soon as the job
  starts failing and the root cause exception of the failure is consistently
  passed to all the handlers.
* The following internal methods were introduced to facilitate this:
  - Job.failParent(exception) is used by child to signal failure to parent
  - Job.cancelChild(parentJob) is used by parent to cancel child.
* Child never aggregates exception received from it parent, but uses
  it as it root cause if there is no other exception.
* JobSupport.handleJobException() logic for launch/actor is split into:
  - failParent - can be invoked multiple times on race;
  - handleJobException which is invoked exactly once.
* Exception materiazization is much lazier now, which should
  significantly improve performance when cancelling large hierarchies.
* Other minor perf improvements in JobSupport code.

Fixes #585 | 2018-09-14 09:52:50 | ecbc85cbdad134d868698e22c0fdd7220eaced0f

Typo fixed | 2018-09-22 13:28:37 | 63e3896d85f827f2e403ffd25593ac5d9af54715

Fix typo in deprecation message of JavaFx dispatcher | 2018-09-20 17:10:30 | 39a2c559b538b8681c0724d5ec3ee6058af4e1c3

Cosmetic fixes | 2018-09-20 08:25:56 | 2dd53204e7047e970f145281c11a9c834021b3a9

Improve HandlerDispatcherTest, check that jobs are actually executed | 2018-09-19 11:30:51 | 847eba7c935ed784e918d976c9c43464179a2df9

Reknit guide, fixed TOC in Knit with comma & verify mode in example-context-09 | 2018-09-19 11:49:42 | bca98f4e9ea3c485c8691209be32fee487f812fe

CoroutineScheduler: fixed race between createNewWorker & shutdown for tests | 2018-09-14 12:17:12 | 241e74e6a2cdadaa2753f40a326c732e95fac2d0

Fixed sporadic test crashes related to withTimeout and children

- The bug only manifested when withTimeout coroutine had children working
  in a different dispatcher
- A separate stress-test that reproduces this problem with much higher
  probability | 2018-09-16 12:31:13 | fa9586bc283d60427ad3e9162de7962da4b0ec1d

Updated dispatchers references in readmes and docs | 2018-09-11 16:16:49 | f189cec57d7d0751464a5939f1bbcbd32e15d7c0

Dispatchers are renamed and grouped in the Dispatchers object

* Dispatchers.Default — a default dispatcher for background asynchronous tasks
  (currently backed by FJP commonPool, a new dispatcher in the future).
* Dispatchers.IO — a dispatcher for blocking background operations (#79).
* Dispatchers.Main — a dispatcher for Android Main Thread (#533).
* Dispatchers.Swing — a dispatcher for Swing Event Dispatch Thread.
* Dispatchers.JavaFx — a dispatcher for JavaFx Application Thread.
* Old dispatchers are deprecated, CommonPool is deprecated, too.
* awaitPulse() in JavaFx and awaitFrame() in Android are top-level funs.
* Introduced HandlerDispatcher, SwingDispatcher, and JavaFxDispatcher types
  in the corresponding UI modules for type-safety and future extensions

Fixes #41
Fixes #533 | 2018-09-11 15:42:03 | dc29b071d4784e3739f89223ced2333ecd5408ad

Fixed hangs during thread termination in IO dispatcher

Fixes #524
Fixes #525 | 2018-09-11 12:38:14 | 750d468b3281570910d0cd4000d4e29702b25020

Invoke handler using invokeIt to avoid JS bugs | 2018-09-07 11:36:05 | c430e0797e87af77f812bbcfb8751e4a0e31ffc6

AtomicFU 0.11.5 to fix Windows compilation | 2018-09-04 14:58:45 | 61abcd224a13f674bffae096afa7250de262df87

typo fixed | 2018-08-24 12:24:02 | 1a1237083b14d5de8f13f66b7a4ba6d9e26183d7

Introduce IO dispatcher to offload blocking I/O-intensive tasks

Fixes #79 | 2018-08-23 14:27:19 | f5e67ba597acdfb90ef84d29e4d6028f3f17a6ba

Introduce ThreadContextElement API to integrate with thread-local sensitive code

* Debug thread name is redesigned using ThreadContextElement API
  where the name of thread reflects the name of currently coroutine.
* Intrinsics for startCoroutineUndispatched that correspond to
  CoroutineStart.UNDISPATCHED properly update coroutine context.
* New intrinsics named startCoroutineUnintercepted are introduced.
  They do not update thread context.
* withContext logic is fixed properly update context is various situations.
* DebugThreadNameTest is introduced.
* Reporting of unhandled errors in TestBase is improved.
  Its CoroutineExceptionHandler records but does not rethrow exception.
  This makes sure that failed tests actually fail and do not hang in
  recursive attempt to handle unhandled coroutine exception.

Fixes #119 | 2018-07-25 09:22:46 | 7587eba96a230f3f0ab0c04f52723e926f7a845d

AtomicFu version 0.11.3 (bug fix) | 2018-08-23 11:05:46 | be065fd2c566acf4f600de23d45d70cf9f2144bc

Introduce ExecutorCoroutineDispatcher instead of CloseableCoroutineDispatcher

Fixes #385 | 2018-08-15 10:03:23 | b517f0529fe4a2066ca8ac985c08206cd4587758

Add workaround for K/N bug | 2018-08-22 09:37:41 | bbe6d8a915b2be9c0a7ff9d92677c878718fa219

Implement withTimeoutOrNull via withTimeout to avoid timing bugs and races.
Remove deprecated API

Fixes #498 | 2018-08-21 16:45:29 | 988eb26469819f7cc8cb1ba26c3a76a6805e8387

Provide API to create limited view of experimental dispatcher

Fixes #475 | 2018-08-15 09:06:06 | cac1a0f13c5b81cdfa3c2d1020e8d86ac8cd0029

Additional debug output for CoroutineSchedulerStressTest | 2018-08-10 17:38:41 | 21ce9c066c752adf4db1e8388a9d38a390b5f08b

Execute EventLoop#invokeOnTimeout in DefaultDispatcher to allow busy-wait loops

Fixes #479 | 2018-08-08 15:04:59 | e90cdb031ffab87d9f7671cc9e856b2a9534d59e

Scheduler tests fixed:

[temporary] Ignore flaky tests
Fix benchmark compilation
Fix WorkQueueStressTest | 2018-07-26 17:02:03 | 9542f1ce4f84d08ef2b33d14ce3ae79a8a93fa86

Scheduler improvements:

Fix (one more) ABA problem in tryUnpark
Global TaskContext to speedup CPU tasks
Documentation improvements
Stress tests constants tuned to be more robust and faster on local machine (and when ran from IDEA)
Style fixes | 2018-07-26 10:57:04 | e50fb89c4e80d7accb9bdfff3ce54c59d2857c26

Scheduler tests infrastructure

Support "kotlinx.coroutines.scheduler" property to change DefaultDispatcher
Updated scheduler shrink test with custom idleWorkerKeepAliveNs config,
so that they execute faster
Fix submissions from another instance of CoroutineScheduler
Run JDK16 tests and tests under new scheduler tests only during nightly stress test | 2018-07-20 20:57:57 | 5c7454b8a872d925f206f418c16d9880bf23e25f

Removed wrapper from LimitingBlockingDispatcher by introducing TaskContext | 2018-07-23 09:38:06 | 216e4d30a2b225361a4f3e59465c079a0f116379

Fixed ABA problem in parkedWorkersStack and other stress improvements

* Workers are now numbered starting from 1, zero is used as sentinel
* Workers are lazily created (no threads initially)
* Close/shutdown of the scheduler also clears state so that subsequent
  rogue attempt to dispatch anything fails.
* Work stealing is more predictable. It starts at random index but
  then goes linearly via workers array. | 2018-07-20 20:25:58 | db22e4023442341d39d0c3797de73e74efb25882

Scheduler cosmetics

Stealing logic cleaned up a bit (mostly style)
Update worker thread names when worker threads are terminated to maintain
consistency between their index in array and name;
Improved debugging info (toString)
Merged yield and spin counters, parkTimeNs is in Int | 2018-07-19 11:12:31 | bba6e8918e32d521109583a9024b3d5e82da53f5

Improved management of parkedWorkersStack in terms of ABA/concurrency;
Also includes documentation, naming and packaging fixes | 2018-07-18 10:12:31 | 1d3b0191ecbf498965d81257c80ad6f87e583552

Improved tasks dispatching:

Merge blocking and created workers into single state variable
Replace j.u.c. queue of parked workers with intrusive stack to support shrinking and increase performance
Replace j.u.c. global queue with Michael & Scott queue which supports conditional polling
Poll for blocking tasks from global queue when CPU token is not available
Make last ditch effort before thread termination
Idle reset on requestCpuWorker | 2018-05-03 11:52:00 | 18a91347466560b63144d0097f248d9edb029780

Fix ordering bug in QuasarTest | 2018-07-25 16:16:23 | a608a335ff57e969f69985c43ee70c30da1dba8f

Get rid of compiler bugs workarounds | 2018-07-25 13:27:14 | 5f73827f3131332018c02650057eff4aa2886ae7

Channels concurrency improvement:

Make close, cancel, isClosedForSend, isClosedForReceive and offer linearizable with other operations
Fix bug when send operation can be stuck in channel forever
New concurrency tests

Fixes #359 | 2018-07-17 15:39:20 | ea651aa5badbc20f911c844db2a57ea4f68fc38b

Access to PlatformImpl in JavaFx dispatcher, on Java 9 it's an internal module which should be explicitly exported

Fixes #443 | 2018-07-20 12:07:28 | 5557245405f965ec5ca26083301559066a1be147

Minor grammatical changes to the Coroutines guide

Minor fixes for the English grammar in the coroutines guide to help ensure new readers understand coroutines properly. | 2018-07-19 20:01:40 | 977ada1e74e0ae9b011fb219891433a6d36e9ef3

Validate FJP.commonPool parallelism to avoid pathological bugs

Also always construct private FJP pool if
kotlinx.coroutines.default.parallelism is explicitly specified.

Fixes #432, #288 | 2018-07-11 10:36:07 | 1e12210cd2bccdfd866b1c9649cd19e40663fb5f

Change order of handlers in JobSupport and CancellableContinuation
1) Invoke handlers before dispatching in CancellableContinuation to make behaviour timing-independent and Unconfined doesn't produce unexpected results
2) Invoke onCancellation -> handlers -> onCompletion in Job to make behaviour timing-independent

Fixes #415 | 2018-07-03 08:11:21 | b10287ecb35463f471ac120367a0a4f56f6b5c49

Typo fixed | 2018-06-26 11:58:39 | 7981999a156918abced59de696b02d9bc731f808

IO: fix joining and continuous writing byte array interference | 2018-06-13 16:49:45 | 9faa0395afd26a3c29cd67de5dce635a7882cf5c

Update ThreadPoolDispatcher.kt

Fixed typos. | 2018-06-09 17:01:53 | 517a2592077b067032d6c0379226d0467d7662f1

IO: fix continuous writing session interfered with joining | 2018-06-01 14:23:47 | e15eae8e3537080a82078873d762ad9de61f50f4

Typo fix | 2018-06-03 23:34:22 | e185ed6f918a1df082832c9059a091505b9a5cf9

Introduce deprecated ReceiveChannel#use to preserve backward compatibility with SubscriptionReceiveChannel, fix reactive samples | 2018-06-01 12:30:34 | 313978cf6b3901b1d7fbfb5d1f688c068a072c09

LockFreeMPSCQueue optimized & fixed

* no need for REMOVE token to hurry up GC
* Placeholder logic is fixed to avoid potential data loss on wraparound
* Stress test for resize/copy added | 2018-05-30 18:58:02 | c22a1c748e93db6e7d4e73f9118e8435edbeb698

Leaking handles in awaitAll are fixed | 2018-04-28 16:22:29 | e0b6db04b3bd86e942bc7e40081a82aedd8fd200

Delay bug fixes:
Invoke clearTimeout on cancellation in JSDispatcher
Remove delayed task on cancellation from ThreadSafeHeap on cancellation to avoid memory leak | 2018-04-26 13:03:40 | cd00643b92c9698ca728f92a66f52b30b3811d05

Documentation for debug property values | 2018-04-11 19:21:23 | 590c8889c2bb5341f15ee20e440c5599342fe34b

typo fixed | 2018-04-04 06:59:33 | 905a512625ad96dcd45c789f983babd93dfde011

Add extension to ExecutorService to return closeable CoroutineDispatcher

Fixes #278 | 2018-03-20 19:28:52 | 26f4b9ecd1bdd03299b668541f7c7c9ecaf9ab7c

Debug toString for channels

Fixes #185 | 2018-03-06 10:37:42 | e4b6f09af7c0d0b6963fa8611e867ff3292fad0e

rx-example: Added application plugin & fixed to use runBlocking | 2018-03-05 14:58:59 | 00560e8b0add1628bd0a32202b6f3cc301b35af3

Use NodeDispatcher on ReactNative

Fixes #236 | 2018-03-05 09:01:07 | ecc68f13141d1353aa2bb1d027a077e0fd7be4fb

Check for undefined `window.addEventListener` when choosing default coroutine dispatcher.

Fixes #230 | 2018-02-10 19:35:58 | 54d57e0c1fff22fe1d72c762f2bdbf01995395ca

Update README.md

Minor typo and typography fixes. | 2018-02-04 00:30:58 | 7dd6b66eced47e4ddf0b2c76c974ac19612b827c

IO: fix error propagation in blocking adapter | 2018-02-02 14:18:47 | f0c1d99e2c5c5978da7ace9d58c61a5648ed7687

Update coroutines-guide.md

This tutorial suggests just Async suffix:
https://github.com/Kotlin/kotlin-coroutines/blob/master/kotlin-coroutines-informal.md#asynchronous-programming-styles
Also, there was "of" instead of "or" | 2018-01-29 17:39:02 | 7e94e70734f6e01b0522d11071e6825879a221e7

runBlocking is improved to properly support specified dispatchers,
so that `runBlocking(UI) { ... }` can be used outside of UI thread.

Fixes #209 | 2018-01-29 15:07:21 | cb78787638039096804bc1b97031bcb9801c0547

Workarounds for KT-21968 to fix JS tests | 2018-01-24 20:31:22 | dfeba242b9e328f7528507f9349623671a00333c

IO: fix joining sequence, avoid infinite joinTo suspension | 2018-01-23 20:16:54 | d1842c6301d8debca8509809d473ce7e889b1d7b

IO: make reusable cancellable continuation implement DispatchedTask | 2018-01-12 15:46:22 | 4d01f7ec3b33f7633f3737a5ab3a3fc90703f57f

JS: Introduce Window.asCoroutineDispatcher and use custom queue in
Window.awaitAnimationFrame to align all animations | 2018-01-13 08:20:32 | 1867f6de0fb39077d0cb13fdc0400dd4568f717b

Actually fixed startup/shutdown of DefaultExecutor for tests to prevent
thread leak. Includes test-case. | 2018-01-12 15:28:24 | 9483301695f4c0784d663238ecd0ef04bbfcbea3

MPP: Debug toString should not depend on kotlin-reflect | 2018-01-11 16:04:12 | b79277b4fab5353680445f36dd9b19a740828203

IO: Use TestBase in all tests and fix leaking threads in tests | 2018-01-11 10:48:19 | c45f5fa3b636d66b824351c8d8d9368b8ee4e37f

MPP: Ported DispatchedTask perf improvements to JS and more code is made common | 2018-01-11 09:39:36 | f29203c158a526f90ae8574abfc1ba6dd5249262

Performance: Remove DispatchTask, store value in DispatchedContinuation | 2018-01-10 13:25:25 | f2239e191f55883486d5ce04ffb0c6f75cdc3468

Update coroutines-guide.md

Correct `Dispatcher` spelling | 2018-01-08 13:56:54 | fa13beba79e6ebb68588ba2167b67a77196907d3

Optimize creation of DispatchTask for cancellable continuations (fixed) | 2017-12-28 09:21:14 | bdf23f28c425ea391baa7ddbc3ba012d15e6dfa5

Optimize creation of DispatchTask for cancellable continuations | 2017-12-27 22:09:43 | ac48070de5e20b727b6d9ffd5cc7c259426fb6fb

MPP: DefaultDispatcher internal impl class renamed to JSDispatcher | 2017-12-27 10:14:54 | a919827885289271a6c598ab47fdf4434a8e0da3

fix typos | 2017-12-24 19:55:06 | d2d42ea802b54d2ede23f3edf3c18521ae46a3e9

IO: fix accidentally used tryResumeWithException | 2017-12-06 14:09:01 | 9ef4e0c05168acdb2c955079e2ee857cfec9de06

IO: fix spuriously hanging pipe tests | 2017-12-05 12:41:42 | 4adac45480b33664d79b24f7a779e7d4c1da68b1

IO: fix joining with different write byte orders | 2017-12-05 09:35:56 | 8af8937a34e893661dfe15f9be598eac50b101df

IO: fix infinite writeSuspend loop caused by auto-resuming flush | 2017-12-05 09:27:09 | e6764086ef4a03ec610245740b379f5da617224c

Bug fix: start hangs on lazy coroutine with attached invokeOnCompletion | 2017-11-30 13:41:47 | 5610e1df2eb3f67be8b45633b5d6ffbf73ec6bb8

Add DefaultDispatcher on some reactive operators | 2017-11-29 21:12:35 | e19ee04ca72316f9d67a58d35b8be398b059f1f5

IO: fix too expensive joinTo fast-path | 2017-11-23 09:39:27 | 060f36a06d341f43c0f9e77fd6706bf71f94972c

IO: fix typo in test name | 2017-11-20 08:43:26 | 9a6ca1a006debfa08392027508d03a141ae53841

Introduced ReceiveChannel.cancel method;
all operators on ReceiveChannel fully consume the original channel
using a helper consume extension, which is reflected in docs;
removed `suspend` modifier from intermediate channel operators;
consistently renamed channel type param to <E>;
added two versions for xxxTo fun -- with MutableList & SendChannel;
added tests for all channel operators;
dropped/deprecated ActorJob/ProducerJob, fixes #127 | 2017-08-17 18:01:33 | b555d91193d9e76710062451cf94a94d14820e98

IO: fix race in closeWaitJob of JoiningState | 2017-11-17 16:30:22 | 47d92bafe90d899dfb53cd0f8bf7eae75504047e

IO: fix accidentally missed it | 2017-11-17 16:29:49 | d42bdadc8520ec490d5b37f5f160b54d4541d2f8

IO: fix race in ByteBufferChannel.write(lambda) | 2017-11-17 15:39:03 | 7bf4fa9e3b19a8200450fabe396a0ff854615596

IO: fix joining of already closed but not empty channel | 2017-11-14 11:52:32 | 9e9929d376d2b92cd5fda2f21f7cc1eb51f66ca8

IO: fix lincheck dependency | 2017-11-10 20:22:53 | b94ce42827dc5f9294f19b99da356ad585fb01ea

IO: fixed awaitClose and copyDirect | 2017-11-10 09:22:23 | 373d590e103f3203f61b2fb93b3b82bcce1de13e

IO: fix race in joined flush once again | 2017-11-09 18:18:05 | 8e9138ca4a297189f49bece8e739b6584f69e061

IO: fix joined close/flush | 2017-11-08 13:50:13 | 2fdb5aa4867b60f7c659cf4d950babfd2a43a67a

IO: fixed joined channel flush | 2017-11-08 03:15:39 | 625c1fefa57f95af2b723b7c7e3b1a5319c69faf

IO: fixed joined ByteChannel close | 2017-11-08 03:11:53 | ca8762b2f6a1043103a45153357a5f9e5dc010af

IO: fix writeByte BufferOverflowException

it is important to setup buffer's positions again after suspension
it is not the case if we don't hold writing state during suspension | 2017-11-07 16:42:15 | bab9f7927ca780b242c794578c02ddf63db40375

IO: fix race in readSuspend

consider state change:
writer: IDLE(empty) -> !do write -> IDLE(buffer) -> !close -> closed = C
reader:  !suspend -> resumed -> closed = C -> [here]

here reader can see that there is closed state however to see published
written state it should read state again rather than simply use already
readen state to get happens-before guarantee | 2017-11-07 16:18:16 | 32c90b169d05bd372317f90ae5ad511bbcb05bc5

IO: rewrite if/else/return code to identical

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 11:23:34 | fde1a646fe5a60c8aa211764d63527ec429672c3

IO: eliminate tail suspend calls in when blocks

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 10:54:47 | 4eccfba8d4cbe55ce49ac7b70c40eea1d0adf7c9

No Job in newSingleThreadContext and newFixedThreadPoolContext anymore

* This resolves the common issue of using `run(ctx)` where ctx comes from
either `newSingleThreadContext` or `newFixedThreadPoolContext`
invocation. They both used to return a combination of dispatcher + job,
and this job was overriding the parent job, thus preventing propagation
of cancellation. Not anymore.
* ThreadPoolDispatcher class is now public and is the result type for
both functions. It has the `close` method to release the thread pool.

Fixes #149
Fixes #151 | 2017-10-20 09:36:56 | d9ae2bcb88403e0854b895ba46c2417b4c0a4752

run uses cancelling state & propagates exceptions when cancelled

* When coroutine that was switched into a different dispatcher using
`run` is cancelled, the run invocation does not complete immediately,
but waits until the body completes.
* If the body completes with exception, then this exception is
propagated.

Fixes #147 | 2017-10-20 08:42:06 | bcdd8e17fed40097f9bb8fdb3e218f95ff8603a9

Exception propagation logic from cancelled coroutines is adjusted

* When cancelled coroutine crashes due to some other exception, this
other exception becomes the cancellation reason of the coroutine, while
the original cancellation reason is suppressed.
* UnexpectedCoroutineException is no longer used to report those cases
as is removed.
* This fixes a race between crash of CPU-consuming coroutine and
cancellation which resulted in an unhandled exception and lead to
crashes on Android.

Fixes #152 | 2017-10-20 06:00:50 | 6aed878a67e6f707e6c3afb0879beb8822a95d6f

Fixed Reactor docs (Scheduler.asCoroutineDispatcher) | 2017-10-07 19:58:40 | 8348b8c31d5b07541bd3d268ca2a186b0fe1ad6f

Failed parent Job cancels all children jobs, then waits them

Also improved debug output a little bit | 2017-10-07 12:44:48 | a36ab94253bb9945c6377eb43db0cb1071019c40

IO: eliminate race in close

I knew that I'll hit this bug anyway. Here we MUST flush twice as
flush at read suspend is not enough. If a writer closes then the first
flush does flush and it closes so all readers will see all pending data.
If a foreign thread does close then the first flush is makes no
difference however the second is required for proper cleanup and
to do tryTerminate | 2017-10-04 18:34:18 | ad68c06c1200f2038c26adeab2abf801a2a2114b

IO: fix verifying pool usage

buffer view doesn't hold original pool reference to make
pool chaining working | 2017-09-29 15:18:00 | ccf8dde980a4701b9cd30e1df23e5cbefdd93b53

IO: fix writing byte packet | 2017-09-28 07:58:15 | 754a19b188dc6d486d73b8e3a2f0c483c3f88f9b

Documentation for DefaultDispatcher in the guide | 2017-09-29 18:39:03 | 66f018c489c6b0ec0831fa9953db34da3edff5f3

DefaultDispatcher is introduced | 2017-09-28 11:27:05 | c0d559b594fce802f1d1be9a6feef49019d17160

IO: fix ByteWritePacket.writePacket size update | 2017-09-17 19:48:26 | 5ca0d12c1e8a9672d40fe83cd31d1b2426f397e7

IO: fix writer scope type | 2017-09-11 10:06:54 | ea3a418f84f3731e92658cedfa11878a8828500c

IO: fix byte channel readX operations return -1 during close+flush

Read operation should try flush before return -1 if closed because
the close operation setting close status first then do flush
so reader could see closed status but not-yet-flushed byte counters | 2017-09-11 07:31:08 | e4d3ce750ed8b864a435fb0926d0d77e9c02b208

IO: add more byte packet tests and fix few bugs | 2017-09-06 18:50:51 | 5feaf6973c23fae3c5a8df64748e2181c50dd0d6

IO: fix delimiter lookahead | 2017-09-06 15:52:04 | 1cc86083e7be17ce53f7c80cfa6ba67e8569e33e

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 99cdb380bf6391db7e7d08e8673c627c554074d8

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 776b370d58883e9bce0c309ebb4919ef4cdac13c

IO: fix byte packet write buffer leak | 2017-08-25 08:39:00 | 974cbb3b21b8d7613c41ee2221ce435e347b068f

IO: fix byte channel close with error buffer leak | 2017-08-25 08:06:59 | 24b040f1345db27b45589a975daab45bf9325494

IO: fix CR-only line endings processing + tests | 2017-08-23 11:39:41 | a9a936d1a325ee0baf36df444414e1e17ac539da

IO: rename writeStringUtf8, fix implementation + tests | 2017-08-23 09:26:18 | fbcba264a37580b5c47f3314395e5146afb38287

IO: fix copyAndClose + tests | 2017-08-23 09:11:55 | fc84a634ff9a1acca04e09fa5a031b904c5c8838

IO: byte packet readLine support + bugfixes | 2017-07-26 09:59:16 | 0b12ffc0178844e813223039adf5d7510703485d

Fixed bug in LockFreeLinkedList (invariant & lock-freedom violation)
Migrated atomic ops to AtomicFU library for ease of code maintenance
Implement lock-freedom testing in LockFreeLinkedListAtomicStressLFTest | 2017-08-10 18:09:26 | 7eb41efbacd498704f25465e2a58f4892c16aa32

Typo fixed | 2017-07-24 13:42:34 | a448903dcac25e450d87c49705e7a6693a300d29

Use CompletableDeferred in the guide section on coroutines;
fix (reknit) broken links to factory functions that are now top-level | 2017-07-21 22:00:30 | 256812a1c09511744575ed3d2c64fec27979f391

More documentation on CompletableDeferred states and style fixes | 2017-07-21 15:04:23 | 8e2ae9964614e35295a8d695114b00c35f5fc755

Better debug strings for continuations | 2017-07-12 12:22:21 | 69d9c852289f1a4a9ffe107dc75cc71871cfe34e

ObservableBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 10:16:30 | ed6985459318209be084ff807676cb722387fb6f

PublisherBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 09:58:44 | 58246ca7e7727632ba50c41d0314df47ba9e3fc0

Fixed IllegalStateException in select that concurrently selects, which
was due a problem with Job concurrent cancel and dispose of handle.
The bug was introduced by addition of Cancelling state for a Job.

Original stack trace in select was:
java.lang.IllegalStateException: Check failed.
	at kotlinx.coroutines.experimental.internal.LockFreeLinkedListNode.remove(LockFreeLinkedList.kt:236)
	at kotlinx.coroutines.experimental.JobSupport.removeNode$kotlinx_coroutines_core(Job.kt:734)
	at kotlinx.coroutines.experimental.JobNode.dispose(Job.kt:995)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.initCancellability(Select.kt:294)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.getResult(Select.kt:273) | 2017-07-11 09:50:00 | e9f64491787433b3d53ad5800456524820058d5f

typo fixed | 2017-07-10 10:46:13 | d28cc872fb7815b51ceb7c84a4e77117fce380c7

typo fixed | 2017-07-10 10:44:07 | 8b0b07ab81f12bc605462a6a1333b61abce547cb

typo fixed | 2017-07-10 10:43:20 | 93f7e8e22019643caaf14ae480c05ab0a349064d

Bug fixed on waitTimeoutOrNull (was flaky testOuterTimeoutTest) | 2017-07-10 10:38:54 | 769d48217f8787c7f64c07da6e53c27b2d703274

Refactor DispatchTask to reuse it for dispatchYield | 2017-07-10 10:16:20 | 2a93646a8054ce7819e9bdbff8d28849a19e874b

Fix SecurityException when trying to read "kotlinx.coroutines.debug" prop | 2017-07-10 07:15:40 | e824eaaab9d053ff0f2cc028c7413bb83adcacc0

A fix & optimization for select impl helping scheme | 2017-07-05 06:53:29 | 907074f1f63871ed29feab3173a2e38b30d8fbb6

Reactive tests fixed for cancellation logic change | 2017-06-26 11:25:56 | 7a7b00938934ef7d0855eb24ec93a06d0b0c97e7

Fix typo: debugging more -> debugging mode | 2017-06-24 21:03:35 | ed5ed49913498b4e880415d2f0fb9004e20e1b5a

Typo fixed | 2017-06-23 10:27:02 | 6c18dfd15f6e1703db57531422bc0df3cb7d08ff

fix typo.

somethine -> something | 2017-06-18 07:37:59 | 81a6f23ca68d7ed37f36dcb966fe74e3bc53de57

Typo fixed | 2017-06-09 17:25:03 | c3c2f3269220f5d7ae20e7592ca1253061b50a95

CoroutineExceptionHandlerTest fixed | 2017-06-09 15:59:25 | 866521b83ed0676d0203dec35de5fb797bc9a59d

SimpleSendReceiveTest is fixed to account for close conflation | 2017-06-06 11:36:38 | 9ff32644381bf1a692d9a935170a9f7b7023f244

Fixed lock-freedom of send/offer on closed channels and related bugs.
Conflated[Broadcast]Channel hang of concurrent offer/close is fixed. | 2017-06-05 14:04:39 | e6e8ce8d46cee273e00ee130334239880734dc2f

Integration readme title fixed | 2017-05-17 11:59:49 | 0c2e25d7c38f50bd3c9866ea1fc2c12d5d74251a

launched jobs and await can be cancelled while waiting in dispatch queue

* suspendAtomicCancellableCoroutine function is introduced for funs like
  send/receive/receiveOrNull that require atomic cancellation
  (they cannot be cancelled after decision was made)
* Coroutines started with default mode (CoroutineStart.ATOMIC) using
  async/launch/actor builders can be cancelled before execution starts.
* CoroutineStart.ATOMIC is introduced as a start mode to specify that
  coroutine cannot be cancelled before its execution start. | 2017-05-11 17:15:18 | a74eb5f8b08e84f904e75aa71da4547c9178da8d

Fix withTimeout/OrNull bug with spurious concurrency on cancellation | 2017-04-20 16:23:18 | ca9d5be31a30c5f6a20875438f9ae40db4183f4c

Refactored ThreadPoolDispatcher to reuse code of ExecutorCoroutineDispatcher | 2017-04-18 12:28:35 | f04f51d5b05a0aec7c97acc202d180096a095fbf

equals/hashCode for wrapper CoroutineDispatcher impls | 2017-04-11 10:50:03 | 30dd5c129c493ca7b1a3b2b80437e8a7ec68f3ec

Starting coroutine in UI event handlers without dispatch in UI guide | 2017-04-07 15:06:22 | f724f6e2fe7c20cb48b69cd7b19b2658313231e4

Nicer toString implementations for CommonPool & Unconfined dispatchers | 2017-04-07 07:35:28 | dc9fd1c2d18da2f23d9907148b4674cda6418e49

Few minor docs & build fixes for reactor support | 2017-04-06 19:15:35 | 523516abd2023f8d968d389b32dee713130a9f83

Merge pull request #53 from mkobit/patch-1

Correct typo in coroutines-guide-reactive.md | 2017-04-05 09:41:56 | 7676e2239947273c6cbb4cb77536042bd9f2ce43

Fix repository urls

need to be reverted once bintray will fix jcenter sync issue | 2017-03-23 14:45:39 | 78fd3cb8932410af9beab4effc04bdeea4343732

Merge pull request #42 from jakiejj/master

fix typos in comments to Nio functions | 2017-03-20 07:16:24 | 9ef792fec6775bb5cdb08c84511488f324db3322

fix typos in comments | 2017-03-17 20:48:39 | 4d927c76488b96abaae7ba003f8064ad84b8334e

Typo fixed | 2017-03-14 17:39:50 | 81a5b7144484dcc8ebc89cd98fd9bd8a2d45afbe

startUndispatchedCoroutine is renamed to startCoroutineUndispatched for consistency with coroutine intrinsics | 2017-03-14 16:39:26 | 4638d79097a3d5b0c1b32c1e468ad723cc4b2bd9

Fixed bug with sometimes missing `onComplete` in `publish`, `rxObservable`, and `rxFlowable` builders | 2017-03-13 09:03:35 | d14a3901f365f622d9a7ba96fc00900011c9c009

Scheduler.asCoroutineDispatcher extension for Rx 2.x | 2017-03-10 12:06:01 | a1fe3da17907024afa50a35cbfcc72639d62bf78

not -> no typo fixed | 2017-03-09 09:57:57 | 228d084bfb87f967e216b84029b58649fcbe7472

Executor.toCoroutineDispatcher is renamed to asCoroutineDispatcher | 2017-03-09 09:03:39 | 38b5ea18e36f1a53d4cde27bf3fd21522727cbbb

Fixed dispatching logic of `withTimeout` (removed extra dispatch) | 2017-03-02 21:15:21 | 43d831f61f33262dcb4621069451d1699898d1cb

More links and typos fixed | 2017-03-01 14:21:48 | cc63363ead9d82f4e246a319ca3e0cb9f15e3a14

top-level readme links fixed to produce & co | 2017-02-22 12:04:28 | 40e89f689f89ae643f68c68efc57aebd8f8284ed

Jon.onJoin select clause is implemented, lazy onAwait/onJoin & dispatch fixed | 2017-02-22 11:56:58 | d84dbc2d75927fe8446098a225a3fbb884683bde

startUndispatchedCoroutine utility functions | 2017-02-22 06:53:49 | ee88fbef2d78e4b25f741efffabf4756bff8e7f3

buildChannel deprecation template fixed | 2017-02-20 12:53:30 | de8b9e9b336491ff0dbf107fe35d9efa030d92d3

Merge pull request #31 from gildor/on-completion-deprecation-fix

Job.onCompletion deprecation template fixed | 2017-02-20 12:49:41 | 85923e2de75ed522903cc3d64aef2ad178c1cbf8

Job.onCompletion deprecation template fixed | 2017-02-19 13:26:29 | c8f9ca308abe963cafa5f676410402fc287cfa5a

Delay implementation in Swing, JavaFx, and scheduled executors is fixed to avoid an extra dispatch
CancellableContinuation.resumeUndispatched is introduced to make this efficient implementation possible
Additional documentation for CoroutineDispatcher implementors | 2017-02-10 10:30:38 | a198bad7365a508baf1041993e9a14007f9d5aa3

Doc fixed | 2017-02-10 10:14:35 | 8c8551e7dbea7c2467060c2d3c6aa1c54c721e68

Merge pull request #29 from cbeust/patch-1

Update coroutines-guide.md | 2017-02-07 17:52:01 | 4d821e3901d038f005850b38d1e4954506306383

Merge pull request #28 from erokhins/patch-1

Update 1.1.0-beta-37 to 1.1.0-beta-38 | 2017-02-02 19:24:36 | 40f69cf704e7b31cec9c8a935317d8c173e79623

Added deprecated (with error level) plus operators on Job and CoroutineDispatcher to catch potential problem with their incorrect use at compile time | 2017-02-01 15:43:32 | 79a2868295127b81056f66d644da72db5a40d772

Merge pull request #27 from tairrzayev/readme-fix

Fixes the typo in the coroutines-guide.md | 2017-02-02 06:15:26 | 9d844fa1733f83e5e1b85c3e762a69729d3c5ef2

Dispatchers default behaviour is changed to schedule new coroutine for execution later.
Job.getInactiveCancellationException is introduced.
yield is cancellable while it is waiting to executed.
core tutorial is expanded. | 2017-01-29 18:58:33 | 7cf452eab59cdca570227f071cba2da374f77110

Finer grained control on debugging facilities | 2017-01-24 07:29:53 | aecb9aa1606b79243c8e93221de9713c164ce015

Added context parameter to CoroutineDispatcher methods, implemented Executor.toCoroutineDispatcher | 2017-01-23 13:47:20 | 67891d867da022d608d4589859002f256d9a313e

Fixed initialization of Job with parent (initParentJob), fixed handling on uncaught exceptions in standalone coroutines | 2017-01-20 09:19:52 | 58a7add417403811e822a4f6f7689ae3fd0e2018

Minor: fix version of maven-deploy-plugin, fix pom warnings | 2016-12-21 17:21:30 | c4ad15fc6246b7496d610da7419441020dfe1c56

Merge pull request #6 from hhariri/patch-1

Fixed packaged names | 2016-07-27 07:04:12 | c6993089412fbc491ddeb0a71b57e67bf31e21d6

Fixed packaged names 

On the repo, the package names don't have the suffix -1. | 2016-07-27 06:03:41 | 1abe89716c093c9e010a45a5235da7f9b50eea17

Merge pull request #791 from Kotlin/undispatched-cancellation

Use final Job state in undispatched coroutine completion | 2018-11-06 12:55:53 | 666ea6e554fa52ea03504ab618543ca26e20ce3b

Add ExperimentalCoroutineDispatcher to binary compatibility check, restore binary compatibility in Ktor | 2018-11-06 11:03:39 | e3ab2a692a6da18ee9213a124a4c111235046c75

Add scheduler name to ExperimentalCoroutineDispatcher

Fixes #661 | 2018-10-31 13:15:35 | 92327322442d4c8be225067ff6e16c6827f8b38e

fix link | 2018-11-05 16:56:31 | 64f2b2006b5a7cf2a760ec976dd28e988ce122d0

fixed typo | 2018-11-05 14:28:47 | ace91872cc56113fa10e844069f46eb3bbec9c95

Use final Job state in undispatched coroutine completion

  * When using in-place coroutine builders, startUndispatchedOrReturn will return block's final value on fast-path. This is not correct because if any of the children had failed, whether or not exception is thrown depend only on child timings. Moreover, in the face of such race exception may be ignored if scope owner wasn't cancelled or is missing.
  * Introduce special hack for withTimeout and withTimeoutOrNull to ignore TimeoutCancellationException on the fast path
  * withContext, coroutineScope, supervisorScope, withTimeout and withTimeoutOrNull are affected and now check cancellation on fast-path | 2018-11-04 12:32:34 | 78832e3bb38560f4c4d55cdba436bf7bc9b761ca

SchedulerTask is now an abstract class with optimizations for jvm

* It removes the need for a separate SchedulerTaskBase
* submissionTime and taskContext are marked as @JvmField
* DispatchedTask is also an abstract class
* resumeMode is marked as @JvmField | 2018-11-01 21:10:39 | aa374a95dc7e6df4fd6458fe6d8abe95e2953fce

Scheduler: capture TaskContext for afterTask before running it

This is not strictly needed, since the reusable Task instances
(DispatchedTask) should be always reused in the same context, but
this makes the code more resilient to future changes. | 2018-10-22 02:31:23 | e64d9b706cb5180260e4d95fa3a990449163da51

Avoid allocation of CoroutineScheduler task object

* DispatchedContinuation and CancellableContinuationImpl have all
  the necessarily field to be scheduled | 2018-10-21 17:08:49 | 16e20347dc5557063742ea8a06dbe5162a211c25

Publish: Comments style fixed | 2018-10-26 20:02:08 | f18b9f580faff47af054cb6c0942cd15ccc7675d

Fixed exception handling for publish builder

* Test that ensures proper parent cancellation
* Stress test to ensure that exception in publisher always handled
  by parent
* Also fixed race between request & signal completion that did not
  reproduce before | 2018-10-23 05:28:12 | ac848e872da94e01ed60a6bfecbfe3926229f44f

Reactive streams integration conformance to TCK verified & fixed

* Throw NPE on null subscriber
* Throw IAE when requested n <= 0 elements
* Do not sent any notification after cancel() | 2018-10-20 16:50:05 | 8cced247b1d83f7885f21be8c9b0354dab0fd1f3

fix minor typo | 2018-10-30 19:14:20 | a223f351c1dac80443b02ab905d46acbf4a66720

Implement yield for unconfined dispatchers, documentation improvements

Fixes #737 | 2018-10-23 09:29:56 | c33ef61d4502b71e0cdc354337f261917102d1c6

fix: make snippet as non-runnable | 2018-10-23 12:33:12 | 0661d477332205c23defe65d51e4063cd009e023

Prevent temporary leaks in HandlerDispatcher by properly handling
cancellations in scheduleResumeAfterDelay() implementation | 2018-10-16 22:30:40 | e321394c359758659a07ad1c98429ec2acd8ea59

fixed typo | 2018-10-19 21:16:57 | d981966acf780078119493c1f64e30dc9fa6e02e

Merge branch 'release-candidate' into develop

# Conflicts:
#	core/kotlinx-coroutines-core/test/RunBlockingTest.kt
#	docs/coroutine-context-and-dispatchers.md | 2018-10-18 14:40:10 | a7e10146781744f6df3865a1a33fa4e7cbc2c0b6

Merge branch 'context-elements-opto' into release-candidate

# Conflicts:
#	common/kotlinx-coroutines-core-common/src/Dispatched.kt | 2018-10-18 13:59:46 | cd37d8e8b30656a92a883b646fe050ff479bafdd

Minor optimizations of UndispatchedEventLoop | 2018-10-18 12:17:25 | 23d435b17a1aaaba86cc71656a4080547c4c727e

Do not step into thread-local event-loop on CancellableContinuation#dispatch fast-path | 2018-10-18 08:54:56 | faa477496bc2c05dad4034847a3f7d3f6aae3818

Use FIFO queue in undispatched event loop | 2018-10-17 16:51:50 | 09b9d6c157c9d7c6ec84052c16e64d3eebd0bc8e

Move undispatched thread-local event loop to dispatched continuation, execute all undispatched tasks in that loop to avoid SOE in user-supplied unconfined dispatchers and 'immediate' main dispatchers. | 2018-10-17 15:37:36 | fd54bc4882357771d0bec29abbd6e99dfccab725

Rework Dispatchers.Unconfined to use thread-local event loop

Fixes #704 | 2018-10-17 07:57:30 | 7ee722a595b416023c69d987fb7e4682ac0ffe91

Cache result of ThreadContext#foldAll in the field of DispatchedCoroutine to avoid context fold in tight loops

Fixes #537 | 2018-10-16 12:47:26 | ae85797805f93f98bfad64f5f91ba97e4f2c1fbc

Dokka fixes

  * Provide module with Kotlin 1.3 API because Kotlin 1.2 from Dokka can't read classes marked as "from the future"
  * Add runConfiguration dokkaStubs which is included only during dokka task with some classpath magic for Kotlin 1.3
  * Add package.list for slf4j
  * Fix unresolved types/links in documentation
  * Suppress all internal/inherited API | 2018-10-13 12:40:32 | 706e39363b586127b29e28fd97d476129c22fe93

Make EventLoop internal, @JvmName("from") for ExecutorService.asCoroutineDispatcher | 2018-10-11 16:09:44 | b6eca2a62158b2dc8d9b41d86040924095dca662

Use toString implementation for continuations to leverage debug metadata

Fixes #679 | 2018-10-10 11:46:53 | 4220ca2106bea653f2831f19c2c93752ea0e468a

Cleanup: get rid of workarounds, cleanup guide, suppress/fix compilation warnings | 2018-10-10 08:56:41 | 1bdbb3ef364006515157b5884dc663d9c3172c6c

Experimental annotation revisit:

  * Mark our API annotation as experimental with corresponding warning or error
  * Get rid of workaround for new inference bug
  * Migrate to compiler arguments instead of annotations | 2018-10-09 16:06:29 | e6e82391c33716033996ef6718756feab641816c

Restore TOC in the root coroutines-guide.md file with links to individual files

* Knit supports new TOC_REF directive for that.
* Reknit docs (also fixed out-of-date sample file). | 2018-10-08 17:20:12 | 715acd33e564dbff128a12b10ec2c6e24240d330

Migrate to Kotlin 1.3 coroutines, drop experimental from package

* Features based on version 0.30.0
* Uses Kotlin version 1.3.0-rc-57
* Uses Kotlin/Native version 0.9.2
* Uses AtomicFu 0.11.9-eap13
* Replace SuccessOrFailure with Result
* Replace buildSequence and buildIterator with sequence and iterator
* Apply @BuilderInference on all builders (including extension methods to workaround inference bug) | 2018-07-13 07:33:25 | 0950dfa1fe114e3682a546e3e53ef34dec9dfd4a

Fix lost exception from dispatched withContext on cancelled job

Fixes #675 | 2018-10-08 13:13:01 | 0f94304c6ae46c8f0cec24dde29d2e7af9ae7e97

Mark newSingle/FixedThreadPoolContext as obsolete, document the reason

* The will be replaced by another mechanism in the future.
  See #261 for details.
* The proposed replacement is to use the standard java API:
  Executors.newSingleThreadExecutor/newFixedThreadPool
  and convert to dispatcher via asCoroutineDispatcher() extension. | 2018-10-06 13:36:13 | f5126d0a9263f0b73a57d17031c340f78e3a25bd

Lazily load Dispatchers.Main and provide a stub impl on failure

Also specified explicit public visibility for Dispatchers object.

Fixes #658
Fixes #665 | 2018-10-06 14:09:05 | 0ece3885d445b60d254dc0fb21c7c05c7ebfb1bf

fix grammar typo

removed repeated 'for' | 2018-10-05 13:16:33 | e7a0723e930d52c4cb4665c5a3918f883287c039

Short Dispatchers.Default.toString value ("DefaultDispatcher") | 2018-10-02 09:59:11 | ec8cbd252d20adcdc91149ae9129149b252d945c

Move UI dispatcher to common Dispatchers.Main (#641)

* Main thread dispatchers are grouped under Dispatchers object and are discoverable via ServiceLoader

  * Dispatchers.Main can be consistently used and easily discovered, its implementation is discovered with ServiceLoader
  * It allows us to add iOS Dispatchers.Main implementation in the future thus opening the door for multiplatform UI-dispatched code
  * Workaround for #626, now Android users can start migration to RC coroutines

Fixed #626 | 2018-10-01 16:01:16 | cfe699fb59d799ab22da23aae983cc34b1164f29

Never loose coroutines when CoroutineScheduler is closed

* CoroutineScheduler close/shutdown sequence now guaranteed that a
  submitted task is either executed by the scheduler that is being
  concurrently shutdown or RejectedExecutionException is thrown.
* RejectedExecutionException is caught by the coroutine dispatcher
  implementation and coroutines are rescheduled into DefaultExecutor
  if a (custom) instance  of CoroutineScheduler is being shutdown.
* Added stress test for coroutine scheduler closing. | 2018-10-01 07:52:56 | 4b0f4dec24b93db4e0e0abbfe59b115e886a30c1

Coroutine scheduler is used by default instead of deprecated CommonPool

* Documentation and guide are updated correspondingly
* "DefaultDispatcher" is used as a public name of the default impl
* Implementation is integrated with virtual time-source
* Shutdown sequence is reimplemented in a safe way for tests,
  makes "close" safe to use on custom instances.
* "close" on DefaultDispatcher throws exception just in case
* -Dkotlinx.coroutines.scheduler=off can be used to switch back to
  CommonPool

Fixes #198 | 2018-09-28 09:20:49 | 303708b27f8d997ae482e3106679a7d170bc16d7

Exception unwrapping logic rework, do not unwrap cancellation exception if parent can handle exceptions

It allows to properly handle only relevant exceptions by child without reporting the same exception multiple times, fixes suppressions hierarchy and allows to implement supervisorScope properly | 2018-09-28 09:29:21 | 88e72f9973810119f105f78768b59e19f6a49c26

Introduce SupervisorJob & supervisorScope

This change also fixes propagation of cancellation for Job() constructor.
When both Job() and SupervisorJob() are cancelled with exception (fail),
they cancel their parent, too. So we have similar behavior between:
* Job() and coroutineScope { ... }
* SupervisorJob() and supervisorScope { ... }

Fixes #576 | 2018-09-23 16:16:04 | 21f171c8cb09831e25acdeab5c667cf3c15a9692

Avoid OOM in thread-pool dispatchers, try to reflectively invoke setRemoveFutureOnCancel on executor instance and use default dispatcher if attempt failed

Fixes #571 | 2018-09-25 12:45:53 | e29f49799d118b5c3feb38886af3030d027e7b60

async and async-like builders cancel parent on failure

* Affects async, CompletableDeferred, and all Rx integration builders.
* This makes all coroutine builders totally consistent. They all
  cancel parent on failure, but they all consider "CancellationException"
  to be the case of "normal cancellation" that does not propagate to
  parent. The only missing case is Job() that should be fixed together
  with introduction of SupervisorJob().
* Note that "scoping" builders don't "cancel the parent", but rethrow
  the corresponding exception instead, so it that is how it gets
  propagated up the stack.
* This makes parallel decomposition exception-safe. You
  cannot loose an exception as along as default (child async)
  behavior is not overridden.

Fixes #552 | 2018-09-27 16:17:16 | 52bfdabfa1476f55c1b3880d43f49977fc8df943

Copy deprecated annotations on Job member to inheritors

* Makes them easier to find for cleanup
* Avoids bug with light classes | 2018-09-28 09:41:58 | ffda1da6aec27b51f0bc8640f0e48c8fcd1e8f59

Restore binary compatibility of Executor.asCoroutineDispatcher

Fixes #629 | 2018-09-27 18:19:38 | 18cc588106ff7f4c680831809e5af8d75063c689

fix broken links for kotlin web site (#628)

* fix broken links for Kotlin web site | 2018-09-27 15:42:04 | cbeef1039d7402939bac8ec4674e1a7b1adf993a

Merge pull request #588 from Kotlin/handle-exception-fix

Handle exceptions fix | 2018-09-25 21:00:29 | 25b4388ef2f94909acac51cf1e0206975cc4b84a

Add name parameter to Handler.asCoroutineDispatcher

Fixes #580 | 2018-09-25 13:40:30 | a180ff75e9f7c97189a2651e96f4212bff0b105e

Fix lost exception during cancellation in produce, fix integration with play services after rebase | 2018-09-25 16:16:02 | 1b22af7e462272cbc33fd019975ee3ec5dbf1b78

Merge branch 'develop' into handle-exception-fix | 2018-09-25 13:10:26 | 1e0a2f0ad358c49d97602ee01ecf76602721fa4f

fix compilation | 2018-09-24 17:29:00 | f30715955637d2006e17fda7f99d002877fedc1c

Docs for context/coroutineContext in AbstractCoroutine are fixed | 2018-09-24 17:29:42 | 2d8cad05755d47af7987f39385527d3bddb15377

Fix exception aggregation to ensure atomic handling of exceptions

* Removed legacy onFinishing handler support from JobSupport.
  - It is no longer needed, because handleJobException covers #208
* Fixed bugs that were masked by cancelling parent from onFinishing.
* Consistent "Finishing" state was introduced in internal machinery:
  - Job enters finishing state when it is failing or it is completing
    and has children
  - Finishing state cleanly aggregates all failures, tracks cancellation
    and completion status
* Job.isFailed is introduced as a consistent way to query the "failing"
  state of the job that was previously only implicitly available via
  invokeOnCompletion handler (cause != null means a failed job) and
  the documentation for both Job & Deferred is updated to reflect that.
* Source-incompatible change: Job.invokeOnCompletion boolean parameter is
  change to onFailing. Such handlers are now invoked as soon as the job
  starts failing and the root cause exception of the failure is consistently
  passed to all the handlers.
* The following internal methods were introduced to facilitate this:
  - Job.failParent(exception) is used by child to signal failure to parent
  - Job.cancelChild(parentJob) is used by parent to cancel child.
* Child never aggregates exception received from it parent, but uses
  it as it root cause if there is no other exception.
* JobSupport.handleJobException() logic for launch/actor is split into:
  - failParent - can be invoked multiple times on race;
  - handleJobException which is invoked exactly once.
* Exception materiazization is much lazier now, which should
  significantly improve performance when cancelling large hierarchies.
* Other minor perf improvements in JobSupport code.

Fixes #585 | 2018-09-14 09:52:50 | ecbc85cbdad134d868698e22c0fdd7220eaced0f

Typo fixed | 2018-09-22 13:28:37 | 63e3896d85f827f2e403ffd25593ac5d9af54715

Fix typo in deprecation message of JavaFx dispatcher | 2018-09-20 17:10:30 | 39a2c559b538b8681c0724d5ec3ee6058af4e1c3

Cosmetic fixes | 2018-09-20 08:25:56 | 2dd53204e7047e970f145281c11a9c834021b3a9

Improve HandlerDispatcherTest, check that jobs are actually executed | 2018-09-19 11:30:51 | 847eba7c935ed784e918d976c9c43464179a2df9

Reknit guide, fixed TOC in Knit with comma & verify mode in example-context-09 | 2018-09-19 11:49:42 | bca98f4e9ea3c485c8691209be32fee487f812fe

CoroutineScheduler: fixed race between createNewWorker & shutdown for tests | 2018-09-14 12:17:12 | 241e74e6a2cdadaa2753f40a326c732e95fac2d0

Fixed sporadic test crashes related to withTimeout and children

- The bug only manifested when withTimeout coroutine had children working
  in a different dispatcher
- A separate stress-test that reproduces this problem with much higher
  probability | 2018-09-16 12:31:13 | fa9586bc283d60427ad3e9162de7962da4b0ec1d

Updated dispatchers references in readmes and docs | 2018-09-11 16:16:49 | f189cec57d7d0751464a5939f1bbcbd32e15d7c0

Dispatchers are renamed and grouped in the Dispatchers object

* Dispatchers.Default — a default dispatcher for background asynchronous tasks
  (currently backed by FJP commonPool, a new dispatcher in the future).
* Dispatchers.IO — a dispatcher for blocking background operations (#79).
* Dispatchers.Main — a dispatcher for Android Main Thread (#533).
* Dispatchers.Swing — a dispatcher for Swing Event Dispatch Thread.
* Dispatchers.JavaFx — a dispatcher for JavaFx Application Thread.
* Old dispatchers are deprecated, CommonPool is deprecated, too.
* awaitPulse() in JavaFx and awaitFrame() in Android are top-level funs.
* Introduced HandlerDispatcher, SwingDispatcher, and JavaFxDispatcher types
  in the corresponding UI modules for type-safety and future extensions

Fixes #41
Fixes #533 | 2018-09-11 15:42:03 | dc29b071d4784e3739f89223ced2333ecd5408ad

Fixed hangs during thread termination in IO dispatcher

Fixes #524
Fixes #525 | 2018-09-11 12:38:14 | 750d468b3281570910d0cd4000d4e29702b25020

Invoke handler using invokeIt to avoid JS bugs | 2018-09-07 11:36:05 | c430e0797e87af77f812bbcfb8751e4a0e31ffc6

AtomicFU 0.11.5 to fix Windows compilation | 2018-09-04 14:58:45 | 61abcd224a13f674bffae096afa7250de262df87

typo fixed | 2018-08-24 12:24:02 | 1a1237083b14d5de8f13f66b7a4ba6d9e26183d7

Introduce IO dispatcher to offload blocking I/O-intensive tasks

Fixes #79 | 2018-08-23 14:27:19 | f5e67ba597acdfb90ef84d29e4d6028f3f17a6ba

Introduce ThreadContextElement API to integrate with thread-local sensitive code

* Debug thread name is redesigned using ThreadContextElement API
  where the name of thread reflects the name of currently coroutine.
* Intrinsics for startCoroutineUndispatched that correspond to
  CoroutineStart.UNDISPATCHED properly update coroutine context.
* New intrinsics named startCoroutineUnintercepted are introduced.
  They do not update thread context.
* withContext logic is fixed properly update context is various situations.
* DebugThreadNameTest is introduced.
* Reporting of unhandled errors in TestBase is improved.
  Its CoroutineExceptionHandler records but does not rethrow exception.
  This makes sure that failed tests actually fail and do not hang in
  recursive attempt to handle unhandled coroutine exception.

Fixes #119 | 2018-07-25 09:22:46 | 7587eba96a230f3f0ab0c04f52723e926f7a845d

AtomicFu version 0.11.3 (bug fix) | 2018-08-23 11:05:46 | be065fd2c566acf4f600de23d45d70cf9f2144bc

Introduce ExecutorCoroutineDispatcher instead of CloseableCoroutineDispatcher

Fixes #385 | 2018-08-15 10:03:23 | b517f0529fe4a2066ca8ac985c08206cd4587758

Add workaround for K/N bug | 2018-08-22 09:37:41 | bbe6d8a915b2be9c0a7ff9d92677c878718fa219

Implement withTimeoutOrNull via withTimeout to avoid timing bugs and races.
Remove deprecated API

Fixes #498 | 2018-08-21 16:45:29 | 988eb26469819f7cc8cb1ba26c3a76a6805e8387

Provide API to create limited view of experimental dispatcher

Fixes #475 | 2018-08-15 09:06:06 | cac1a0f13c5b81cdfa3c2d1020e8d86ac8cd0029

Additional debug output for CoroutineSchedulerStressTest | 2018-08-10 17:38:41 | 21ce9c066c752adf4db1e8388a9d38a390b5f08b

Execute EventLoop#invokeOnTimeout in DefaultDispatcher to allow busy-wait loops

Fixes #479 | 2018-08-08 15:04:59 | e90cdb031ffab87d9f7671cc9e856b2a9534d59e

Scheduler tests fixed:

[temporary] Ignore flaky tests
Fix benchmark compilation
Fix WorkQueueStressTest | 2018-07-26 17:02:03 | 9542f1ce4f84d08ef2b33d14ce3ae79a8a93fa86

Scheduler improvements:

Fix (one more) ABA problem in tryUnpark
Global TaskContext to speedup CPU tasks
Documentation improvements
Stress tests constants tuned to be more robust and faster on local machine (and when ran from IDEA)
Style fixes | 2018-07-26 10:57:04 | e50fb89c4e80d7accb9bdfff3ce54c59d2857c26

Scheduler tests infrastructure

Support "kotlinx.coroutines.scheduler" property to change DefaultDispatcher
Updated scheduler shrink test with custom idleWorkerKeepAliveNs config,
so that they execute faster
Fix submissions from another instance of CoroutineScheduler
Run JDK16 tests and tests under new scheduler tests only during nightly stress test | 2018-07-20 20:57:57 | 5c7454b8a872d925f206f418c16d9880bf23e25f

Removed wrapper from LimitingBlockingDispatcher by introducing TaskContext | 2018-07-23 09:38:06 | 216e4d30a2b225361a4f3e59465c079a0f116379

Fixed ABA problem in parkedWorkersStack and other stress improvements

* Workers are now numbered starting from 1, zero is used as sentinel
* Workers are lazily created (no threads initially)
* Close/shutdown of the scheduler also clears state so that subsequent
  rogue attempt to dispatch anything fails.
* Work stealing is more predictable. It starts at random index but
  then goes linearly via workers array. | 2018-07-20 20:25:58 | db22e4023442341d39d0c3797de73e74efb25882

Scheduler cosmetics

Stealing logic cleaned up a bit (mostly style)
Update worker thread names when worker threads are terminated to maintain
consistency between their index in array and name;
Improved debugging info (toString)
Merged yield and spin counters, parkTimeNs is in Int | 2018-07-19 11:12:31 | bba6e8918e32d521109583a9024b3d5e82da53f5

Improved management of parkedWorkersStack in terms of ABA/concurrency;
Also includes documentation, naming and packaging fixes | 2018-07-18 10:12:31 | 1d3b0191ecbf498965d81257c80ad6f87e583552

Improved tasks dispatching:

Merge blocking and created workers into single state variable
Replace j.u.c. queue of parked workers with intrusive stack to support shrinking and increase performance
Replace j.u.c. global queue with Michael & Scott queue which supports conditional polling
Poll for blocking tasks from global queue when CPU token is not available
Make last ditch effort before thread termination
Idle reset on requestCpuWorker | 2018-05-03 11:52:00 | 18a91347466560b63144d0097f248d9edb029780

Fix ordering bug in QuasarTest | 2018-07-25 16:16:23 | a608a335ff57e969f69985c43ee70c30da1dba8f

Get rid of compiler bugs workarounds | 2018-07-25 13:27:14 | 5f73827f3131332018c02650057eff4aa2886ae7

Channels concurrency improvement:

Make close, cancel, isClosedForSend, isClosedForReceive and offer linearizable with other operations
Fix bug when send operation can be stuck in channel forever
New concurrency tests

Fixes #359 | 2018-07-17 15:39:20 | ea651aa5badbc20f911c844db2a57ea4f68fc38b

Access to PlatformImpl in JavaFx dispatcher, on Java 9 it's an internal module which should be explicitly exported

Fixes #443 | 2018-07-20 12:07:28 | 5557245405f965ec5ca26083301559066a1be147

Minor grammatical changes to the Coroutines guide

Minor fixes for the English grammar in the coroutines guide to help ensure new readers understand coroutines properly. | 2018-07-19 20:01:40 | 977ada1e74e0ae9b011fb219891433a6d36e9ef3

Validate FJP.commonPool parallelism to avoid pathological bugs

Also always construct private FJP pool if
kotlinx.coroutines.default.parallelism is explicitly specified.

Fixes #432, #288 | 2018-07-11 10:36:07 | 1e12210cd2bccdfd866b1c9649cd19e40663fb5f

Change order of handlers in JobSupport and CancellableContinuation
1) Invoke handlers before dispatching in CancellableContinuation to make behaviour timing-independent and Unconfined doesn't produce unexpected results
2) Invoke onCancellation -> handlers -> onCompletion in Job to make behaviour timing-independent

Fixes #415 | 2018-07-03 08:11:21 | b10287ecb35463f471ac120367a0a4f56f6b5c49

Typo fixed | 2018-06-26 11:58:39 | 7981999a156918abced59de696b02d9bc731f808

IO: fix joining and continuous writing byte array interference | 2018-06-13 16:49:45 | 9faa0395afd26a3c29cd67de5dce635a7882cf5c

Update ThreadPoolDispatcher.kt

Fixed typos. | 2018-06-09 17:01:53 | 517a2592077b067032d6c0379226d0467d7662f1

IO: fix continuous writing session interfered with joining | 2018-06-01 14:23:47 | e15eae8e3537080a82078873d762ad9de61f50f4

Typo fix | 2018-06-03 23:34:22 | e185ed6f918a1df082832c9059a091505b9a5cf9

Introduce deprecated ReceiveChannel#use to preserve backward compatibility with SubscriptionReceiveChannel, fix reactive samples | 2018-06-01 12:30:34 | 313978cf6b3901b1d7fbfb5d1f688c068a072c09

LockFreeMPSCQueue optimized & fixed

* no need for REMOVE token to hurry up GC
* Placeholder logic is fixed to avoid potential data loss on wraparound
* Stress test for resize/copy added | 2018-05-30 18:58:02 | c22a1c748e93db6e7d4e73f9118e8435edbeb698

Leaking handles in awaitAll are fixed | 2018-04-28 16:22:29 | e0b6db04b3bd86e942bc7e40081a82aedd8fd200

Delay bug fixes:
Invoke clearTimeout on cancellation in JSDispatcher
Remove delayed task on cancellation from ThreadSafeHeap on cancellation to avoid memory leak | 2018-04-26 13:03:40 | cd00643b92c9698ca728f92a66f52b30b3811d05

Documentation for debug property values | 2018-04-11 19:21:23 | 590c8889c2bb5341f15ee20e440c5599342fe34b

typo fixed | 2018-04-04 06:59:33 | 905a512625ad96dcd45c789f983babd93dfde011

Add extension to ExecutorService to return closeable CoroutineDispatcher

Fixes #278 | 2018-03-20 19:28:52 | 26f4b9ecd1bdd03299b668541f7c7c9ecaf9ab7c

Debug toString for channels

Fixes #185 | 2018-03-06 10:37:42 | e4b6f09af7c0d0b6963fa8611e867ff3292fad0e

rx-example: Added application plugin & fixed to use runBlocking | 2018-03-05 14:58:59 | 00560e8b0add1628bd0a32202b6f3cc301b35af3

Use NodeDispatcher on ReactNative

Fixes #236 | 2018-03-05 09:01:07 | ecc68f13141d1353aa2bb1d027a077e0fd7be4fb

Check for undefined `window.addEventListener` when choosing default coroutine dispatcher.

Fixes #230 | 2018-02-10 19:35:58 | 54d57e0c1fff22fe1d72c762f2bdbf01995395ca

Update README.md

Minor typo and typography fixes. | 2018-02-04 00:30:58 | 7dd6b66eced47e4ddf0b2c76c974ac19612b827c

IO: fix error propagation in blocking adapter | 2018-02-02 14:18:47 | f0c1d99e2c5c5978da7ace9d58c61a5648ed7687

Update coroutines-guide.md

This tutorial suggests just Async suffix:
https://github.com/Kotlin/kotlin-coroutines/blob/master/kotlin-coroutines-informal.md#asynchronous-programming-styles
Also, there was "of" instead of "or" | 2018-01-29 17:39:02 | 7e94e70734f6e01b0522d11071e6825879a221e7

runBlocking is improved to properly support specified dispatchers,
so that `runBlocking(UI) { ... }` can be used outside of UI thread.

Fixes #209 | 2018-01-29 15:07:21 | cb78787638039096804bc1b97031bcb9801c0547

Workarounds for KT-21968 to fix JS tests | 2018-01-24 20:31:22 | dfeba242b9e328f7528507f9349623671a00333c

IO: fix joining sequence, avoid infinite joinTo suspension | 2018-01-23 20:16:54 | d1842c6301d8debca8509809d473ce7e889b1d7b

IO: make reusable cancellable continuation implement DispatchedTask | 2018-01-12 15:46:22 | 4d01f7ec3b33f7633f3737a5ab3a3fc90703f57f

JS: Introduce Window.asCoroutineDispatcher and use custom queue in
Window.awaitAnimationFrame to align all animations | 2018-01-13 08:20:32 | 1867f6de0fb39077d0cb13fdc0400dd4568f717b

Actually fixed startup/shutdown of DefaultExecutor for tests to prevent
thread leak. Includes test-case. | 2018-01-12 15:28:24 | 9483301695f4c0784d663238ecd0ef04bbfcbea3

MPP: Debug toString should not depend on kotlin-reflect | 2018-01-11 16:04:12 | b79277b4fab5353680445f36dd9b19a740828203

IO: Use TestBase in all tests and fix leaking threads in tests | 2018-01-11 10:48:19 | c45f5fa3b636d66b824351c8d8d9368b8ee4e37f

MPP: Ported DispatchedTask perf improvements to JS and more code is made common | 2018-01-11 09:39:36 | f29203c158a526f90ae8574abfc1ba6dd5249262

Performance: Remove DispatchTask, store value in DispatchedContinuation | 2018-01-10 13:25:25 | f2239e191f55883486d5ce04ffb0c6f75cdc3468

Update coroutines-guide.md

Correct `Dispatcher` spelling | 2018-01-08 13:56:54 | fa13beba79e6ebb68588ba2167b67a77196907d3

Optimize creation of DispatchTask for cancellable continuations (fixed) | 2017-12-28 09:21:14 | bdf23f28c425ea391baa7ddbc3ba012d15e6dfa5

Optimize creation of DispatchTask for cancellable continuations | 2017-12-27 22:09:43 | ac48070de5e20b727b6d9ffd5cc7c259426fb6fb

MPP: DefaultDispatcher internal impl class renamed to JSDispatcher | 2017-12-27 10:14:54 | a919827885289271a6c598ab47fdf4434a8e0da3

fix typos | 2017-12-24 19:55:06 | d2d42ea802b54d2ede23f3edf3c18521ae46a3e9

IO: fix accidentally used tryResumeWithException | 2017-12-06 14:09:01 | 9ef4e0c05168acdb2c955079e2ee857cfec9de06

IO: fix spuriously hanging pipe tests | 2017-12-05 12:41:42 | 4adac45480b33664d79b24f7a779e7d4c1da68b1

IO: fix joining with different write byte orders | 2017-12-05 09:35:56 | 8af8937a34e893661dfe15f9be598eac50b101df

IO: fix infinite writeSuspend loop caused by auto-resuming flush | 2017-12-05 09:27:09 | e6764086ef4a03ec610245740b379f5da617224c

Bug fix: start hangs on lazy coroutine with attached invokeOnCompletion | 2017-11-30 13:41:47 | 5610e1df2eb3f67be8b45633b5d6ffbf73ec6bb8

Add DefaultDispatcher on some reactive operators | 2017-11-29 21:12:35 | e19ee04ca72316f9d67a58d35b8be398b059f1f5

IO: fix too expensive joinTo fast-path | 2017-11-23 09:39:27 | 060f36a06d341f43c0f9e77fd6706bf71f94972c

IO: fix typo in test name | 2017-11-20 08:43:26 | 9a6ca1a006debfa08392027508d03a141ae53841

Introduced ReceiveChannel.cancel method;
all operators on ReceiveChannel fully consume the original channel
using a helper consume extension, which is reflected in docs;
removed `suspend` modifier from intermediate channel operators;
consistently renamed channel type param to <E>;
added two versions for xxxTo fun -- with MutableList & SendChannel;
added tests for all channel operators;
dropped/deprecated ActorJob/ProducerJob, fixes #127 | 2017-08-17 18:01:33 | b555d91193d9e76710062451cf94a94d14820e98

IO: fix race in closeWaitJob of JoiningState | 2017-11-17 16:30:22 | 47d92bafe90d899dfb53cd0f8bf7eae75504047e

IO: fix accidentally missed it | 2017-11-17 16:29:49 | d42bdadc8520ec490d5b37f5f160b54d4541d2f8

IO: fix race in ByteBufferChannel.write(lambda) | 2017-11-17 15:39:03 | 7bf4fa9e3b19a8200450fabe396a0ff854615596

IO: fix joining of already closed but not empty channel | 2017-11-14 11:52:32 | 9e9929d376d2b92cd5fda2f21f7cc1eb51f66ca8

IO: fix lincheck dependency | 2017-11-10 20:22:53 | b94ce42827dc5f9294f19b99da356ad585fb01ea

IO: fixed awaitClose and copyDirect | 2017-11-10 09:22:23 | 373d590e103f3203f61b2fb93b3b82bcce1de13e

IO: fix race in joined flush once again | 2017-11-09 18:18:05 | 8e9138ca4a297189f49bece8e739b6584f69e061

IO: fix joined close/flush | 2017-11-08 13:50:13 | 2fdb5aa4867b60f7c659cf4d950babfd2a43a67a

IO: fixed joined channel flush | 2017-11-08 03:15:39 | 625c1fefa57f95af2b723b7c7e3b1a5319c69faf

IO: fixed joined ByteChannel close | 2017-11-08 03:11:53 | ca8762b2f6a1043103a45153357a5f9e5dc010af

IO: fix writeByte BufferOverflowException

it is important to setup buffer's positions again after suspension
it is not the case if we don't hold writing state during suspension | 2017-11-07 16:42:15 | bab9f7927ca780b242c794578c02ddf63db40375

IO: fix race in readSuspend

consider state change:
writer: IDLE(empty) -> !do write -> IDLE(buffer) -> !close -> closed = C
reader:  !suspend -> resumed -> closed = C -> [here]

here reader can see that there is closed state however to see published
written state it should read state again rather than simply use already
readen state to get happens-before guarantee | 2017-11-07 16:18:16 | 32c90b169d05bd372317f90ae5ad511bbcb05bc5

IO: rewrite if/else/return code to identical

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 11:23:34 | fde1a646fe5a60c8aa211764d63527ec429672c3

IO: eliminate tail suspend calls in when blocks

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 10:54:47 | 4eccfba8d4cbe55ce49ac7b70c40eea1d0adf7c9

No Job in newSingleThreadContext and newFixedThreadPoolContext anymore

* This resolves the common issue of using `run(ctx)` where ctx comes from
either `newSingleThreadContext` or `newFixedThreadPoolContext`
invocation. They both used to return a combination of dispatcher + job,
and this job was overriding the parent job, thus preventing propagation
of cancellation. Not anymore.
* ThreadPoolDispatcher class is now public and is the result type for
both functions. It has the `close` method to release the thread pool.

Fixes #149
Fixes #151 | 2017-10-20 09:36:56 | d9ae2bcb88403e0854b895ba46c2417b4c0a4752

run uses cancelling state & propagates exceptions when cancelled

* When coroutine that was switched into a different dispatcher using
`run` is cancelled, the run invocation does not complete immediately,
but waits until the body completes.
* If the body completes with exception, then this exception is
propagated.

Fixes #147 | 2017-10-20 08:42:06 | bcdd8e17fed40097f9bb8fdb3e218f95ff8603a9

Exception propagation logic from cancelled coroutines is adjusted

* When cancelled coroutine crashes due to some other exception, this
other exception becomes the cancellation reason of the coroutine, while
the original cancellation reason is suppressed.
* UnexpectedCoroutineException is no longer used to report those cases
as is removed.
* This fixes a race between crash of CPU-consuming coroutine and
cancellation which resulted in an unhandled exception and lead to
crashes on Android.

Fixes #152 | 2017-10-20 06:00:50 | 6aed878a67e6f707e6c3afb0879beb8822a95d6f

Fixed Reactor docs (Scheduler.asCoroutineDispatcher) | 2017-10-07 19:58:40 | 8348b8c31d5b07541bd3d268ca2a186b0fe1ad6f

Failed parent Job cancels all children jobs, then waits them

Also improved debug output a little bit | 2017-10-07 12:44:48 | a36ab94253bb9945c6377eb43db0cb1071019c40

IO: eliminate race in close

I knew that I'll hit this bug anyway. Here we MUST flush twice as
flush at read suspend is not enough. If a writer closes then the first
flush does flush and it closes so all readers will see all pending data.
If a foreign thread does close then the first flush is makes no
difference however the second is required for proper cleanup and
to do tryTerminate | 2017-10-04 18:34:18 | ad68c06c1200f2038c26adeab2abf801a2a2114b

IO: fix verifying pool usage

buffer view doesn't hold original pool reference to make
pool chaining working | 2017-09-29 15:18:00 | ccf8dde980a4701b9cd30e1df23e5cbefdd93b53

IO: fix writing byte packet | 2017-09-28 07:58:15 | 754a19b188dc6d486d73b8e3a2f0c483c3f88f9b

Documentation for DefaultDispatcher in the guide | 2017-09-29 18:39:03 | 66f018c489c6b0ec0831fa9953db34da3edff5f3

DefaultDispatcher is introduced | 2017-09-28 11:27:05 | c0d559b594fce802f1d1be9a6feef49019d17160

IO: fix ByteWritePacket.writePacket size update | 2017-09-17 19:48:26 | 5ca0d12c1e8a9672d40fe83cd31d1b2426f397e7

IO: fix writer scope type | 2017-09-11 10:06:54 | ea3a418f84f3731e92658cedfa11878a8828500c

IO: fix byte channel readX operations return -1 during close+flush

Read operation should try flush before return -1 if closed because
the close operation setting close status first then do flush
so reader could see closed status but not-yet-flushed byte counters | 2017-09-11 07:31:08 | e4d3ce750ed8b864a435fb0926d0d77e9c02b208

IO: add more byte packet tests and fix few bugs | 2017-09-06 18:50:51 | 5feaf6973c23fae3c5a8df64748e2181c50dd0d6

IO: fix delimiter lookahead | 2017-09-06 15:52:04 | 1cc86083e7be17ce53f7c80cfa6ba67e8569e33e

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 99cdb380bf6391db7e7d08e8673c627c554074d8

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 776b370d58883e9bce0c309ebb4919ef4cdac13c

IO: fix byte packet write buffer leak | 2017-08-25 08:39:00 | 974cbb3b21b8d7613c41ee2221ce435e347b068f

IO: fix byte channel close with error buffer leak | 2017-08-25 08:06:59 | 24b040f1345db27b45589a975daab45bf9325494

IO: fix CR-only line endings processing + tests | 2017-08-23 11:39:41 | a9a936d1a325ee0baf36df444414e1e17ac539da

IO: rename writeStringUtf8, fix implementation + tests | 2017-08-23 09:26:18 | fbcba264a37580b5c47f3314395e5146afb38287

IO: fix copyAndClose + tests | 2017-08-23 09:11:55 | fc84a634ff9a1acca04e09fa5a031b904c5c8838

IO: byte packet readLine support + bugfixes | 2017-07-26 09:59:16 | 0b12ffc0178844e813223039adf5d7510703485d

Fixed bug in LockFreeLinkedList (invariant & lock-freedom violation)
Migrated atomic ops to AtomicFU library for ease of code maintenance
Implement lock-freedom testing in LockFreeLinkedListAtomicStressLFTest | 2017-08-10 18:09:26 | 7eb41efbacd498704f25465e2a58f4892c16aa32

Typo fixed | 2017-07-24 13:42:34 | a448903dcac25e450d87c49705e7a6693a300d29

Use CompletableDeferred in the guide section on coroutines;
fix (reknit) broken links to factory functions that are now top-level | 2017-07-21 22:00:30 | 256812a1c09511744575ed3d2c64fec27979f391

More documentation on CompletableDeferred states and style fixes | 2017-07-21 15:04:23 | 8e2ae9964614e35295a8d695114b00c35f5fc755

Better debug strings for continuations | 2017-07-12 12:22:21 | 69d9c852289f1a4a9ffe107dc75cc71871cfe34e

ObservableBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 10:16:30 | ed6985459318209be084ff807676cb722387fb6f

PublisherBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 09:58:44 | 58246ca7e7727632ba50c41d0314df47ba9e3fc0

Fixed IllegalStateException in select that concurrently selects, which
was due a problem with Job concurrent cancel and dispose of handle.
The bug was introduced by addition of Cancelling state for a Job.

Original stack trace in select was:
java.lang.IllegalStateException: Check failed.
	at kotlinx.coroutines.experimental.internal.LockFreeLinkedListNode.remove(LockFreeLinkedList.kt:236)
	at kotlinx.coroutines.experimental.JobSupport.removeNode$kotlinx_coroutines_core(Job.kt:734)
	at kotlinx.coroutines.experimental.JobNode.dispose(Job.kt:995)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.initCancellability(Select.kt:294)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.getResult(Select.kt:273) | 2017-07-11 09:50:00 | e9f64491787433b3d53ad5800456524820058d5f

typo fixed | 2017-07-10 10:46:13 | d28cc872fb7815b51ceb7c84a4e77117fce380c7

typo fixed | 2017-07-10 10:44:07 | 8b0b07ab81f12bc605462a6a1333b61abce547cb

typo fixed | 2017-07-10 10:43:20 | 93f7e8e22019643caaf14ae480c05ab0a349064d

Bug fixed on waitTimeoutOrNull (was flaky testOuterTimeoutTest) | 2017-07-10 10:38:54 | 769d48217f8787c7f64c07da6e53c27b2d703274

Refactor DispatchTask to reuse it for dispatchYield | 2017-07-10 10:16:20 | 2a93646a8054ce7819e9bdbff8d28849a19e874b

Fix SecurityException when trying to read "kotlinx.coroutines.debug" prop | 2017-07-10 07:15:40 | e824eaaab9d053ff0f2cc028c7413bb83adcacc0

A fix & optimization for select impl helping scheme | 2017-07-05 06:53:29 | 907074f1f63871ed29feab3173a2e38b30d8fbb6

Reactive tests fixed for cancellation logic change | 2017-06-26 11:25:56 | 7a7b00938934ef7d0855eb24ec93a06d0b0c97e7

Fix typo: debugging more -> debugging mode | 2017-06-24 21:03:35 | ed5ed49913498b4e880415d2f0fb9004e20e1b5a

Typo fixed | 2017-06-23 10:27:02 | 6c18dfd15f6e1703db57531422bc0df3cb7d08ff

fix typo.

somethine -> something | 2017-06-18 07:37:59 | 81a6f23ca68d7ed37f36dcb966fe74e3bc53de57

Typo fixed | 2017-06-09 17:25:03 | c3c2f3269220f5d7ae20e7592ca1253061b50a95

CoroutineExceptionHandlerTest fixed | 2017-06-09 15:59:25 | 866521b83ed0676d0203dec35de5fb797bc9a59d

SimpleSendReceiveTest is fixed to account for close conflation | 2017-06-06 11:36:38 | 9ff32644381bf1a692d9a935170a9f7b7023f244

Fixed lock-freedom of send/offer on closed channels and related bugs.
Conflated[Broadcast]Channel hang of concurrent offer/close is fixed. | 2017-06-05 14:04:39 | e6e8ce8d46cee273e00ee130334239880734dc2f

Integration readme title fixed | 2017-05-17 11:59:49 | 0c2e25d7c38f50bd3c9866ea1fc2c12d5d74251a

launched jobs and await can be cancelled while waiting in dispatch queue

* suspendAtomicCancellableCoroutine function is introduced for funs like
  send/receive/receiveOrNull that require atomic cancellation
  (they cannot be cancelled after decision was made)
* Coroutines started with default mode (CoroutineStart.ATOMIC) using
  async/launch/actor builders can be cancelled before execution starts.
* CoroutineStart.ATOMIC is introduced as a start mode to specify that
  coroutine cannot be cancelled before its execution start. | 2017-05-11 17:15:18 | a74eb5f8b08e84f904e75aa71da4547c9178da8d

Fix withTimeout/OrNull bug with spurious concurrency on cancellation | 2017-04-20 16:23:18 | ca9d5be31a30c5f6a20875438f9ae40db4183f4c

Refactored ThreadPoolDispatcher to reuse code of ExecutorCoroutineDispatcher | 2017-04-18 12:28:35 | f04f51d5b05a0aec7c97acc202d180096a095fbf

equals/hashCode for wrapper CoroutineDispatcher impls | 2017-04-11 10:50:03 | 30dd5c129c493ca7b1a3b2b80437e8a7ec68f3ec

Starting coroutine in UI event handlers without dispatch in UI guide | 2017-04-07 15:06:22 | f724f6e2fe7c20cb48b69cd7b19b2658313231e4

Nicer toString implementations for CommonPool & Unconfined dispatchers | 2017-04-07 07:35:28 | dc9fd1c2d18da2f23d9907148b4674cda6418e49

Few minor docs & build fixes for reactor support | 2017-04-06 19:15:35 | 523516abd2023f8d968d389b32dee713130a9f83

Merge pull request #53 from mkobit/patch-1

Correct typo in coroutines-guide-reactive.md | 2017-04-05 09:41:56 | 7676e2239947273c6cbb4cb77536042bd9f2ce43

Fix repository urls

need to be reverted once bintray will fix jcenter sync issue | 2017-03-23 14:45:39 | 78fd3cb8932410af9beab4effc04bdeea4343732

Merge pull request #42 from jakiejj/master

fix typos in comments to Nio functions | 2017-03-20 07:16:24 | 9ef792fec6775bb5cdb08c84511488f324db3322

fix typos in comments | 2017-03-17 20:48:39 | 4d927c76488b96abaae7ba003f8064ad84b8334e

Typo fixed | 2017-03-14 17:39:50 | 81a5b7144484dcc8ebc89cd98fd9bd8a2d45afbe

startUndispatchedCoroutine is renamed to startCoroutineUndispatched for consistency with coroutine intrinsics | 2017-03-14 16:39:26 | 4638d79097a3d5b0c1b32c1e468ad723cc4b2bd9

Fixed bug with sometimes missing `onComplete` in `publish`, `rxObservable`, and `rxFlowable` builders | 2017-03-13 09:03:35 | d14a3901f365f622d9a7ba96fc00900011c9c009

Scheduler.asCoroutineDispatcher extension for Rx 2.x | 2017-03-10 12:06:01 | a1fe3da17907024afa50a35cbfcc72639d62bf78

not -> no typo fixed | 2017-03-09 09:57:57 | 228d084bfb87f967e216b84029b58649fcbe7472

Executor.toCoroutineDispatcher is renamed to asCoroutineDispatcher | 2017-03-09 09:03:39 | 38b5ea18e36f1a53d4cde27bf3fd21522727cbbb

Fixed dispatching logic of `withTimeout` (removed extra dispatch) | 2017-03-02 21:15:21 | 43d831f61f33262dcb4621069451d1699898d1cb

More links and typos fixed | 2017-03-01 14:21:48 | cc63363ead9d82f4e246a319ca3e0cb9f15e3a14

top-level readme links fixed to produce & co | 2017-02-22 12:04:28 | 40e89f689f89ae643f68c68efc57aebd8f8284ed

Jon.onJoin select clause is implemented, lazy onAwait/onJoin & dispatch fixed | 2017-02-22 11:56:58 | d84dbc2d75927fe8446098a225a3fbb884683bde

startUndispatchedCoroutine utility functions | 2017-02-22 06:53:49 | ee88fbef2d78e4b25f741efffabf4756bff8e7f3

buildChannel deprecation template fixed | 2017-02-20 12:53:30 | de8b9e9b336491ff0dbf107fe35d9efa030d92d3

Merge pull request #31 from gildor/on-completion-deprecation-fix

Job.onCompletion deprecation template fixed | 2017-02-20 12:49:41 | 85923e2de75ed522903cc3d64aef2ad178c1cbf8

Job.onCompletion deprecation template fixed | 2017-02-19 13:26:29 | c8f9ca308abe963cafa5f676410402fc287cfa5a

Delay implementation in Swing, JavaFx, and scheduled executors is fixed to avoid an extra dispatch
CancellableContinuation.resumeUndispatched is introduced to make this efficient implementation possible
Additional documentation for CoroutineDispatcher implementors | 2017-02-10 10:30:38 | a198bad7365a508baf1041993e9a14007f9d5aa3

Doc fixed | 2017-02-10 10:14:35 | 8c8551e7dbea7c2467060c2d3c6aa1c54c721e68

Merge pull request #29 from cbeust/patch-1

Update coroutines-guide.md | 2017-02-07 17:52:01 | 4d821e3901d038f005850b38d1e4954506306383

Merge pull request #28 from erokhins/patch-1

Update 1.1.0-beta-37 to 1.1.0-beta-38 | 2017-02-02 19:24:36 | 40f69cf704e7b31cec9c8a935317d8c173e79623

Added deprecated (with error level) plus operators on Job and CoroutineDispatcher to catch potential problem with their incorrect use at compile time | 2017-02-01 15:43:32 | 79a2868295127b81056f66d644da72db5a40d772

Merge pull request #27 from tairrzayev/readme-fix

Fixes the typo in the coroutines-guide.md | 2017-02-02 06:15:26 | 9d844fa1733f83e5e1b85c3e762a69729d3c5ef2

Dispatchers default behaviour is changed to schedule new coroutine for execution later.
Job.getInactiveCancellationException is introduced.
yield is cancellable while it is waiting to executed.
core tutorial is expanded. | 2017-01-29 18:58:33 | 7cf452eab59cdca570227f071cba2da374f77110

Finer grained control on debugging facilities | 2017-01-24 07:29:53 | aecb9aa1606b79243c8e93221de9713c164ce015

Added context parameter to CoroutineDispatcher methods, implemented Executor.toCoroutineDispatcher | 2017-01-23 13:47:20 | 67891d867da022d608d4589859002f256d9a313e

Fixed initialization of Job with parent (initParentJob), fixed handling on uncaught exceptions in standalone coroutines | 2017-01-20 09:19:52 | 58a7add417403811e822a4f6f7689ae3fd0e2018

Minor: fix version of maven-deploy-plugin, fix pom warnings | 2016-12-21 17:21:30 | c4ad15fc6246b7496d610da7419441020dfe1c56

Merge pull request #6 from hhariri/patch-1

Fixed packaged names | 2016-07-27 07:04:12 | c6993089412fbc491ddeb0a71b57e67bf31e21d6

Fixed packaged names 

On the repo, the package names don't have the suffix -1. | 2016-07-27 06:03:41 | 1abe89716c093c9e010a45a5235da7f9b50eea17

Rebased on the new version of the flatten-flow branch, fixed python script, written readme | 2019-11-25 12:02:35 | 000a3e0af8269baa8bb62bed9d788d249fe0bbb3

small fixes | 2019-11-13 14:56:34 | f54977541d56682bda8eea20c850572bbdb39169

fixed according to the code review | 2019-11-13 14:53:04 | 5c995e5e0d0838a19ec9bdeea0c048e8bcda3ed3

Implement DebugTestBase in DebugProbesTest | 2020-03-13 12:02:40 | 8aaf2f70b26e5d9095c9e6ea121f6daa5247be5b

Make DebugProbes ready to production (#1862)

* Speed-up installed debug probes by splitting global probes lock to RW-lock, guard all state transitions with read lock and all read operations with write lock to guarantee a consistent snapshot
* Prevent IllegalStateException during 'kill -5' command
* Introduce flag to disable creation stacktrace capturing in DebugProbes
* Support proposed changes in JUnit4 rules

Fixes #1379
Fixes #1372 | 2020-03-13 11:13:09 | 4116fbf1dda610d13095e0e23642a66862f56065

Document the fact that dispatch should eventually invoke the given runnable (#1854) | 2020-03-13 11:10:13 | 10fd73e8a1751819280ab4d7e4ba26b89ff57d9f

Leverage polymorphic keys un CoroutineDispatcher and ExecutorCoroutineDispatcher (#1840) | 2020-03-05 20:02:30 | 214f156c7915185b04489c23ad5468cd5266aabb

Temporary workaround bug in K/N 1.3.70 codegen (KT-37061) | 2020-02-26 14:14:10 | 21bb6fb201b12e26d6763519b46881f89914d6fc

Optimize the size of the coroutines library in Android projects (#1282)

* Includes additional R8 rules to disable debugging & stack-trace recovery in optimized
Android builds. Additional savings with AGP 4.0.0-alpha06 (r8-2.0.4-dev) are ~16kb
in uncompressed DEX size.
* Tests are modified to verify that the classes that are supposed to be removed are
indeed removed.
* Cleaner build logic without error-prone "return" in the middle
* Report the size of optimized Android Dex as teamcity metric | 2020-02-14 12:52:10 | bf9509da7a0eff08e489555254d9662f2cc1894f

Fix a race in some tests for JavaRX integration (#1801)

An extremely rare race could happen in any of the tests in
`LeakedExceptionTest` in the following case:
* `withExceptionHandler` runs the block passed to it;
* In one of the last iterations of `repeat`, `select` in `combine`
  happens on both flows at the same time, that is, the block that
  was passed to `rx[Something]` runs in two threads
  simultaneously;
* One of these two threads (thread A) runs anomalously slow;
* The other thread successfully throws an exception;
* This exception is propagated to `catch`, so `collect` is
  finished;
* `repeat` is exited, the block passed to `withExceptionHandler` is
  done executing;
* `withExceptionHandler` sets back the usual exception handler,
  which fails when an exception in JavaRX happens (see
  https://github.com/ReactiveX/RxJava/wiki/What's-different-in-2.0#error-handling);
* Thread A wakes up and throws an exception. This time, it is
  passed not to `handler`, which is made specifically to deal with
  this, but to the default handler.

As a fix, now a special coroutine context passed to `rx[Something]`
ensures that the spawned executions are run in a thread pool that
blocks until all the tasks are done. | 2020-02-13 13:44:49 | 9f4fd70597567dc4477e5d935d06a380edd09eae

Do not request additional worker from 'yield' calls and during post-e… (#1728)

Do not request additional worker from 'yield' calls and during post-execution phase in LimitingDispatcher

Fixes #1704
Fixes #1706 | 2019-12-25 11:16:39 | c526c3fafa0efdb638e99cb30a10cdcfb8e2bc1c

CoroutineScheduler parking strategy rework

    * WorkQueue.trySteal reports not only whether the steal was successful, but also a waiting time unless task becomes stealable
    * CoroutineScheduler.trySteal attempts to steal from all the workers (starting from the random position) per iteration to have deterministic stealing
    * Parking mechanics rework. After unsuccessful findTask, worker immediately adds itself to parking stack, then rescans all the queues to avoid missing tryUnparks and only then parks itself (parking duration depends on WorkQueue.trySteal result), terminating later
    * Excessive spinning and parking is completely eliminated, significantly (x3) reducing CPU-consumption and making CoroutineScheduler on-par with FJP and FTP on Ktor-like workloads
    * Downside of aggressive parking is a cost of slow-path unpark payed by external submitters that can be shown in degraded DispatchersContextSwitchBenchmark. Follow-up commits will fix that problem
    * Retry on tryStealLastScheduled failures to avoid potential starvation
    * Merge available CPU permits with controlState to simplify reasoning about pool state and make all state transitions atomic
    * Get rid of synthetic accessors | 2019-10-01 17:22:56 | f27d176e7a6add3b92f268c413b0ea4d27de35aa

User Class.forName instead of ServiceLoader to instantiate Dispatchers.Main on Android (#1572)

Fixes #1557
Fixes #878
Fixes #1606 | 2019-12-12 09:10:21 | e60ec8e1fa2a55006f67b0e113b17388595bce97

Introduce DebugProbes.isInstalled method | 2019-12-11 16:04:47 | af9a2010611248a16f6c271274028770d5a4f067

Better diagnostic exception message in MissingMainCoroutineDispatcher | 2019-12-10 14:14:46 | 6cb317b500d176aa0d13b3a2f2ca9ead336f6b0c

ContextScope.toString for better debuggability | 2019-12-05 15:52:43 | c02648baee0f490a150bdb645637e0ee940ef7bf

Promote isDispatchNeeded to stable API | 2019-11-26 11:07:53 | 391042f20bbc12b77b33a550b566265346e2a423

Improve documentation

    * Clarifications of CoroutineExceptionHandler execution
    * Clarifications of MainCoroutineDispatcher.immediate
    * Outdated documentation (pointed out by Google AndoidX team) for isDispatchNeeded is rewritten
    *

Fixes #1650
Fixes #1651
Fixes #1634 | 2019-11-25 15:56:24 | 445e026f95392c19e4eb8be17af9ef454d0647e8

Optimize yield via dispatcher.isDispatchNeeded

Also, as it was before, throw UnsupportedOperationException from the
Dispatcher.Unconfined.dispatch method in case some code wraps
the Unconfined dispatcher but fails to delegate isDispatchNeeded
properly. | 2019-11-26 08:33:08 | 69d1d4160154105a7944feeb67f851d676ee7f94

Avoid potential StackOverflow on wrapped UnconfinedDispatcher+yield

See ImmediateYieldTest.testWrappedUnconfinedDispatcherYieldStackOverflow

This commit changes the way Unconfined dispatcher is detected.
Instead of equality check we try to dispatch to the dispatcher with
a specially updated coroutine context that has YieldContext element
that is processed by the Unconfied dispatcher in a special way. | 2019-11-23 15:21:22 | 8f1f252a31a43534dc6dfac8af465c2bc78cb115

Support yield in immediate dispatchers

So yield now checks for "Unconfined" dispatcher instead of
"isDispatchNeeded" and works properly for immediate dispatchers.

Fixes #1474 | 2019-11-20 08:02:46 | 3ab34d808b5aa2c8673754bd43e4879b9d4af8c9

Clarify documentation around Dispatcher.IO parallelism | 2019-11-02 09:40:23 | 9d1146fdc91177320fb22c455086e14da0be008d

Fix ReactorFlow integration bug exposed by TestBase | 2019-10-29 16:48:49 | 1652bb9602a23a6c6a7c445a88f8da9a24f39ef5

Properly choose timeout exception with a recovered stacktrace to provide better debugging experience

Fixes #1625 | 2019-10-22 16:18:22 | 3affb90f51029781fb3384ff2fda51586441d1d3

Eagerly create cancellation exception during Job.cancel call to make stacktrace even shorter

Also, fix stacktrace recovery in select clause | 2019-10-04 19:35:19 | ae57774c1ea253e0272d92c4c064b2b721847989

Change stacktrace recovery contract

    * Stacktraces are no longer recovered in DispatchedTask.run
    * Callers of uCont.resumeWithException are responsible for recovering the stacktrace
    * CancellableContinuation.resumeWithException recovers stacktrace if necessary
    * Properly recover stacktrace in Channel.receive fast-path
    * Properly recover stactraces on Channel.send fast-path
    * Restructure stacktrace recovery tests | 2019-10-03 13:45:49 | 3b2e4377ac14b9c9c4acfc01d9d50a5c9519e9de

Shorten resume call stack

Calls of afterCompletionInternal are pulled up the call stack. This
is very important, since scoped coroutines do "uCont.resumeWith" from
afterCompletionInternal, which makes all the JVM method visible in the
debugger call frames and in exceptions.

Additionally, this allows for some simplification of the JobSupport
code, as a number of methods do not need "mode" parameter anymore.
Moreover, the kludge of MODE_IGNORE is no longer needed and is
dropped.

Make TimeoutCoroutine extends ScopedCoroutines.

Fixes #1574 | 2019-09-25 21:14:05 | ff9060c5f0054940e9204049ba30fd6797899ca0

Fix race in channel select/cancel

This bug was introduced by PR #1524. It was reproducing when there
is a regular "send" operation on one side of a channel and
"select { onReceive }" on another side of the channel and the
"send" coroutine gets cancelled. The problem is that
SendElement.tryResumeSend implementation was calling finishPrepare
before it has successfully resumed continuation, so if that
continuation was already cancelled, the code in "finishPrepare" had
already stored the wrong affected node which it would later try to
call "completeResume" on.

This patch also adds hexAddress to the debug toString method of
all internal node classes in channel implementation.

Fixes #1588 | 2019-10-02 11:42:30 | d9d35747cfa336108734a47f7aac1aa05410389a

Fix race condition in pair select

This bug was introduced by #1524. The crux of problem is that
TryOffer/PollDesc.onPrepare method is no longer allowed to update
fields in these classes (like "resumeToken" and "pollResult") after call
to tryResumeSend/Receive method, because the latter will complete
the ongoing atomic operation and helper method might find it complete
and try reading "resumeToken" which was not initialized yet.

This change removes "pollResult" field which was not really needed
("result.pollResult" field is used) and removes "resumeToken" by
exploiting the fact that current implementation of
CancellableContinuationImpl does not need a token anymore. However,
CancellableContinuation.tryResume/completeResume ABI is left intact,
because it is used by 3rd party code.

This fix lead to overall simplification of the code. A number of fields
and an auxiliary IdempotentTokenValue class are removed, tokens used to
indicate various results are consolidated, so that resume success
is now consistently indicated by a single RESUME_TOKEN symbol.

Fixes #1561 | 2019-09-22 18:13:12 | 2f8bff1b0972defc473dd8c857600db481f013a3

Introduce reusable cancellable continuations for hot loops with channels (#1534)


  * Average performance improvement is around 25%
  * API is internal and targeted to specific usage
  * DispatchedTask and DispatchedContinuation are extracted to separate files for better readability and maintainability
  * Ensure ConsumeAsFlow does not retain reference to the last element of the flow with test | 2019-09-25 15:02:24 | 946e5789fa982e397d49b788d308afdc5d44ccce

Fix StackOverflowException with select expressions

* onSend/onReceive clauses on the same channel: Instead of
  StackOverflowError we throw IllegalStateException and leave
  the channel in the original state.
* Fix SOE in select with "opposite channels" stress-test. The fix is
  based on the sequential numbering of atomic select operation.
  Deadlock is detected and the operation with the lower sequential
  number is aborted and restarted (with a larger number).

Fixes #504
Fixes #1411 | 2019-08-30 10:01:19 | 3dbe82b44e6af89719c6d331400aed58de9e5521

Install debug probes in CoroutinesTimeout constructor to capture coroutines launched from within a test constructor

Fixes #1542 | 2019-09-17 14:26:45 | fcc004c2a03be7c7389a3a95b7a805058fb936e5

Eagerly create coroutine for lazily-started coroutine builders in order to trigger DebugProbes.probeCoroutineCreated

Fixes #1544 | 2019-09-17 15:32:43 | 858094ee4262ab93a8ec9a1ff24e6df4bc9a8ed4

Do not aggregate all coroutine info into a single string before dumping it to the out in DebugProbes.dumpCoroutines

Previously it was done intentionally to reduce synchronization window of DebugProbesImpl, but still have a consistent view of the world and to avoid interleaving with other usages of out.

Apparently, applications with a significant amount of coroutines (e.g. Ktor) may spend a lot of time or even experience OOM in DebugProbes.dumpCoroutines. To make it usable in such applications, we dump coroutines incrementally without releasing a lock in DebugProbesImpl (thus significantly increasing synchronization window) while holding a lock on out to still have a continuous dump.

Fixes #1535 | 2019-09-16 17:21:33 | 3826ae58bc3651a6d76be256d51b866947581b60

Improve docs / fix grammar | 2019-08-05 13:32:34 | a7afd4657de916978898570d0baf86c0d73906f5

Fixed site publication in build script

:example-frontend-js:bundle task is fixed. | 2019-09-04 15:57:21 | a70022d6e7d9aa5d8fe27a2c46e987a2e8b85c21

Fix of a bug in the semaphore (#1477)

* Add a failing test for a semaphore

This test consistently fails for the current implementation. It
attempts to cause the following state: after `job2` increments
`availablePermits` but before it wakes up the acquirer in the
queue, the acquirer is cancelled. Then, regardless of whether
`RESUMED` or `CANCELLED` was written first, another cell in the
queue is marked to be resumed. However, this is incorrect: on
cancellation, the acquirer incremented the number of available
permits once more, making it `1`; thus, at the same time there
exist two permits for acquiring the mutex. At the next loop
iteration, a new acquirer tries to claim ownership of the mutex and
succeeds because it goes to the thread queue and sees its cell as
`RESUMED`. Thus, two entities own a mutex at the same time.

* Fix a bug in semaphore implementation

The fix works as follows: if `availablePermits` is negative, its
absolute value denotes the logical length of the thread queue.
Increasing its value if it was negative means that this thread
promises to wake exactly one thread, and if its positive, returns
one permit to the semaphore itself.

Before, the error was in that a queue could be of negative length:
if it consisted of only `N` cells, and `N` resume queries arrived,
cancelling any threads would mean that there are more wakers then
there are sleepers, which breaks the invariants of the semaphore.
Thus, if on cancellation the acquirer detects that it leaves the
queue empty in the presence of resumers, it simply transfers the
semaphore acquisition permit to the semaphore itself, because it
knows that it, in a sense, owns it already: there is a thread that
is bound to resume this cell. | 2019-09-03 13:43:23 | 9a62f27d1fe53552b0838156c17adc3b68dcc585

Repaired some of ListenableFuture.kt's cancellation corner cases.

This fixes:
  - Cancellation without an untrapped CancellationException propagating
    through a Callback; isCancelled() is the correct way to check for
    cancellation
  - Bidirectional propagation of cancellation through
    `asListenableFuture()`
  - The cause getting lost in the `asListenableFuture()` future  when
    cancelling its `Deferred` parent with a cause

This also:
  - Extensively documents the package and the contracts created by the
    promise-creating extension methods and `future()`
  - Uses `getUninterruptibly()` for speed
  - Uses `AbstractFuture` to make as certain as possible that
    `Future.cancel()` will return `true` at most once
  - Should clear up rare spooky race conditions around
    cancellation/interruption in hybrid Coroutines/Guava Futures
    codebases

There are probably a few more interesting corner cases hiding in here,
but this should be a good start improving the correctness of `.guava`'s
adapters.

This is a squash commit of kotlin/pr/1347, rebased on develop:

- Incorporated first-round feedback.

- Merged CancellationToCoroutine into ListenableFutureCoroutine to save an
allocation.

- Documented and tested for null completion of asDeferred()'s parent
Future.

- Renamed a cancellation test case for clarity of purpose.

- Split asDeferred() documentation between KDoc/details

- Implemented InternalFutures faster-fast path. Documented. | 2019-07-16 20:19:17 | 57cc36454da6851ecd2a00abe7cfd6ee6e06928f

flow: fix recursion in combineTransform<T1, T2, R>() | 2019-08-23 14:21:37 | 1f5ab53f7c7259fee1d28994b6402f40669f8a52

Introduce CoroutineDispatcher.asExecutor() extension (#1457)


Fixes #1450 | 2019-08-22 12:20:38 | bcf4a8cba083e5650b1c63a05da481f1b61c3e75

Add skip_snapshot_checks flag for snapshot train debuggability | 2019-08-21 14:08:34 | 6ca6ed5af208f72d443f747b7953c073acc4624d

Merge branch 'master' into develop

# Conflicts:
#	docs/coroutine-context-and-dispatchers.md | 2019-08-09 15:03:25 | a6da28e45948a4197fa3e3b80aa29bcee1f042f0

Renaming switchMap to flatMapLatest to better reflect its semantics and to have a consistent and meaningful naming scheme for the rest of the 'latest' operators

    * Make flatMapLatest pure, do not leak cancellation behaviour to downstream
    * Make *latest buffered by default to amortize constant re-dispatch cost
    * Introducing transformLatest
    * Introducing mapLatest

Fixes #1335 | 2019-07-28 18:59:25 | 3a958845a7f091fc9f3218aae20abed17c9e57be

Fully copy CoroutineInfo for DebugProbes.dumpCoroutinesInfo, it is re… (#1368)

* Fully copy CoroutineInfo for DebugProbes.dumpCoroutinesInfo, it is required for IDEA integration (field is left as internal deliberately)
* Make CoroutineInfo non-data class | 2019-08-09 14:36:25 | 0172998c5df4dc219c17f03d03502a42998f535e

Get rid of NonRecoverableThrowable, mention way to opt-out stacktrace… (#1420)

Get rid of NonRecoverableThrowable, mention way to opt-out stacktrace recovery in debugging.md | 2019-08-09 14:32:34 | 897f02e18a8538b53f1eeb6157a1c0cff0b65476

coroutine-context-and-dispatchers.md: Improve article usage, fix typos, reword phrases for better readability | 2019-08-07 15:27:21 | 28241ebd08977fc323d41366ed0c6705f9285095

Use setTimeout-based dispatcher when process is not available on the … (#1409)

* Use setTimeout-based dispatcher when process is not available on the target runtime

Fixes #1404 | 2019-08-05 14:59:11 | 2fc234cb6d24ee3f65a7aa35e4aeea6e506315d2

Update Guava to the latest version 28.0

This fixes vulnerability CVE-2018-10237
See https://ossindex.sonatype.org/vuln/24585a7f-eb6b-4d8d-a2a9-a6f16cc7c1d0 | 2019-08-05 11:58:23 | db95996ceb2758dfc7ccfe9ac805dace2e89128f

Flow.kt: fix typos and rephrase some expressions for better readability (#1408) | 2019-08-05 11:12:26 | 41428a3673f84c40766c9f65421f1649cffb328d

Better docs on coroutines debugging property

* Mention in the guide that `-ea` turns it on.
* Give a link to DEBUG_PROPERTY_NAME instead of newCoroutineContext.
  The later does not have details on its page anymore, since
  the details were only mentioned in JVM version.
* Move description in of debugging facilities to DEBUG_PROPERTY_NAME
  in the code. | 2019-07-23 13:33:07 | d78084b32295c923e2b8312a24729281f19517ca

Properly specify transitive dependencies for kotlinx-coroutines-debug | 2019-07-19 11:16:14 | 2f5036365b035912ce3efd25c307f70479bd9908

Move event loop infrastructure to common code

This makes code of EventLoop (including its task queue impl) shared
between JVM and Native making support and further fixes easier.
It it not actually used in JS and DCE should remove it. | 2019-07-02 12:30:47 | 98a970559601222de378d89920a8f4710d6baa31

Recover stacktraces for no-dispatched continuations, so recovery works in 'suspend fun main' cases to further improve user experience

Fixes #1328 | 2019-07-16 12:36:59 | f22604b01788784fd06b5f01554dc4800e7ff183

Rewrite assertions so that they are checked only in debug mode

* Make sure assertions are absent on native and JS
* Only print full toString for Job in debug mode | 2019-07-02 13:21:22 | 583d39dd4fe1d8f488df3e384901aa19f95166e2

Decouple asFlow from batchSize and move it to buffer instead, promote… (#1279)

* Optimize Publisher.asFlow and fix conflation
* Use channel.receiveOrNull instead of for loop iteration
  (it is more efficient)
* Calling Publisher.asFlow().produceIn(...) uses a single channel
  and is implemented via Publisher.openSubscription() | 2019-06-26 09:09:32 | 502610e7af760a73ea974f9c7cb75ec26a14d167

Unmute debugger test that were broken in 1.3.31, increase debug test timeout (slow CI), make shutdown more graceful by reducing timeout per thread (slow CI + unfortunate timings) | 2019-06-24 17:53:53 | bb97ffbb069774f2ba6ceb8e7dc4c6a2263ef9ff

Update "Shared mutable state and concurrency" guide with best practices

* Properly use structured concurrency in the example code.
* Also remove a special not on <= 2 core CPU, which is no longer needed
because default dispatcher has always at least two CPUs.

Fixed #1241 | 2019-06-01 11:18:42 | d94652feec64040c2c77af630fc4df30032e0efc

Enable R8 optimization of Dispatchers.Main loading

The developer still has to disable the FastServiceLoader manually
if they're using R8.

R8 is then able to optimize away the ServiceLoader and reflection
entirely, resulting in direct class instantiation and no extra I/O
on calling thread.

Fixes #1231 | 2019-05-30 12:17:51 | b9b7d828b18b2462817b6ed0c1a56233a4b6fcf4

Use identity hash code on K/N for debug strings

Fixes #1237 | 2019-05-31 11:39:08 | a3f150e66f7c47e0a0cefed4d9aa03199dff9e7f

Amortize the cost of coroutine dispatch using message queue in all JS dispatchers.
Use Promise.resolve and process.nextTick as dispatch mechanism for cold starts | 2019-03-01 11:25:23 | b7e1499b966175782cf2a5045c5bd3bb95a63b8c

Documentation improvements (#1229)

* Improve MainCoroutineDispatcher.immediate documentation
* Remove obsolete readme and package descriptions
* Clarify possible replacement of onCompletion parameter in produce
* Add paragraph about parent cancellation to async (Mention structured concurrency, but do not explain it there as the term should be easily googlable).

Fixes #1219
Fixes #994 
Fixes #787 | 2019-05-31 10:16:19 | c81dc91159dd1e33060ead8eeccc78df94c4649d

New flow builder: channelFlow (and its alias callbackFlow) and supple… (#1214)

New flow builder: channelFlow (and its alias callbackFlow) and supplementary ProducerScope.await method

Rationale:

    * Can be used in different context without breaking context preservation
    * Can be used to build concurrent operators such as merge
    * Can be used to integrate with callbacks
    * Is less error-prone than flowViaChannel because requires explicit await() call

Partially fixes #1210 | 2019-05-27 21:37:46 | b08d61c6c25d1a030ef37b6788b9ed3922520c85

Improve coroutine exception handling logic

  * Wrap exceptions into CE if parent cancels its child. This is possible because now we can be sure that no one is invoking `cancel(Throwable)`, thus if parent cancels its children, an exception is definitely handled.
  * Now exception is handled only once

First part of fix for #689 | 2019-05-17 08:55:17 | b0f6e05822f225afba43ed6e728669fe320146d8

Fix overflow bug in Flow.drop | 2019-05-20 07:45:03 | e35637a9faabb021d7a5efdc5509910cb499cd7a

Fixed Dispatcher docs

* Fixed typos
* Added reference to kotlinx-coroutines-test for testing `Main` dispatcher | 2019-04-27 19:32:57 | a2499a3ffe7522b8881a41ada45ce1779494be51

Ensure that there are no references to atomicfu in classes

* Updated to 0.12.7 version of atmoicfu with fixes.
* Added test that that is no references to atomicfu in any of the
  resulting class files.

Fixes #1155 | 2019-05-02 23:56:40 | 485eab1611433e49bd1d7c4a302b4825daf0d2e9

Knit: fix handling of backquote when making anchor reference | 2019-05-06 23:46:46 | 80039323d7ef284c3c4b851a6f3a91c46b3d7971

Knit: fix handling of backquote when making anchor reference | 2019-05-06 23:46:46 | b81f5f0ad73bc163a01a2ec88e2cb2e3d61927e1

Fixes kotlin-coroutines-test TestCoroutineDispatcher docs

Fixes #1163 | 2019-04-30 21:27:20 | 9614536ff093c99fc7febd5e31547ede8c8ceb5d

fix: broken anchors | 2019-05-06 07:26:16 | e3030e36945d79d7e54f0decaeef099a1720efcd

kotlinx-coroutines-test cleanup

    * Yield support in test dispatcher
    * Allow partial override of coroutine context
    * Code style fixes | 2019-04-25 21:07:56 | 9e5f9ab46506369f759d72e1195d9d7eb3ef1116

Flow operators: (#1132)

Flow operators:

    * switchMap
    * debounce
    * sample
    * Update RxJava version to 2.2.8

Partially fixes #1107 | 2019-04-24 14:14:03 | fe820bad2dc0743281f6ad130824114507a0a00a

AtomicFu version 0.12.5

This should really fix processing of class files

Fixes #1116
Fixes #1064 | 2019-04-22 18:05:50 | 26a14eef3c6fdf9480719dc1bc25b249b58bcb87

Fix atomicfu post-processing and dependencies

* Update to atomicfu 0.12.4, which fixes plugin operation with
  kotlin-multiplatform
* Remove explicit dependencies (plugins adds them automatically)

Fixes #1116
Fixes #1064 | 2019-04-19 15:51:05 | e1ac2e5c193654469468a04e4cadced3e3040e63

Add a period in the "You can get full code here" blocks and other small fixes | 2019-04-21 07:51:25 | 69c26dfbcefc24c66aadc586f9b5129894516bee

Knitted links and fixed minor style issues in test docs readme | 2019-04-21 08:21:59 | 445e798c3406c182337636026188fefd9f1cc950

Add README.md description of runBlockingTest, TestCoroutineContext, TestCoroutineDispatcher, TestCoroutineExceptionHandler. | 2019-04-21 01:10:09 | c0a8d1c078b6c3de49e3f6a4f77f2c713f47c7ac

TestCoroutineDispatcher code style cleanup and todos

* Kotlin libraries code style: explicit visibility and other style-issues
* DelayController.currentTime() is val
* Using atomicfu in place of AtomicXxx classes
* Added version to ExperimentCoroutineApi annotations
* Some todos are added for future consideration
* Fixed long overflows on delay (clamp) and added test
* License headers added to files
* Tests moved to an appropriate package
* Additional ordering tests using TestBase "expect" infrastructure | 2019-04-20 15:12:08 | d76456f1b6a92868e9f2f01309167003c94c66ca

fix typo: Coroutine"s"Context | 2019-04-17 08:58:42 | 43983505033a67719b0621572b868fc55f492016

Rework purity concept:

   * Purity is a way too polluted word and it is hard to tell what it means in Flow
   * Rename "purity" to "context preservation"
   * Prohibit changing the context, ignore only Job and CoroutineId (for debug mode) in SafeCollector
   * Reword documentation, add more samples
   * Add explanation for deprecated Rx-like methods | 2019-04-09 16:43:11 | d3cc25ff32a80de93ad5eaa912c8b54036c0f978

Unmute test that was failing due to JS BE bug | 2019-03-25 16:21:40 | 0d69e1353d9fcd5867fe74e0912d3f36dc7d8ea8

Merge pull request #1023 from Kotlin/debugger-sm-bypass

Improve stacktrace merge heuristic: skip state machine meaningless fr… | 2019-03-22 15:02:32 | 4ebc1306dd6e0a5929a9044bd65ff92edfeac8e0

Merge branch 'develop' into debugger-sm-bypass

# Conflicts:
#	kotlinx-coroutines-core/common/src/Timeout.kt | 2019-03-22 14:36:33 | 1ea4da4e510f68cb9311b140d2c2e13e8acefe6b

Rename CoroutineState to CoroutineInfo and improve its API

  * Rename jobOrNull to job
  * Replace coroutine with its context
  * Add check-and-act on isInstalled flag into synchronized blocks in order to avoid spurious memory leaks during uninstall
  * Replace WeakHashMap with Set to simplify debug probes | 2019-03-05 15:43:13 | 2496dc256712eb3bb282d3291cedc1497a09cdc8

fix documentation typo | 2019-03-14 13:49:36 | 325b0ad1ee98450e2598e2c0738a398e7b23d959

Add test about threading for immediate dispatch. | 2019-03-14 23:47:26 | a69f73613977bda2c25523cfcae93d6f74bd9cc0

Rename DispatchException to CoroutinesInternalError and make it an Error to better reflect its semantics | 2019-03-07 12:15:40 | 132c1e3f029610208607dcac4d55ed05f62d0642

Get rid of quadratic complexity during stack unrolling in debug agent in 1.3.30 | 2019-03-05 15:26:09 | e35baa43d379e9a7ee3eadc392665dc011268525

Make JobCancellationException copyable in debug mode

This simplifies trouble-shooting of "what caused cancellation", as you
can print out exception and see its recovered stack trace. | 2019-03-04 19:20:25 | d293639980d7a6141394dc8174180f221daa4787

Add operator invoke for CoroutineDispatcher | 2019-02-11 13:21:44 | 57540d452ef82207f14c4235ee690a4323a343fa

Hide cancel(Throwable), introduce cancel(CancellationException)

Job/ReceiveChannel/BroadcastChannel.cancel(Throwable) is now hidden and
cannot be invoked from a newly compiled code. This function had broken
semantics when used with an arbitrary exception. A safe replacement
is available in the form of cancel(CancellationException) where
CancellationException can be used to supply additional information
for debugging purposes.

Fixes #975 | 2019-03-01 09:08:43 | 0aad8f1274c4be7f02ac8f361eb0685d4b438243

Improve CoroutineDispatcher documentation | 2019-02-27 11:19:21 | 08f8214ddbcdbf0becc2b5264caf29080f04576f

Promote Dispatchers.Unconfined to stable API | 2019-02-27 10:16:00 | 9863de1401a90de61307c1ade952ebd7ac65a88a

Promote MainCoroutineDispatcher.immediate to stable API | 2019-02-27 10:02:03 | 4fc4fd555f784775360c464e178d7662291f5fba

Cancellation in consumeEach should dispose Rx Observable

Fixed bugs in MaybeSource/ObservableSource.consumeEach implementation
so that observable is disposed on cancellation.

Also optimized implementation of bridge function to avoid extra dispose
calls if possible (this is permissible by specification, though)

Fixes #1008 | 2019-02-26 16:03:24 | ae8a8743dd37a442c7882a04d1da0de367671ccd

Replace UI with Dispatchers.Main in CoroutineScope documentation

Fixes #803 | 2019-02-27 14:22:29 | b37c296f03ee38cd5cdf5091fa67a010c6a3f6d3

API Cleanup based on review

- removed asyncTest
- added pauseDispatcher(), pausDispatcher(block), and resumeDispatcher() API to delayController
- removed dispatchImmediately (the name was fairly opaque in an actual test case)
- added exception handling to runBlockingTest | 2019-02-12 02:46:06 | 8328a39b39d60fe4e44b6e1e5796d37ab02cbbae

Update coroutine test dispatcher to use structured concurrency. | 2019-02-11 23:40:52 | 9a8842956015a018ee4fa37631052fac82553d36

Make SupervisorCoroutine implement ScopeCoroutine

* Implement ScopeCoroutine in SupervisorCoroutine
* Do not indent scoped coroutines in debug strings

Fixes #915
Fixes #916 | 2019-02-20 15:31:02 | 8d506b3757777664e007b1287ce3c4cb943f4ae5

CoroutinesTimeout debug rule for JUnit 4 (#991)


Fixes #938 | 2019-02-20 14:00:57 | 2bdd4605e797a88019565938cf4a4daca92593a5

Reknit after fixing indentation in code samples | 2019-02-20 10:31:38 | 3785348e32e7180efe86862bc84da14d3631a98d

Update named arguments referenced issue

The issue previously reference was marked as fixed for one of the two problems it was about,
and a new one has been created for the remaining issue that is relevant here. | 2019-02-19 15:17:56 | 919284b159fec82ef2b6f4da9af5f88248e0713a

Obtain real stacktrace of running coroutines in debug agent

  * Capture thread of coroutine when it's transited to running state
  * During dump retrieve the stacktrace of captured thread for running coroutines and merge it with metadata-based stacktrace

Fixes #997 | 2019-02-20 08:43:23 | f18878f632dd28ad8ff847eb4f95e9ed50f373bb

Check that worker thread belongs to the same scheduler in dispatchers.shutdown

Fixes #990 | 2019-02-19 16:01:48 | 703a286e8b55d353b4ebc84320710562d627c96b

Add section about Android in debug agent readme | 2019-02-01 15:13:39 | a68376ceea89bc3599203a4c36e81cd177fc37cd

Additional documentation section about debug mode and stacktrace recovery.

Not included in a guide intentionally | 2019-02-01 11:54:06 | 418ba80a7bb0b8661823fbb325b7edac526ab7db

Call initCause during reflective exception copy in runCatching block to avoid DispatchException when initCause throws

Fixes #933 | 2019-01-15 12:18:43 | 3e4d808200e990e4b5c7e4755b23a5314fdb662a

Move debug example to a proper package | 2019-01-29 09:41:02 | c055f025f4fd3d3dc6a4ceecb798091b31f986e9

Migration to new multiplatorm plugin (#947)

Migration to a new multiplatform plugin
  
  * kotlinx-coroutines-core-[common|js|native] are merged into one core module with multiple source sets
  * Folder structure and readme are restructured
  * Publication process is patched to preserve backward compatibility with artifact names | 2019-01-28 08:34:24 | e50a0fa78aae052e128e8b17666e081e4dfc78be

Update CHM in test to containsKey for KT-18053 fix in 1.3.20 | 2019-01-23 14:49:17 | a672d5f58040f9a14661b157e085c63a7c8b2ff7

Replace old UI dispatcher name with Dispatchers.Main | 2018-12-31 13:52:33 | 8c071247dbe5928ebf5138471c1ac905c5de4018

Update coroutines-guide-ui.md

[Update]
- typo: what you might want to express here is `JavaScript event dispatch thread ` | 2019-01-08 16:01:55 | 66f0123b5fe98f861b46ef1400c8b11bc40c2ace

More idiomatic and readable example for coroutines debug module readme

* Idiomatically use suspend functions
* Idiomatic parallal decomposition with coroutineContext/async
* No GlobalScope
* Use less vertical space & more concise code to aid readability
* Link to full code file (in tests) | 2018-12-22 15:40:39 | b65dc7fe0f75b7dc76e84205c3b57c0aff09c269

Update CHM in test to containsKey for KT-18053 fix in 1.3.20 | 2018-12-22 13:38:36 | 4b60d013508c865dd8430f334e89481d93893ab1

EventLoop integration and reuse for runBlocking and Unconfined dispatchers (#889)

EventLoop integration and reuse for runBlocking and Unconfined dispatchers

* Event loop that is created by runBlocking or by Unconfined dispatcher
  is reused across the same thread to prevent blocking of the loop
* Semantics of runBlocking and Unconfined are fully retained
* DefaultExecutor also registers itself as running event loop and thus
  cannot be blocked by runBlocking
* Consolidates thread-local handling for native
* Also fixes thread-local memory leak on JVM (does not use custom class)
* Restore BlockingEventLoop class name for runBlocking event loop impl
* Internal API for custom waiting loops to be used by kotlinx-io

Fixes #860
Fixes #850 | 2018-12-21 13:41:39 | 51738243c980165ad4fb426105baf6e00d02f87b

Dokka links fixed | 2018-12-18 13:26:58 | 89d43afab3f1090a25697c1e8cebd7faac6612c1

Debug improvements (#900)

Debug improvements

* Rename printHierarchy to printJob and hierarchyToString to jobToString, introduce corresponding methods for scope to simplify scopes debugging
* Remove CoroutineState.job in favor of CoroutineState.jobOrNull
* Use runCatching in Continuation.toDebugString to avoid crashes on some Androids with R8 issue

Addresses #858 | 2018-12-18 09:47:50 | 115a13933adbce880a72c1653b7be94eba566202

Ignore exception on cancel/fail race in CancellableContinuation

There seems to be no other way to satisfactory fix the problem of
a race between cancellation on CancellationContinuation and
concurrent failure of the corresponding background process in a
way the distinguishes "failure from cancellation attempt" from
a "true failure" without placing undue burden on anyone who is
implementing `await()` extension function for various future types.

- Added testTimeoutCancellationFailRace that works as a perfect litmus
  test; being allowed to run for a while it reliably detects various
  problems in alternative approaches.
- Optimized CancellableContinuationImpl; merged its code with
  AbstractContinuation class that is not needed as a separate
  class and removed.
- Deprecated and hidden CancellableContinuation.initCancellability();
  it is now always invoked after the end of the block that was
  passed to suspendCancellableCoroutine.
- Deprecated `holdCancellability` parameter to an internal
  suspendAtomicCancellableCoroutine function.

Fixes #892
Fixes #830 | 2018-12-15 11:12:47 | 876e9bab95d34f311be030a0706497564f96d95a

Introduce test module with testable main dispatcher (#749)

Introduce kotlinx-coroutines-test module with API to set Dispatchers.Main 

  * Dispatchers.setMain and Dispatchers.resetMain extensions
  * Use real factory in HandlerDispatcher instead of using initialized-once statics (prevent ExceptionInInitializerError)
  * Improve MissingCoroutineDispatcher diagnostic
  * Do not cache failed results in test dispatcher to allow reusing it between tests 
  * Deprecate HandlerDispatcher.Main (was accessible only fom Java API)

Fixes #746
Fixed #810 | 2018-12-17 16:49:12 | 4327b2120558c0e232b522b32b3427dc2ad02bf5

fix small typo of async method | 2018-12-16 07:09:02 | 054fcc2b68f9d9933981d65c485af88dba8f89d6

After merge fix: resolve clashes between type alias CoroutineStackFrame and jvm.internal.CoroutineStackFrame | 2018-12-13 09:57:37 | cd162d356e7dbb8a6ed8e02ceae0133af2df95b5

Merge pull request #876 from Kotlin/debug-agent

Coroutines debug agent

Fixes #772 | 2018-12-13 09:39:45 | a5a7cdb86a10d6fcda61c2b9fc55963b86ca8947

Repackage byte-buddy along with debug agent (so it shouldn't be a dependency of target process), use shadow plugin for that to avoid clashes with other byte-buddy versions and publish shadow jar instead of regular one for debug module | 2018-12-13 08:58:29 | 3781a821a11a64670b5a3ffa3c276f1533332ad7

Reknit after docs fix | 2018-12-13 08:58:24 | 75f634c56e3655d475bd93c4d7a5fc7242744d69

Speedup linerizability tests, make conflation part of helpClose (fixes nightly stress failure) | 2018-11-19 16:31:51 | b733f7d0cfd3c8fcca234d7d49f4350dfeb36264

Debug agent cleanup

  * Readme
  * Do not fail on Windows during signal handler installation
  * Do not warn about missing artificial stackframe | 2018-12-12 16:08:32 | 7a6fd89c04b3ee972136c0648700f8500dfb0f23

Rephrase default dispatcher documentation | 2018-12-12 10:36:54 | e06585a482f0f94d2819c24af8ac42582d38af6a

Get rid of top level 'debug' folder | 2018-12-11 16:49:07 | 7520c978464e2f3b1cc075dea36a9f11088e2d85

Unreachable code fix | 2018-12-11 16:44:49 | f64bcde03b4c5e46d63f19d5dcb3b1738c59eefa

Debug agent code style | 2018-12-11 16:20:39 | 12695b763715338149e0bcaa3633a6e0296fc361

Code style in test code fixed | 2018-12-10 13:11:06 | 8e9e4d1706083dd5fb6fcc4c89d2a65caa33914c

Debug agent optimizations

  * Do not store creation stacktrace of the coroutine, recover it from ArtificialStackFrame
  * Reduce lock window where possible to avoid contention
  * Avoid stacktrace copying where possible | 2018-12-10 17:19:35 | 5a80d2a0b0c52121a0788acc036030812fea9f59

Debug agent to track alive coroutines

  * Can be installed dynamically or from command line
  * Captures coroutine creation stacktrace and stores it in completion, automatically enhancing stacktrace recovery mechanism
  * Allows to dump and introspect all active coroutines
  * Allows to dump Job hierarchy
  * When installed from command line, dumps all coroutines on kill -5
  * Probe support in undispatched coroutines | 2018-12-10 08:41:00 | c7239ac4915df344add7386c8aa19038499f5e4b

Scoped builders and exception stacktraces synergy

  * Recover stacktraces via both fast and slow paths in scoped builders
  * Merge stracktraces of nested scoped builders, eliminate common prefix so it looks like a flat profile
  * Optimize stacktrace-related machinery
  * Copy meaningful part of original exception into recovered one, rename "Current coroutine stacktrace" to "Coroutien boundary"
  * Rename Exception.kt to StackTraceRecovery.kt to avoid name clash with another Exception.kt | 2018-11-27 15:13:47 | 1032f5801a9719fbe67325daec944104eff793a9

Initialize JavaFx more accurately, do not leave dispatcher in uninitialized state in case of unexpected failure

Fixes #816 | 2018-11-27 12:57:16 | 69a2d9273288dec1e29a81f2c314ccf23ae99093

Fix: default dispatcher doesn't work with jsdom | 2018-11-06 16:46:00 | bb0ad4ae2772c9c4af0e3b44b129423cf5ae0c58

Sanitize class names received from Kotlin debug metadata | 2018-11-12 17:04:35 | 25a886e9ee0047f755e8d32f496ced3760e7ec64

Debug optimizations:

  * Extract call to suspendCoroutineUninterceptedOrReturn behind recoverability check
  * Cache exceptions constructors into WeakHashMap in order to avoid expensive ctor lookup | 2018-11-02 17:06:14 | e3b80d9c7198728a5566cb2c74da61ee115e61d6

Basic exception stacktrace recovery mechanism

  * Implement CoroutineStackFrame in CancellableContinuationImpl, DispatchedContinuation and ScopeCoroutine
  * On coroutine resumption try to reflectively instantiate exception instance of the same type, but with augmented stacktrace
  * Recover stacktrace by walking over CoroutineStackFrame
  * Recover stacktrace on fast-path exceptions without CoroutineStackFrame walking to provide more context to an exception
  * Unwrap exceptions when doing aggregation in JobSupport
  * Add kill-switch to disable stacktrace recovery, introduce method to recover stacktrace on the exceptional fast-path
  * Add `suspendCoroutineOrReturn` on exceptional fast-path in await in order to provide "real" stacktrace

Design rationale:
All recovery of *suspended* continuations takes place in Dispatched.kt file, the only place where all calls to "resume*" ends up, so we don't have to remember about stacktrace recovery in every primitive we are implementing. But to provide more accurate stacktraces we *have to* recover it on every fast-path for better debuggability.

Fixes #493 | 2018-11-02 12:55:20 | 675c30c4b96533a374ae36b144dbe6b26634b97b

Merge pull request #791 from Kotlin/undispatched-cancellation

Use final Job state in undispatched coroutine completion | 2018-11-06 12:55:53 | 666ea6e554fa52ea03504ab618543ca26e20ce3b

Add ExperimentalCoroutineDispatcher to binary compatibility check, restore binary compatibility in Ktor | 2018-11-06 11:03:39 | e3ab2a692a6da18ee9213a124a4c111235046c75

Add scheduler name to ExperimentalCoroutineDispatcher

Fixes #661 | 2018-10-31 13:15:35 | 92327322442d4c8be225067ff6e16c6827f8b38e

fix link | 2018-11-05 16:56:31 | 64f2b2006b5a7cf2a760ec976dd28e988ce122d0

fixed typo | 2018-11-05 14:28:47 | ace91872cc56113fa10e844069f46eb3bbec9c95

Use final Job state in undispatched coroutine completion

  * When using in-place coroutine builders, startUndispatchedOrReturn will return block's final value on fast-path. This is not correct because if any of the children had failed, whether or not exception is thrown depend only on child timings. Moreover, in the face of such race exception may be ignored if scope owner wasn't cancelled or is missing.
  * Introduce special hack for withTimeout and withTimeoutOrNull to ignore TimeoutCancellationException on the fast path
  * withContext, coroutineScope, supervisorScope, withTimeout and withTimeoutOrNull are affected and now check cancellation on fast-path | 2018-11-04 12:32:34 | 78832e3bb38560f4c4d55cdba436bf7bc9b761ca

SchedulerTask is now an abstract class with optimizations for jvm

* It removes the need for a separate SchedulerTaskBase
* submissionTime and taskContext are marked as @JvmField
* DispatchedTask is also an abstract class
* resumeMode is marked as @JvmField | 2018-11-01 21:10:39 | aa374a95dc7e6df4fd6458fe6d8abe95e2953fce

Scheduler: capture TaskContext for afterTask before running it

This is not strictly needed, since the reusable Task instances
(DispatchedTask) should be always reused in the same context, but
this makes the code more resilient to future changes. | 2018-10-22 02:31:23 | e64d9b706cb5180260e4d95fa3a990449163da51

Avoid allocation of CoroutineScheduler task object

* DispatchedContinuation and CancellableContinuationImpl have all
  the necessarily field to be scheduled | 2018-10-21 17:08:49 | 16e20347dc5557063742ea8a06dbe5162a211c25

Publish: Comments style fixed | 2018-10-26 20:02:08 | f18b9f580faff47af054cb6c0942cd15ccc7675d

Fixed exception handling for publish builder

* Test that ensures proper parent cancellation
* Stress test to ensure that exception in publisher always handled
  by parent
* Also fixed race between request & signal completion that did not
  reproduce before | 2018-10-23 05:28:12 | ac848e872da94e01ed60a6bfecbfe3926229f44f

Reactive streams integration conformance to TCK verified & fixed

* Throw NPE on null subscriber
* Throw IAE when requested n <= 0 elements
* Do not sent any notification after cancel() | 2018-10-20 16:50:05 | 8cced247b1d83f7885f21be8c9b0354dab0fd1f3

fix minor typo | 2018-10-30 19:14:20 | a223f351c1dac80443b02ab905d46acbf4a66720

Implement yield for unconfined dispatchers, documentation improvements

Fixes #737 | 2018-10-23 09:29:56 | c33ef61d4502b71e0cdc354337f261917102d1c6

fix: make snippet as non-runnable | 2018-10-23 12:33:12 | 0661d477332205c23defe65d51e4063cd009e023

Prevent temporary leaks in HandlerDispatcher by properly handling
cancellations in scheduleResumeAfterDelay() implementation | 2018-10-16 22:30:40 | e321394c359758659a07ad1c98429ec2acd8ea59

fixed typo | 2018-10-19 21:16:57 | d981966acf780078119493c1f64e30dc9fa6e02e

Merge branch 'release-candidate' into develop

# Conflicts:
#	core/kotlinx-coroutines-core/test/RunBlockingTest.kt
#	docs/coroutine-context-and-dispatchers.md | 2018-10-18 14:40:10 | a7e10146781744f6df3865a1a33fa4e7cbc2c0b6

Merge branch 'context-elements-opto' into release-candidate

# Conflicts:
#	common/kotlinx-coroutines-core-common/src/Dispatched.kt | 2018-10-18 13:59:46 | cd37d8e8b30656a92a883b646fe050ff479bafdd

Minor optimizations of UndispatchedEventLoop | 2018-10-18 12:17:25 | 23d435b17a1aaaba86cc71656a4080547c4c727e

Do not step into thread-local event-loop on CancellableContinuation#dispatch fast-path | 2018-10-18 08:54:56 | faa477496bc2c05dad4034847a3f7d3f6aae3818

Use FIFO queue in undispatched event loop | 2018-10-17 16:51:50 | 09b9d6c157c9d7c6ec84052c16e64d3eebd0bc8e

Move undispatched thread-local event loop to dispatched continuation, execute all undispatched tasks in that loop to avoid SOE in user-supplied unconfined dispatchers and 'immediate' main dispatchers. | 2018-10-17 15:37:36 | fd54bc4882357771d0bec29abbd6e99dfccab725

Rework Dispatchers.Unconfined to use thread-local event loop

Fixes #704 | 2018-10-17 07:57:30 | 7ee722a595b416023c69d987fb7e4682ac0ffe91

Cache result of ThreadContext#foldAll in the field of DispatchedCoroutine to avoid context fold in tight loops

Fixes #537 | 2018-10-16 12:47:26 | ae85797805f93f98bfad64f5f91ba97e4f2c1fbc

Dokka fixes

  * Provide module with Kotlin 1.3 API because Kotlin 1.2 from Dokka can't read classes marked as "from the future"
  * Add runConfiguration dokkaStubs which is included only during dokka task with some classpath magic for Kotlin 1.3
  * Add package.list for slf4j
  * Fix unresolved types/links in documentation
  * Suppress all internal/inherited API | 2018-10-13 12:40:32 | 706e39363b586127b29e28fd97d476129c22fe93

Make EventLoop internal, @JvmName("from") for ExecutorService.asCoroutineDispatcher | 2018-10-11 16:09:44 | b6eca2a62158b2dc8d9b41d86040924095dca662

Use toString implementation for continuations to leverage debug metadata

Fixes #679 | 2018-10-10 11:46:53 | 4220ca2106bea653f2831f19c2c93752ea0e468a

Cleanup: get rid of workarounds, cleanup guide, suppress/fix compilation warnings | 2018-10-10 08:56:41 | 1bdbb3ef364006515157b5884dc663d9c3172c6c

Experimental annotation revisit:

  * Mark our API annotation as experimental with corresponding warning or error
  * Get rid of workaround for new inference bug
  * Migrate to compiler arguments instead of annotations | 2018-10-09 16:06:29 | e6e82391c33716033996ef6718756feab641816c

Restore TOC in the root coroutines-guide.md file with links to individual files

* Knit supports new TOC_REF directive for that.
* Reknit docs (also fixed out-of-date sample file). | 2018-10-08 17:20:12 | 715acd33e564dbff128a12b10ec2c6e24240d330

Migrate to Kotlin 1.3 coroutines, drop experimental from package

* Features based on version 0.30.0
* Uses Kotlin version 1.3.0-rc-57
* Uses Kotlin/Native version 0.9.2
* Uses AtomicFu 0.11.9-eap13
* Replace SuccessOrFailure with Result
* Replace buildSequence and buildIterator with sequence and iterator
* Apply @BuilderInference on all builders (including extension methods to workaround inference bug) | 2018-07-13 07:33:25 | 0950dfa1fe114e3682a546e3e53ef34dec9dfd4a

Fix lost exception from dispatched withContext on cancelled job

Fixes #675 | 2018-10-08 13:13:01 | 0f94304c6ae46c8f0cec24dde29d2e7af9ae7e97

Mark newSingle/FixedThreadPoolContext as obsolete, document the reason

* The will be replaced by another mechanism in the future.
  See #261 for details.
* The proposed replacement is to use the standard java API:
  Executors.newSingleThreadExecutor/newFixedThreadPool
  and convert to dispatcher via asCoroutineDispatcher() extension. | 2018-10-06 13:36:13 | f5126d0a9263f0b73a57d17031c340f78e3a25bd

Lazily load Dispatchers.Main and provide a stub impl on failure

Also specified explicit public visibility for Dispatchers object.

Fixes #658
Fixes #665 | 2018-10-06 14:09:05 | 0ece3885d445b60d254dc0fb21c7c05c7ebfb1bf

fix grammar typo

removed repeated 'for' | 2018-10-05 13:16:33 | e7a0723e930d52c4cb4665c5a3918f883287c039

Short Dispatchers.Default.toString value ("DefaultDispatcher") | 2018-10-02 09:59:11 | ec8cbd252d20adcdc91149ae9129149b252d945c

Move UI dispatcher to common Dispatchers.Main (#641)

* Main thread dispatchers are grouped under Dispatchers object and are discoverable via ServiceLoader

  * Dispatchers.Main can be consistently used and easily discovered, its implementation is discovered with ServiceLoader
  * It allows us to add iOS Dispatchers.Main implementation in the future thus opening the door for multiplatform UI-dispatched code
  * Workaround for #626, now Android users can start migration to RC coroutines

Fixed #626 | 2018-10-01 16:01:16 | cfe699fb59d799ab22da23aae983cc34b1164f29

Never loose coroutines when CoroutineScheduler is closed

* CoroutineScheduler close/shutdown sequence now guaranteed that a
  submitted task is either executed by the scheduler that is being
  concurrently shutdown or RejectedExecutionException is thrown.
* RejectedExecutionException is caught by the coroutine dispatcher
  implementation and coroutines are rescheduled into DefaultExecutor
  if a (custom) instance  of CoroutineScheduler is being shutdown.
* Added stress test for coroutine scheduler closing. | 2018-10-01 07:52:56 | 4b0f4dec24b93db4e0e0abbfe59b115e886a30c1

Coroutine scheduler is used by default instead of deprecated CommonPool

* Documentation and guide are updated correspondingly
* "DefaultDispatcher" is used as a public name of the default impl
* Implementation is integrated with virtual time-source
* Shutdown sequence is reimplemented in a safe way for tests,
  makes "close" safe to use on custom instances.
* "close" on DefaultDispatcher throws exception just in case
* -Dkotlinx.coroutines.scheduler=off can be used to switch back to
  CommonPool

Fixes #198 | 2018-09-28 09:20:49 | 303708b27f8d997ae482e3106679a7d170bc16d7

Exception unwrapping logic rework, do not unwrap cancellation exception if parent can handle exceptions

It allows to properly handle only relevant exceptions by child without reporting the same exception multiple times, fixes suppressions hierarchy and allows to implement supervisorScope properly | 2018-09-28 09:29:21 | 88e72f9973810119f105f78768b59e19f6a49c26

Introduce SupervisorJob & supervisorScope

This change also fixes propagation of cancellation for Job() constructor.
When both Job() and SupervisorJob() are cancelled with exception (fail),
they cancel their parent, too. So we have similar behavior between:
* Job() and coroutineScope { ... }
* SupervisorJob() and supervisorScope { ... }

Fixes #576 | 2018-09-23 16:16:04 | 21f171c8cb09831e25acdeab5c667cf3c15a9692

Avoid OOM in thread-pool dispatchers, try to reflectively invoke setRemoveFutureOnCancel on executor instance and use default dispatcher if attempt failed

Fixes #571 | 2018-09-25 12:45:53 | e29f49799d118b5c3feb38886af3030d027e7b60

async and async-like builders cancel parent on failure

* Affects async, CompletableDeferred, and all Rx integration builders.
* This makes all coroutine builders totally consistent. They all
  cancel parent on failure, but they all consider "CancellationException"
  to be the case of "normal cancellation" that does not propagate to
  parent. The only missing case is Job() that should be fixed together
  with introduction of SupervisorJob().
* Note that "scoping" builders don't "cancel the parent", but rethrow
  the corresponding exception instead, so it that is how it gets
  propagated up the stack.
* This makes parallel decomposition exception-safe. You
  cannot loose an exception as along as default (child async)
  behavior is not overridden.

Fixes #552 | 2018-09-27 16:17:16 | 52bfdabfa1476f55c1b3880d43f49977fc8df943

Copy deprecated annotations on Job member to inheritors

* Makes them easier to find for cleanup
* Avoids bug with light classes | 2018-09-28 09:41:58 | ffda1da6aec27b51f0bc8640f0e48c8fcd1e8f59

Restore binary compatibility of Executor.asCoroutineDispatcher

Fixes #629 | 2018-09-27 18:19:38 | 18cc588106ff7f4c680831809e5af8d75063c689

fix broken links for kotlin web site (#628)

* fix broken links for Kotlin web site | 2018-09-27 15:42:04 | cbeef1039d7402939bac8ec4674e1a7b1adf993a

Merge pull request #588 from Kotlin/handle-exception-fix

Handle exceptions fix | 2018-09-25 21:00:29 | 25b4388ef2f94909acac51cf1e0206975cc4b84a

Add name parameter to Handler.asCoroutineDispatcher

Fixes #580 | 2018-09-25 13:40:30 | a180ff75e9f7c97189a2651e96f4212bff0b105e

Fix lost exception during cancellation in produce, fix integration with play services after rebase | 2018-09-25 16:16:02 | 1b22af7e462272cbc33fd019975ee3ec5dbf1b78

Merge branch 'develop' into handle-exception-fix | 2018-09-25 13:10:26 | 1e0a2f0ad358c49d97602ee01ecf76602721fa4f

fix compilation | 2018-09-24 17:29:00 | f30715955637d2006e17fda7f99d002877fedc1c

Docs for context/coroutineContext in AbstractCoroutine are fixed | 2018-09-24 17:29:42 | 2d8cad05755d47af7987f39385527d3bddb15377

Fix exception aggregation to ensure atomic handling of exceptions

* Removed legacy onFinishing handler support from JobSupport.
  - It is no longer needed, because handleJobException covers #208
* Fixed bugs that were masked by cancelling parent from onFinishing.
* Consistent "Finishing" state was introduced in internal machinery:
  - Job enters finishing state when it is failing or it is completing
    and has children
  - Finishing state cleanly aggregates all failures, tracks cancellation
    and completion status
* Job.isFailed is introduced as a consistent way to query the "failing"
  state of the job that was previously only implicitly available via
  invokeOnCompletion handler (cause != null means a failed job) and
  the documentation for both Job & Deferred is updated to reflect that.
* Source-incompatible change: Job.invokeOnCompletion boolean parameter is
  change to onFailing. Such handlers are now invoked as soon as the job
  starts failing and the root cause exception of the failure is consistently
  passed to all the handlers.
* The following internal methods were introduced to facilitate this:
  - Job.failParent(exception) is used by child to signal failure to parent
  - Job.cancelChild(parentJob) is used by parent to cancel child.
* Child never aggregates exception received from it parent, but uses
  it as it root cause if there is no other exception.
* JobSupport.handleJobException() logic for launch/actor is split into:
  - failParent - can be invoked multiple times on race;
  - handleJobException which is invoked exactly once.
* Exception materiazization is much lazier now, which should
  significantly improve performance when cancelling large hierarchies.
* Other minor perf improvements in JobSupport code.

Fixes #585 | 2018-09-14 09:52:50 | ecbc85cbdad134d868698e22c0fdd7220eaced0f

Typo fixed | 2018-09-22 13:28:37 | 63e3896d85f827f2e403ffd25593ac5d9af54715

Fix typo in deprecation message of JavaFx dispatcher | 2018-09-20 17:10:30 | 39a2c559b538b8681c0724d5ec3ee6058af4e1c3

Cosmetic fixes | 2018-09-20 08:25:56 | 2dd53204e7047e970f145281c11a9c834021b3a9

Improve HandlerDispatcherTest, check that jobs are actually executed | 2018-09-19 11:30:51 | 847eba7c935ed784e918d976c9c43464179a2df9

Reknit guide, fixed TOC in Knit with comma & verify mode in example-context-09 | 2018-09-19 11:49:42 | bca98f4e9ea3c485c8691209be32fee487f812fe

CoroutineScheduler: fixed race between createNewWorker & shutdown for tests | 2018-09-14 12:17:12 | 241e74e6a2cdadaa2753f40a326c732e95fac2d0

Fixed sporadic test crashes related to withTimeout and children

- The bug only manifested when withTimeout coroutine had children working
  in a different dispatcher
- A separate stress-test that reproduces this problem with much higher
  probability | 2018-09-16 12:31:13 | fa9586bc283d60427ad3e9162de7962da4b0ec1d

Updated dispatchers references in readmes and docs | 2018-09-11 16:16:49 | f189cec57d7d0751464a5939f1bbcbd32e15d7c0

Dispatchers are renamed and grouped in the Dispatchers object

* Dispatchers.Default — a default dispatcher for background asynchronous tasks
  (currently backed by FJP commonPool, a new dispatcher in the future).
* Dispatchers.IO — a dispatcher for blocking background operations (#79).
* Dispatchers.Main — a dispatcher for Android Main Thread (#533).
* Dispatchers.Swing — a dispatcher for Swing Event Dispatch Thread.
* Dispatchers.JavaFx — a dispatcher for JavaFx Application Thread.
* Old dispatchers are deprecated, CommonPool is deprecated, too.
* awaitPulse() in JavaFx and awaitFrame() in Android are top-level funs.
* Introduced HandlerDispatcher, SwingDispatcher, and JavaFxDispatcher types
  in the corresponding UI modules for type-safety and future extensions

Fixes #41
Fixes #533 | 2018-09-11 15:42:03 | dc29b071d4784e3739f89223ced2333ecd5408ad

Fixed hangs during thread termination in IO dispatcher

Fixes #524
Fixes #525 | 2018-09-11 12:38:14 | 750d468b3281570910d0cd4000d4e29702b25020

Invoke handler using invokeIt to avoid JS bugs | 2018-09-07 11:36:05 | c430e0797e87af77f812bbcfb8751e4a0e31ffc6

AtomicFU 0.11.5 to fix Windows compilation | 2018-09-04 14:58:45 | 61abcd224a13f674bffae096afa7250de262df87

typo fixed | 2018-08-24 12:24:02 | 1a1237083b14d5de8f13f66b7a4ba6d9e26183d7

Introduce IO dispatcher to offload blocking I/O-intensive tasks

Fixes #79 | 2018-08-23 14:27:19 | f5e67ba597acdfb90ef84d29e4d6028f3f17a6ba

Introduce ThreadContextElement API to integrate with thread-local sensitive code

* Debug thread name is redesigned using ThreadContextElement API
  where the name of thread reflects the name of currently coroutine.
* Intrinsics for startCoroutineUndispatched that correspond to
  CoroutineStart.UNDISPATCHED properly update coroutine context.
* New intrinsics named startCoroutineUnintercepted are introduced.
  They do not update thread context.
* withContext logic is fixed properly update context is various situations.
* DebugThreadNameTest is introduced.
* Reporting of unhandled errors in TestBase is improved.
  Its CoroutineExceptionHandler records but does not rethrow exception.
  This makes sure that failed tests actually fail and do not hang in
  recursive attempt to handle unhandled coroutine exception.

Fixes #119 | 2018-07-25 09:22:46 | 7587eba96a230f3f0ab0c04f52723e926f7a845d

AtomicFu version 0.11.3 (bug fix) | 2018-08-23 11:05:46 | be065fd2c566acf4f600de23d45d70cf9f2144bc

Introduce ExecutorCoroutineDispatcher instead of CloseableCoroutineDispatcher

Fixes #385 | 2018-08-15 10:03:23 | b517f0529fe4a2066ca8ac985c08206cd4587758

Add workaround for K/N bug | 2018-08-22 09:37:41 | bbe6d8a915b2be9c0a7ff9d92677c878718fa219

Implement withTimeoutOrNull via withTimeout to avoid timing bugs and races.
Remove deprecated API

Fixes #498 | 2018-08-21 16:45:29 | 988eb26469819f7cc8cb1ba26c3a76a6805e8387

Provide API to create limited view of experimental dispatcher

Fixes #475 | 2018-08-15 09:06:06 | cac1a0f13c5b81cdfa3c2d1020e8d86ac8cd0029

Additional debug output for CoroutineSchedulerStressTest | 2018-08-10 17:38:41 | 21ce9c066c752adf4db1e8388a9d38a390b5f08b

Execute EventLoop#invokeOnTimeout in DefaultDispatcher to allow busy-wait loops

Fixes #479 | 2018-08-08 15:04:59 | e90cdb031ffab87d9f7671cc9e856b2a9534d59e

Scheduler tests fixed:

[temporary] Ignore flaky tests
Fix benchmark compilation
Fix WorkQueueStressTest | 2018-07-26 17:02:03 | 9542f1ce4f84d08ef2b33d14ce3ae79a8a93fa86

Scheduler improvements:

Fix (one more) ABA problem in tryUnpark
Global TaskContext to speedup CPU tasks
Documentation improvements
Stress tests constants tuned to be more robust and faster on local machine (and when ran from IDEA)
Style fixes | 2018-07-26 10:57:04 | e50fb89c4e80d7accb9bdfff3ce54c59d2857c26

Scheduler tests infrastructure

Support "kotlinx.coroutines.scheduler" property to change DefaultDispatcher
Updated scheduler shrink test with custom idleWorkerKeepAliveNs config,
so that they execute faster
Fix submissions from another instance of CoroutineScheduler
Run JDK16 tests and tests under new scheduler tests only during nightly stress test | 2018-07-20 20:57:57 | 5c7454b8a872d925f206f418c16d9880bf23e25f

Removed wrapper from LimitingBlockingDispatcher by introducing TaskContext | 2018-07-23 09:38:06 | 216e4d30a2b225361a4f3e59465c079a0f116379

Fixed ABA problem in parkedWorkersStack and other stress improvements

* Workers are now numbered starting from 1, zero is used as sentinel
* Workers are lazily created (no threads initially)
* Close/shutdown of the scheduler also clears state so that subsequent
  rogue attempt to dispatch anything fails.
* Work stealing is more predictable. It starts at random index but
  then goes linearly via workers array. | 2018-07-20 20:25:58 | db22e4023442341d39d0c3797de73e74efb25882

Scheduler cosmetics

Stealing logic cleaned up a bit (mostly style)
Update worker thread names when worker threads are terminated to maintain
consistency between their index in array and name;
Improved debugging info (toString)
Merged yield and spin counters, parkTimeNs is in Int | 2018-07-19 11:12:31 | bba6e8918e32d521109583a9024b3d5e82da53f5

Improved management of parkedWorkersStack in terms of ABA/concurrency;
Also includes documentation, naming and packaging fixes | 2018-07-18 10:12:31 | 1d3b0191ecbf498965d81257c80ad6f87e583552

Improved tasks dispatching:

Merge blocking and created workers into single state variable
Replace j.u.c. queue of parked workers with intrusive stack to support shrinking and increase performance
Replace j.u.c. global queue with Michael & Scott queue which supports conditional polling
Poll for blocking tasks from global queue when CPU token is not available
Make last ditch effort before thread termination
Idle reset on requestCpuWorker | 2018-05-03 11:52:00 | 18a91347466560b63144d0097f248d9edb029780

Fix ordering bug in QuasarTest | 2018-07-25 16:16:23 | a608a335ff57e969f69985c43ee70c30da1dba8f

Get rid of compiler bugs workarounds | 2018-07-25 13:27:14 | 5f73827f3131332018c02650057eff4aa2886ae7

Channels concurrency improvement:

Make close, cancel, isClosedForSend, isClosedForReceive and offer linearizable with other operations
Fix bug when send operation can be stuck in channel forever
New concurrency tests

Fixes #359 | 2018-07-17 15:39:20 | ea651aa5badbc20f911c844db2a57ea4f68fc38b

Access to PlatformImpl in JavaFx dispatcher, on Java 9 it's an internal module which should be explicitly exported

Fixes #443 | 2018-07-20 12:07:28 | 5557245405f965ec5ca26083301559066a1be147

Minor grammatical changes to the Coroutines guide

Minor fixes for the English grammar in the coroutines guide to help ensure new readers understand coroutines properly. | 2018-07-19 20:01:40 | 977ada1e74e0ae9b011fb219891433a6d36e9ef3

Validate FJP.commonPool parallelism to avoid pathological bugs

Also always construct private FJP pool if
kotlinx.coroutines.default.parallelism is explicitly specified.

Fixes #432, #288 | 2018-07-11 10:36:07 | 1e12210cd2bccdfd866b1c9649cd19e40663fb5f

Change order of handlers in JobSupport and CancellableContinuation
1) Invoke handlers before dispatching in CancellableContinuation to make behaviour timing-independent and Unconfined doesn't produce unexpected results
2) Invoke onCancellation -> handlers -> onCompletion in Job to make behaviour timing-independent

Fixes #415 | 2018-07-03 08:11:21 | b10287ecb35463f471ac120367a0a4f56f6b5c49

Typo fixed | 2018-06-26 11:58:39 | 7981999a156918abced59de696b02d9bc731f808

IO: fix joining and continuous writing byte array interference | 2018-06-13 16:49:45 | 9faa0395afd26a3c29cd67de5dce635a7882cf5c

Update ThreadPoolDispatcher.kt

Fixed typos. | 2018-06-09 17:01:53 | 517a2592077b067032d6c0379226d0467d7662f1

IO: fix continuous writing session interfered with joining | 2018-06-01 14:23:47 | e15eae8e3537080a82078873d762ad9de61f50f4

Typo fix | 2018-06-03 23:34:22 | e185ed6f918a1df082832c9059a091505b9a5cf9

Introduce deprecated ReceiveChannel#use to preserve backward compatibility with SubscriptionReceiveChannel, fix reactive samples | 2018-06-01 12:30:34 | 313978cf6b3901b1d7fbfb5d1f688c068a072c09

LockFreeMPSCQueue optimized & fixed

* no need for REMOVE token to hurry up GC
* Placeholder logic is fixed to avoid potential data loss on wraparound
* Stress test for resize/copy added | 2018-05-30 18:58:02 | c22a1c748e93db6e7d4e73f9118e8435edbeb698

Leaking handles in awaitAll are fixed | 2018-04-28 16:22:29 | e0b6db04b3bd86e942bc7e40081a82aedd8fd200

Delay bug fixes:
Invoke clearTimeout on cancellation in JSDispatcher
Remove delayed task on cancellation from ThreadSafeHeap on cancellation to avoid memory leak | 2018-04-26 13:03:40 | cd00643b92c9698ca728f92a66f52b30b3811d05

Documentation for debug property values | 2018-04-11 19:21:23 | 590c8889c2bb5341f15ee20e440c5599342fe34b

typo fixed | 2018-04-04 06:59:33 | 905a512625ad96dcd45c789f983babd93dfde011

Add extension to ExecutorService to return closeable CoroutineDispatcher

Fixes #278 | 2018-03-20 19:28:52 | 26f4b9ecd1bdd03299b668541f7c7c9ecaf9ab7c

Debug toString for channels

Fixes #185 | 2018-03-06 10:37:42 | e4b6f09af7c0d0b6963fa8611e867ff3292fad0e

rx-example: Added application plugin & fixed to use runBlocking | 2018-03-05 14:58:59 | 00560e8b0add1628bd0a32202b6f3cc301b35af3

Use NodeDispatcher on ReactNative

Fixes #236 | 2018-03-05 09:01:07 | ecc68f13141d1353aa2bb1d027a077e0fd7be4fb

Check for undefined `window.addEventListener` when choosing default coroutine dispatcher.

Fixes #230 | 2018-02-10 19:35:58 | 54d57e0c1fff22fe1d72c762f2bdbf01995395ca

Update README.md

Minor typo and typography fixes. | 2018-02-04 00:30:58 | 7dd6b66eced47e4ddf0b2c76c974ac19612b827c

IO: fix error propagation in blocking adapter | 2018-02-02 14:18:47 | f0c1d99e2c5c5978da7ace9d58c61a5648ed7687

Update coroutines-guide.md

This tutorial suggests just Async suffix:
https://github.com/Kotlin/kotlin-coroutines/blob/master/kotlin-coroutines-informal.md#asynchronous-programming-styles
Also, there was "of" instead of "or" | 2018-01-29 17:39:02 | 7e94e70734f6e01b0522d11071e6825879a221e7

runBlocking is improved to properly support specified dispatchers,
so that `runBlocking(UI) { ... }` can be used outside of UI thread.

Fixes #209 | 2018-01-29 15:07:21 | cb78787638039096804bc1b97031bcb9801c0547

Workarounds for KT-21968 to fix JS tests | 2018-01-24 20:31:22 | dfeba242b9e328f7528507f9349623671a00333c

IO: fix joining sequence, avoid infinite joinTo suspension | 2018-01-23 20:16:54 | d1842c6301d8debca8509809d473ce7e889b1d7b

IO: make reusable cancellable continuation implement DispatchedTask | 2018-01-12 15:46:22 | 4d01f7ec3b33f7633f3737a5ab3a3fc90703f57f

JS: Introduce Window.asCoroutineDispatcher and use custom queue in
Window.awaitAnimationFrame to align all animations | 2018-01-13 08:20:32 | 1867f6de0fb39077d0cb13fdc0400dd4568f717b

Actually fixed startup/shutdown of DefaultExecutor for tests to prevent
thread leak. Includes test-case. | 2018-01-12 15:28:24 | 9483301695f4c0784d663238ecd0ef04bbfcbea3

MPP: Debug toString should not depend on kotlin-reflect | 2018-01-11 16:04:12 | b79277b4fab5353680445f36dd9b19a740828203

IO: Use TestBase in all tests and fix leaking threads in tests | 2018-01-11 10:48:19 | c45f5fa3b636d66b824351c8d8d9368b8ee4e37f

MPP: Ported DispatchedTask perf improvements to JS and more code is made common | 2018-01-11 09:39:36 | f29203c158a526f90ae8574abfc1ba6dd5249262

Performance: Remove DispatchTask, store value in DispatchedContinuation | 2018-01-10 13:25:25 | f2239e191f55883486d5ce04ffb0c6f75cdc3468

Update coroutines-guide.md

Correct `Dispatcher` spelling | 2018-01-08 13:56:54 | fa13beba79e6ebb68588ba2167b67a77196907d3

Optimize creation of DispatchTask for cancellable continuations (fixed) | 2017-12-28 09:21:14 | bdf23f28c425ea391baa7ddbc3ba012d15e6dfa5

Optimize creation of DispatchTask for cancellable continuations | 2017-12-27 22:09:43 | ac48070de5e20b727b6d9ffd5cc7c259426fb6fb

MPP: DefaultDispatcher internal impl class renamed to JSDispatcher | 2017-12-27 10:14:54 | a919827885289271a6c598ab47fdf4434a8e0da3

fix typos | 2017-12-24 19:55:06 | d2d42ea802b54d2ede23f3edf3c18521ae46a3e9

IO: fix accidentally used tryResumeWithException | 2017-12-06 14:09:01 | 9ef4e0c05168acdb2c955079e2ee857cfec9de06

IO: fix spuriously hanging pipe tests | 2017-12-05 12:41:42 | 4adac45480b33664d79b24f7a779e7d4c1da68b1

IO: fix joining with different write byte orders | 2017-12-05 09:35:56 | 8af8937a34e893661dfe15f9be598eac50b101df

IO: fix infinite writeSuspend loop caused by auto-resuming flush | 2017-12-05 09:27:09 | e6764086ef4a03ec610245740b379f5da617224c

Bug fix: start hangs on lazy coroutine with attached invokeOnCompletion | 2017-11-30 13:41:47 | 5610e1df2eb3f67be8b45633b5d6ffbf73ec6bb8

Add DefaultDispatcher on some reactive operators | 2017-11-29 21:12:35 | e19ee04ca72316f9d67a58d35b8be398b059f1f5

IO: fix too expensive joinTo fast-path | 2017-11-23 09:39:27 | 060f36a06d341f43c0f9e77fd6706bf71f94972c

IO: fix typo in test name | 2017-11-20 08:43:26 | 9a6ca1a006debfa08392027508d03a141ae53841

Introduced ReceiveChannel.cancel method;
all operators on ReceiveChannel fully consume the original channel
using a helper consume extension, which is reflected in docs;
removed `suspend` modifier from intermediate channel operators;
consistently renamed channel type param to <E>;
added two versions for xxxTo fun -- with MutableList & SendChannel;
added tests for all channel operators;
dropped/deprecated ActorJob/ProducerJob, fixes #127 | 2017-08-17 18:01:33 | b555d91193d9e76710062451cf94a94d14820e98

IO: fix race in closeWaitJob of JoiningState | 2017-11-17 16:30:22 | 47d92bafe90d899dfb53cd0f8bf7eae75504047e

IO: fix accidentally missed it | 2017-11-17 16:29:49 | d42bdadc8520ec490d5b37f5f160b54d4541d2f8

IO: fix race in ByteBufferChannel.write(lambda) | 2017-11-17 15:39:03 | 7bf4fa9e3b19a8200450fabe396a0ff854615596

IO: fix joining of already closed but not empty channel | 2017-11-14 11:52:32 | 9e9929d376d2b92cd5fda2f21f7cc1eb51f66ca8

IO: fix lincheck dependency | 2017-11-10 20:22:53 | b94ce42827dc5f9294f19b99da356ad585fb01ea

IO: fixed awaitClose and copyDirect | 2017-11-10 09:22:23 | 373d590e103f3203f61b2fb93b3b82bcce1de13e

IO: fix race in joined flush once again | 2017-11-09 18:18:05 | 8e9138ca4a297189f49bece8e739b6584f69e061

IO: fix joined close/flush | 2017-11-08 13:50:13 | 2fdb5aa4867b60f7c659cf4d950babfd2a43a67a

IO: fixed joined channel flush | 2017-11-08 03:15:39 | 625c1fefa57f95af2b723b7c7e3b1a5319c69faf

IO: fixed joined ByteChannel close | 2017-11-08 03:11:53 | ca8762b2f6a1043103a45153357a5f9e5dc010af

IO: fix writeByte BufferOverflowException

it is important to setup buffer's positions again after suspension
it is not the case if we don't hold writing state during suspension | 2017-11-07 16:42:15 | bab9f7927ca780b242c794578c02ddf63db40375

IO: fix race in readSuspend

consider state change:
writer: IDLE(empty) -> !do write -> IDLE(buffer) -> !close -> closed = C
reader:  !suspend -> resumed -> closed = C -> [here]

here reader can see that there is closed state however to see published
written state it should read state again rather than simply use already
readen state to get happens-before guarantee | 2017-11-07 16:18:16 | 32c90b169d05bd372317f90ae5ad511bbcb05bc5

IO: rewrite if/else/return code to identical

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 11:23:34 | fde1a646fe5a60c8aa211764d63527ec429672c3

IO: eliminate tail suspend calls in when blocks

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 10:54:47 | 4eccfba8d4cbe55ce49ac7b70c40eea1d0adf7c9

No Job in newSingleThreadContext and newFixedThreadPoolContext anymore

* This resolves the common issue of using `run(ctx)` where ctx comes from
either `newSingleThreadContext` or `newFixedThreadPoolContext`
invocation. They both used to return a combination of dispatcher + job,
and this job was overriding the parent job, thus preventing propagation
of cancellation. Not anymore.
* ThreadPoolDispatcher class is now public and is the result type for
both functions. It has the `close` method to release the thread pool.

Fixes #149
Fixes #151 | 2017-10-20 09:36:56 | d9ae2bcb88403e0854b895ba46c2417b4c0a4752

run uses cancelling state & propagates exceptions when cancelled

* When coroutine that was switched into a different dispatcher using
`run` is cancelled, the run invocation does not complete immediately,
but waits until the body completes.
* If the body completes with exception, then this exception is
propagated.

Fixes #147 | 2017-10-20 08:42:06 | bcdd8e17fed40097f9bb8fdb3e218f95ff8603a9

Exception propagation logic from cancelled coroutines is adjusted

* When cancelled coroutine crashes due to some other exception, this
other exception becomes the cancellation reason of the coroutine, while
the original cancellation reason is suppressed.
* UnexpectedCoroutineException is no longer used to report those cases
as is removed.
* This fixes a race between crash of CPU-consuming coroutine and
cancellation which resulted in an unhandled exception and lead to
crashes on Android.

Fixes #152 | 2017-10-20 06:00:50 | 6aed878a67e6f707e6c3afb0879beb8822a95d6f

Fixed Reactor docs (Scheduler.asCoroutineDispatcher) | 2017-10-07 19:58:40 | 8348b8c31d5b07541bd3d268ca2a186b0fe1ad6f

Failed parent Job cancels all children jobs, then waits them

Also improved debug output a little bit | 2017-10-07 12:44:48 | a36ab94253bb9945c6377eb43db0cb1071019c40

IO: eliminate race in close

I knew that I'll hit this bug anyway. Here we MUST flush twice as
flush at read suspend is not enough. If a writer closes then the first
flush does flush and it closes so all readers will see all pending data.
If a foreign thread does close then the first flush is makes no
difference however the second is required for proper cleanup and
to do tryTerminate | 2017-10-04 18:34:18 | ad68c06c1200f2038c26adeab2abf801a2a2114b

IO: fix verifying pool usage

buffer view doesn't hold original pool reference to make
pool chaining working | 2017-09-29 15:18:00 | ccf8dde980a4701b9cd30e1df23e5cbefdd93b53

IO: fix writing byte packet | 2017-09-28 07:58:15 | 754a19b188dc6d486d73b8e3a2f0c483c3f88f9b

Documentation for DefaultDispatcher in the guide | 2017-09-29 18:39:03 | 66f018c489c6b0ec0831fa9953db34da3edff5f3

DefaultDispatcher is introduced | 2017-09-28 11:27:05 | c0d559b594fce802f1d1be9a6feef49019d17160

IO: fix ByteWritePacket.writePacket size update | 2017-09-17 19:48:26 | 5ca0d12c1e8a9672d40fe83cd31d1b2426f397e7

IO: fix writer scope type | 2017-09-11 10:06:54 | ea3a418f84f3731e92658cedfa11878a8828500c

IO: fix byte channel readX operations return -1 during close+flush

Read operation should try flush before return -1 if closed because
the close operation setting close status first then do flush
so reader could see closed status but not-yet-flushed byte counters | 2017-09-11 07:31:08 | e4d3ce750ed8b864a435fb0926d0d77e9c02b208

IO: add more byte packet tests and fix few bugs | 2017-09-06 18:50:51 | 5feaf6973c23fae3c5a8df64748e2181c50dd0d6

IO: fix delimiter lookahead | 2017-09-06 15:52:04 | 1cc86083e7be17ce53f7c80cfa6ba67e8569e33e

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 99cdb380bf6391db7e7d08e8673c627c554074d8

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 776b370d58883e9bce0c309ebb4919ef4cdac13c

IO: fix byte packet write buffer leak | 2017-08-25 08:39:00 | 974cbb3b21b8d7613c41ee2221ce435e347b068f

IO: fix byte channel close with error buffer leak | 2017-08-25 08:06:59 | 24b040f1345db27b45589a975daab45bf9325494

IO: fix CR-only line endings processing + tests | 2017-08-23 11:39:41 | a9a936d1a325ee0baf36df444414e1e17ac539da

IO: rename writeStringUtf8, fix implementation + tests | 2017-08-23 09:26:18 | fbcba264a37580b5c47f3314395e5146afb38287

IO: fix copyAndClose + tests | 2017-08-23 09:11:55 | fc84a634ff9a1acca04e09fa5a031b904c5c8838

IO: byte packet readLine support + bugfixes | 2017-07-26 09:59:16 | 0b12ffc0178844e813223039adf5d7510703485d

Fixed bug in LockFreeLinkedList (invariant & lock-freedom violation)
Migrated atomic ops to AtomicFU library for ease of code maintenance
Implement lock-freedom testing in LockFreeLinkedListAtomicStressLFTest | 2017-08-10 18:09:26 | 7eb41efbacd498704f25465e2a58f4892c16aa32

Typo fixed | 2017-07-24 13:42:34 | a448903dcac25e450d87c49705e7a6693a300d29

Use CompletableDeferred in the guide section on coroutines;
fix (reknit) broken links to factory functions that are now top-level | 2017-07-21 22:00:30 | 256812a1c09511744575ed3d2c64fec27979f391

More documentation on CompletableDeferred states and style fixes | 2017-07-21 15:04:23 | 8e2ae9964614e35295a8d695114b00c35f5fc755

Better debug strings for continuations | 2017-07-12 12:22:21 | 69d9c852289f1a4a9ffe107dc75cc71871cfe34e

ObservableBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 10:16:30 | ed6985459318209be084ff807676cb722387fb6f

PublisherBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 09:58:44 | 58246ca7e7727632ba50c41d0314df47ba9e3fc0

Fixed IllegalStateException in select that concurrently selects, which
was due a problem with Job concurrent cancel and dispose of handle.
The bug was introduced by addition of Cancelling state for a Job.

Original stack trace in select was:
java.lang.IllegalStateException: Check failed.
	at kotlinx.coroutines.experimental.internal.LockFreeLinkedListNode.remove(LockFreeLinkedList.kt:236)
	at kotlinx.coroutines.experimental.JobSupport.removeNode$kotlinx_coroutines_core(Job.kt:734)
	at kotlinx.coroutines.experimental.JobNode.dispose(Job.kt:995)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.initCancellability(Select.kt:294)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.getResult(Select.kt:273) | 2017-07-11 09:50:00 | e9f64491787433b3d53ad5800456524820058d5f

typo fixed | 2017-07-10 10:46:13 | d28cc872fb7815b51ceb7c84a4e77117fce380c7

typo fixed | 2017-07-10 10:44:07 | 8b0b07ab81f12bc605462a6a1333b61abce547cb

typo fixed | 2017-07-10 10:43:20 | 93f7e8e22019643caaf14ae480c05ab0a349064d

Bug fixed on waitTimeoutOrNull (was flaky testOuterTimeoutTest) | 2017-07-10 10:38:54 | 769d48217f8787c7f64c07da6e53c27b2d703274

Refactor DispatchTask to reuse it for dispatchYield | 2017-07-10 10:16:20 | 2a93646a8054ce7819e9bdbff8d28849a19e874b

Fix SecurityException when trying to read "kotlinx.coroutines.debug" prop | 2017-07-10 07:15:40 | e824eaaab9d053ff0f2cc028c7413bb83adcacc0

A fix & optimization for select impl helping scheme | 2017-07-05 06:53:29 | 907074f1f63871ed29feab3173a2e38b30d8fbb6

Reactive tests fixed for cancellation logic change | 2017-06-26 11:25:56 | 7a7b00938934ef7d0855eb24ec93a06d0b0c97e7

Fix typo: debugging more -> debugging mode | 2017-06-24 21:03:35 | ed5ed49913498b4e880415d2f0fb9004e20e1b5a

Typo fixed | 2017-06-23 10:27:02 | 6c18dfd15f6e1703db57531422bc0df3cb7d08ff

fix typo.

somethine -> something | 2017-06-18 07:37:59 | 81a6f23ca68d7ed37f36dcb966fe74e3bc53de57

Typo fixed | 2017-06-09 17:25:03 | c3c2f3269220f5d7ae20e7592ca1253061b50a95

CoroutineExceptionHandlerTest fixed | 2017-06-09 15:59:25 | 866521b83ed0676d0203dec35de5fb797bc9a59d

SimpleSendReceiveTest is fixed to account for close conflation | 2017-06-06 11:36:38 | 9ff32644381bf1a692d9a935170a9f7b7023f244

Fixed lock-freedom of send/offer on closed channels and related bugs.
Conflated[Broadcast]Channel hang of concurrent offer/close is fixed. | 2017-06-05 14:04:39 | e6e8ce8d46cee273e00ee130334239880734dc2f

Integration readme title fixed | 2017-05-17 11:59:49 | 0c2e25d7c38f50bd3c9866ea1fc2c12d5d74251a

launched jobs and await can be cancelled while waiting in dispatch queue

* suspendAtomicCancellableCoroutine function is introduced for funs like
  send/receive/receiveOrNull that require atomic cancellation
  (they cannot be cancelled after decision was made)
* Coroutines started with default mode (CoroutineStart.ATOMIC) using
  async/launch/actor builders can be cancelled before execution starts.
* CoroutineStart.ATOMIC is introduced as a start mode to specify that
  coroutine cannot be cancelled before its execution start. | 2017-05-11 17:15:18 | a74eb5f8b08e84f904e75aa71da4547c9178da8d

Fix withTimeout/OrNull bug with spurious concurrency on cancellation | 2017-04-20 16:23:18 | ca9d5be31a30c5f6a20875438f9ae40db4183f4c

Refactored ThreadPoolDispatcher to reuse code of ExecutorCoroutineDispatcher | 2017-04-18 12:28:35 | f04f51d5b05a0aec7c97acc202d180096a095fbf

equals/hashCode for wrapper CoroutineDispatcher impls | 2017-04-11 10:50:03 | 30dd5c129c493ca7b1a3b2b80437e8a7ec68f3ec

Starting coroutine in UI event handlers without dispatch in UI guide | 2017-04-07 15:06:22 | f724f6e2fe7c20cb48b69cd7b19b2658313231e4

Nicer toString implementations for CommonPool & Unconfined dispatchers | 2017-04-07 07:35:28 | dc9fd1c2d18da2f23d9907148b4674cda6418e49

Few minor docs & build fixes for reactor support | 2017-04-06 19:15:35 | 523516abd2023f8d968d389b32dee713130a9f83

Merge pull request #53 from mkobit/patch-1

Correct typo in coroutines-guide-reactive.md | 2017-04-05 09:41:56 | 7676e2239947273c6cbb4cb77536042bd9f2ce43

Fix repository urls

need to be reverted once bintray will fix jcenter sync issue | 2017-03-23 14:45:39 | 78fd3cb8932410af9beab4effc04bdeea4343732

Merge pull request #42 from jakiejj/master

fix typos in comments to Nio functions | 2017-03-20 07:16:24 | 9ef792fec6775bb5cdb08c84511488f324db3322

fix typos in comments | 2017-03-17 20:48:39 | 4d927c76488b96abaae7ba003f8064ad84b8334e

Typo fixed | 2017-03-14 17:39:50 | 81a5b7144484dcc8ebc89cd98fd9bd8a2d45afbe

startUndispatchedCoroutine is renamed to startCoroutineUndispatched for consistency with coroutine intrinsics | 2017-03-14 16:39:26 | 4638d79097a3d5b0c1b32c1e468ad723cc4b2bd9

Fixed bug with sometimes missing `onComplete` in `publish`, `rxObservable`, and `rxFlowable` builders | 2017-03-13 09:03:35 | d14a3901f365f622d9a7ba96fc00900011c9c009

Scheduler.asCoroutineDispatcher extension for Rx 2.x | 2017-03-10 12:06:01 | a1fe3da17907024afa50a35cbfcc72639d62bf78

not -> no typo fixed | 2017-03-09 09:57:57 | 228d084bfb87f967e216b84029b58649fcbe7472

Executor.toCoroutineDispatcher is renamed to asCoroutineDispatcher | 2017-03-09 09:03:39 | 38b5ea18e36f1a53d4cde27bf3fd21522727cbbb

Fixed dispatching logic of `withTimeout` (removed extra dispatch) | 2017-03-02 21:15:21 | 43d831f61f33262dcb4621069451d1699898d1cb

More links and typos fixed | 2017-03-01 14:21:48 | cc63363ead9d82f4e246a319ca3e0cb9f15e3a14

top-level readme links fixed to produce & co | 2017-02-22 12:04:28 | 40e89f689f89ae643f68c68efc57aebd8f8284ed

Jon.onJoin select clause is implemented, lazy onAwait/onJoin & dispatch fixed | 2017-02-22 11:56:58 | d84dbc2d75927fe8446098a225a3fbb884683bde

startUndispatchedCoroutine utility functions | 2017-02-22 06:53:49 | ee88fbef2d78e4b25f741efffabf4756bff8e7f3

buildChannel deprecation template fixed | 2017-02-20 12:53:30 | de8b9e9b336491ff0dbf107fe35d9efa030d92d3

Merge pull request #31 from gildor/on-completion-deprecation-fix

Job.onCompletion deprecation template fixed | 2017-02-20 12:49:41 | 85923e2de75ed522903cc3d64aef2ad178c1cbf8

Job.onCompletion deprecation template fixed | 2017-02-19 13:26:29 | c8f9ca308abe963cafa5f676410402fc287cfa5a

Delay implementation in Swing, JavaFx, and scheduled executors is fixed to avoid an extra dispatch
CancellableContinuation.resumeUndispatched is introduced to make this efficient implementation possible
Additional documentation for CoroutineDispatcher implementors | 2017-02-10 10:30:38 | a198bad7365a508baf1041993e9a14007f9d5aa3

Doc fixed | 2017-02-10 10:14:35 | 8c8551e7dbea7c2467060c2d3c6aa1c54c721e68

Merge pull request #29 from cbeust/patch-1

Update coroutines-guide.md | 2017-02-07 17:52:01 | 4d821e3901d038f005850b38d1e4954506306383

Merge pull request #28 from erokhins/patch-1

Update 1.1.0-beta-37 to 1.1.0-beta-38 | 2017-02-02 19:24:36 | 40f69cf704e7b31cec9c8a935317d8c173e79623

Added deprecated (with error level) plus operators on Job and CoroutineDispatcher to catch potential problem with their incorrect use at compile time | 2017-02-01 15:43:32 | 79a2868295127b81056f66d644da72db5a40d772

Merge pull request #27 from tairrzayev/readme-fix

Fixes the typo in the coroutines-guide.md | 2017-02-02 06:15:26 | 9d844fa1733f83e5e1b85c3e762a69729d3c5ef2

Dispatchers default behaviour is changed to schedule new coroutine for execution later.
Job.getInactiveCancellationException is introduced.
yield is cancellable while it is waiting to executed.
core tutorial is expanded. | 2017-01-29 18:58:33 | 7cf452eab59cdca570227f071cba2da374f77110

Finer grained control on debugging facilities | 2017-01-24 07:29:53 | aecb9aa1606b79243c8e93221de9713c164ce015

Added context parameter to CoroutineDispatcher methods, implemented Executor.toCoroutineDispatcher | 2017-01-23 13:47:20 | 67891d867da022d608d4589859002f256d9a313e

Fixed initialization of Job with parent (initParentJob), fixed handling on uncaught exceptions in standalone coroutines | 2017-01-20 09:19:52 | 58a7add417403811e822a4f6f7689ae3fd0e2018

Minor: fix version of maven-deploy-plugin, fix pom warnings | 2016-12-21 17:21:30 | c4ad15fc6246b7496d610da7419441020dfe1c56

Merge pull request #6 from hhariri/patch-1

Fixed packaged names | 2016-07-27 07:04:12 | c6993089412fbc491ddeb0a71b57e67bf31e21d6

Fixed packaged names 

On the repo, the package names don't have the suffix -1. | 2016-07-27 06:03:41 | 1abe89716c093c9e010a45a5235da7f9b50eea17

BlockHound integration (#1821)

* BlockHound integration for Dispatchers.Default and Dispatchers.IO
* Use JNA-based self-attach mechanism in order to workaround a problem when tools.jar is loader by multiple classloaders
* publication-validator is renamed to integration-testing;
* Each test is now in a separate source set, which allows for more
  flexibility in their configuration; for example, failing to set
  `dryRun=true` doesn't prevent tests other than NPM to run, and
  it is possible to run the tests (and their dependencies)
  separately.
* Add an integration test for coroutine debugger java agent

Fixes #1060
Fixes #1031

Co-authored-by: Vsevolod Tolstopyatov <qwwdfsad@gmail.com> | 2020-03-16 14:27:06 | ed7c668c33ee6c0ac487ccb6d76e067e571a12ef

ReceiveChannel.broadcast shall start lazy coroutine when closed (#1717)

* ReceiveChannel.broadcast shall start lazy coroutine when closed
* Documentation on broadcast operators is added that explains that the resulting BroadcastChannel shall be cancelled if it is not needed anymore.
* The only functional change is that closing a broadcast channel for lazy coroutine shall start the corresponding coroutine to give it a chance to promptly fail.
*  Also fix the order of events in lazy actor to be consistent with a broadcast channel

Fixes #1713 | 2020-03-16 14:17:18 | e0a6533ecd56b5dc61c91c23cd6fd9e78e29479e

Fill in stacktrace of cancellation exception with an empty array to properly work on Android <= 6.0 that had a bug on a code-path with an empty stacktrace (#1868)

Fixes #1866 | 2020-03-16 11:08:02 | 0bc5d21a2ac6b101562c6d2ac053402ed5d36f9b

Fill in stacktrace of cancellation exception with an empty array to properly work on Android <= 6.0 that had a bug on a code-path with an empty stacktrace

Fixes #1866 | 2020-03-16 09:36:08 | cfb3ff92f175c6ef66e6ed3257cdd52262031966

Implement DebugTestBase in DebugProbesTest | 2020-03-13 12:02:40 | 8aaf2f70b26e5d9095c9e6ea121f6daa5247be5b

Make DebugProbes ready to production (#1862)

* Speed-up installed debug probes by splitting global probes lock to RW-lock, guard all state transitions with read lock and all read operations with write lock to guarantee a consistent snapshot
* Prevent IllegalStateException during 'kill -5' command
* Introduce flag to disable creation stacktrace capturing in DebugProbes
* Support proposed changes in JUnit4 rules

Fixes #1379
Fixes #1372 | 2020-03-13 11:13:09 | 4116fbf1dda610d13095e0e23642a66862f56065

Document the fact that dispatch should eventually invoke the given runnable (#1854) | 2020-03-13 11:10:13 | 10fd73e8a1751819280ab4d7e4ba26b89ff57d9f

Leverage polymorphic keys un CoroutineDispatcher and ExecutorCoroutineDispatcher (#1840) | 2020-03-05 20:02:30 | 214f156c7915185b04489c23ad5468cd5266aabb

Temporary workaround bug in K/N 1.3.70 codegen (KT-37061) | 2020-02-26 14:14:10 | 21bb6fb201b12e26d6763519b46881f89914d6fc

Optimize the size of the coroutines library in Android projects (#1282)

* Includes additional R8 rules to disable debugging & stack-trace recovery in optimized
Android builds. Additional savings with AGP 4.0.0-alpha06 (r8-2.0.4-dev) are ~16kb
in uncompressed DEX size.
* Tests are modified to verify that the classes that are supposed to be removed are
indeed removed.
* Cleaner build logic without error-prone "return" in the middle
* Report the size of optimized Android Dex as teamcity metric | 2020-02-14 12:52:10 | bf9509da7a0eff08e489555254d9662f2cc1894f

Fix a race in some tests for JavaRX integration (#1801)

An extremely rare race could happen in any of the tests in
`LeakedExceptionTest` in the following case:
* `withExceptionHandler` runs the block passed to it;
* In one of the last iterations of `repeat`, `select` in `combine`
  happens on both flows at the same time, that is, the block that
  was passed to `rx[Something]` runs in two threads
  simultaneously;
* One of these two threads (thread A) runs anomalously slow;
* The other thread successfully throws an exception;
* This exception is propagated to `catch`, so `collect` is
  finished;
* `repeat` is exited, the block passed to `withExceptionHandler` is
  done executing;
* `withExceptionHandler` sets back the usual exception handler,
  which fails when an exception in JavaRX happens (see
  https://github.com/ReactiveX/RxJava/wiki/What's-different-in-2.0#error-handling);
* Thread A wakes up and throws an exception. This time, it is
  passed not to `handler`, which is made specifically to deal with
  this, but to the default handler.

As a fix, now a special coroutine context passed to `rx[Something]`
ensures that the spawned executions are run in a thread pool that
blocks until all the tasks are done. | 2020-02-13 13:44:49 | 9f4fd70597567dc4477e5d935d06a380edd09eae

Do not request additional worker from 'yield' calls and during post-e… (#1728)

Do not request additional worker from 'yield' calls and during post-execution phase in LimitingDispatcher

Fixes #1704
Fixes #1706 | 2019-12-25 11:16:39 | c526c3fafa0efdb638e99cb30a10cdcfb8e2bc1c

CoroutineScheduler parking strategy rework

    * WorkQueue.trySteal reports not only whether the steal was successful, but also a waiting time unless task becomes stealable
    * CoroutineScheduler.trySteal attempts to steal from all the workers (starting from the random position) per iteration to have deterministic stealing
    * Parking mechanics rework. After unsuccessful findTask, worker immediately adds itself to parking stack, then rescans all the queues to avoid missing tryUnparks and only then parks itself (parking duration depends on WorkQueue.trySteal result), terminating later
    * Excessive spinning and parking is completely eliminated, significantly (x3) reducing CPU-consumption and making CoroutineScheduler on-par with FJP and FTP on Ktor-like workloads
    * Downside of aggressive parking is a cost of slow-path unpark payed by external submitters that can be shown in degraded DispatchersContextSwitchBenchmark. Follow-up commits will fix that problem
    * Retry on tryStealLastScheduled failures to avoid potential starvation
    * Merge available CPU permits with controlState to simplify reasoning about pool state and make all state transitions atomic
    * Get rid of synthetic accessors | 2019-10-01 17:22:56 | f27d176e7a6add3b92f268c413b0ea4d27de35aa

User Class.forName instead of ServiceLoader to instantiate Dispatchers.Main on Android (#1572)

Fixes #1557
Fixes #878
Fixes #1606 | 2019-12-12 09:10:21 | e60ec8e1fa2a55006f67b0e113b17388595bce97

Introduce DebugProbes.isInstalled method | 2019-12-11 16:04:47 | af9a2010611248a16f6c271274028770d5a4f067

Better diagnostic exception message in MissingMainCoroutineDispatcher | 2019-12-10 14:14:46 | 6cb317b500d176aa0d13b3a2f2ca9ead336f6b0c

ContextScope.toString for better debuggability | 2019-12-05 15:52:43 | c02648baee0f490a150bdb645637e0ee940ef7bf

Promote isDispatchNeeded to stable API | 2019-11-26 11:07:53 | 391042f20bbc12b77b33a550b566265346e2a423

Improve documentation

    * Clarifications of CoroutineExceptionHandler execution
    * Clarifications of MainCoroutineDispatcher.immediate
    * Outdated documentation (pointed out by Google AndoidX team) for isDispatchNeeded is rewritten
    *

Fixes #1650
Fixes #1651
Fixes #1634 | 2019-11-25 15:56:24 | 445e026f95392c19e4eb8be17af9ef454d0647e8

Optimize yield via dispatcher.isDispatchNeeded

Also, as it was before, throw UnsupportedOperationException from the
Dispatcher.Unconfined.dispatch method in case some code wraps
the Unconfined dispatcher but fails to delegate isDispatchNeeded
properly. | 2019-11-26 08:33:08 | 69d1d4160154105a7944feeb67f851d676ee7f94

Avoid potential StackOverflow on wrapped UnconfinedDispatcher+yield

See ImmediateYieldTest.testWrappedUnconfinedDispatcherYieldStackOverflow

This commit changes the way Unconfined dispatcher is detected.
Instead of equality check we try to dispatch to the dispatcher with
a specially updated coroutine context that has YieldContext element
that is processed by the Unconfied dispatcher in a special way. | 2019-11-23 15:21:22 | 8f1f252a31a43534dc6dfac8af465c2bc78cb115

Support yield in immediate dispatchers

So yield now checks for "Unconfined" dispatcher instead of
"isDispatchNeeded" and works properly for immediate dispatchers.

Fixes #1474 | 2019-11-20 08:02:46 | 3ab34d808b5aa2c8673754bd43e4879b9d4af8c9

Clarify documentation around Dispatcher.IO parallelism | 2019-11-02 09:40:23 | 9d1146fdc91177320fb22c455086e14da0be008d

Fix ReactorFlow integration bug exposed by TestBase | 2019-10-29 16:48:49 | 1652bb9602a23a6c6a7c445a88f8da9a24f39ef5

Properly choose timeout exception with a recovered stacktrace to provide better debugging experience

Fixes #1625 | 2019-10-22 16:18:22 | 3affb90f51029781fb3384ff2fda51586441d1d3

Eagerly create cancellation exception during Job.cancel call to make stacktrace even shorter

Also, fix stacktrace recovery in select clause | 2019-10-04 19:35:19 | ae57774c1ea253e0272d92c4c064b2b721847989

Change stacktrace recovery contract

    * Stacktraces are no longer recovered in DispatchedTask.run
    * Callers of uCont.resumeWithException are responsible for recovering the stacktrace
    * CancellableContinuation.resumeWithException recovers stacktrace if necessary
    * Properly recover stacktrace in Channel.receive fast-path
    * Properly recover stactraces on Channel.send fast-path
    * Restructure stacktrace recovery tests | 2019-10-03 13:45:49 | 3b2e4377ac14b9c9c4acfc01d9d50a5c9519e9de

Shorten resume call stack

Calls of afterCompletionInternal are pulled up the call stack. This
is very important, since scoped coroutines do "uCont.resumeWith" from
afterCompletionInternal, which makes all the JVM method visible in the
debugger call frames and in exceptions.

Additionally, this allows for some simplification of the JobSupport
code, as a number of methods do not need "mode" parameter anymore.
Moreover, the kludge of MODE_IGNORE is no longer needed and is
dropped.

Make TimeoutCoroutine extends ScopedCoroutines.

Fixes #1574 | 2019-09-25 21:14:05 | ff9060c5f0054940e9204049ba30fd6797899ca0

Fix race in channel select/cancel

This bug was introduced by PR #1524. It was reproducing when there
is a regular "send" operation on one side of a channel and
"select { onReceive }" on another side of the channel and the
"send" coroutine gets cancelled. The problem is that
SendElement.tryResumeSend implementation was calling finishPrepare
before it has successfully resumed continuation, so if that
continuation was already cancelled, the code in "finishPrepare" had
already stored the wrong affected node which it would later try to
call "completeResume" on.

This patch also adds hexAddress to the debug toString method of
all internal node classes in channel implementation.

Fixes #1588 | 2019-10-02 11:42:30 | d9d35747cfa336108734a47f7aac1aa05410389a

Fix race condition in pair select

This bug was introduced by #1524. The crux of problem is that
TryOffer/PollDesc.onPrepare method is no longer allowed to update
fields in these classes (like "resumeToken" and "pollResult") after call
to tryResumeSend/Receive method, because the latter will complete
the ongoing atomic operation and helper method might find it complete
and try reading "resumeToken" which was not initialized yet.

This change removes "pollResult" field which was not really needed
("result.pollResult" field is used) and removes "resumeToken" by
exploiting the fact that current implementation of
CancellableContinuationImpl does not need a token anymore. However,
CancellableContinuation.tryResume/completeResume ABI is left intact,
because it is used by 3rd party code.

This fix lead to overall simplification of the code. A number of fields
and an auxiliary IdempotentTokenValue class are removed, tokens used to
indicate various results are consolidated, so that resume success
is now consistently indicated by a single RESUME_TOKEN symbol.

Fixes #1561 | 2019-09-22 18:13:12 | 2f8bff1b0972defc473dd8c857600db481f013a3

Introduce reusable cancellable continuations for hot loops with channels (#1534)


  * Average performance improvement is around 25%
  * API is internal and targeted to specific usage
  * DispatchedTask and DispatchedContinuation are extracted to separate files for better readability and maintainability
  * Ensure ConsumeAsFlow does not retain reference to the last element of the flow with test | 2019-09-25 15:02:24 | 946e5789fa982e397d49b788d308afdc5d44ccce

Fix StackOverflowException with select expressions

* onSend/onReceive clauses on the same channel: Instead of
  StackOverflowError we throw IllegalStateException and leave
  the channel in the original state.
* Fix SOE in select with "opposite channels" stress-test. The fix is
  based on the sequential numbering of atomic select operation.
  Deadlock is detected and the operation with the lower sequential
  number is aborted and restarted (with a larger number).

Fixes #504
Fixes #1411 | 2019-08-30 10:01:19 | 3dbe82b44e6af89719c6d331400aed58de9e5521

Install debug probes in CoroutinesTimeout constructor to capture coroutines launched from within a test constructor

Fixes #1542 | 2019-09-17 14:26:45 | fcc004c2a03be7c7389a3a95b7a805058fb936e5

Eagerly create coroutine for lazily-started coroutine builders in order to trigger DebugProbes.probeCoroutineCreated

Fixes #1544 | 2019-09-17 15:32:43 | 858094ee4262ab93a8ec9a1ff24e6df4bc9a8ed4

Do not aggregate all coroutine info into a single string before dumping it to the out in DebugProbes.dumpCoroutines

Previously it was done intentionally to reduce synchronization window of DebugProbesImpl, but still have a consistent view of the world and to avoid interleaving with other usages of out.

Apparently, applications with a significant amount of coroutines (e.g. Ktor) may spend a lot of time or even experience OOM in DebugProbes.dumpCoroutines. To make it usable in such applications, we dump coroutines incrementally without releasing a lock in DebugProbesImpl (thus significantly increasing synchronization window) while holding a lock on out to still have a continuous dump.

Fixes #1535 | 2019-09-16 17:21:33 | 3826ae58bc3651a6d76be256d51b866947581b60

Improve docs / fix grammar | 2019-08-05 13:32:34 | a7afd4657de916978898570d0baf86c0d73906f5

Fixed site publication in build script

:example-frontend-js:bundle task is fixed. | 2019-09-04 15:57:21 | a70022d6e7d9aa5d8fe27a2c46e987a2e8b85c21

Fix of a bug in the semaphore (#1477)

* Add a failing test for a semaphore

This test consistently fails for the current implementation. It
attempts to cause the following state: after `job2` increments
`availablePermits` but before it wakes up the acquirer in the
queue, the acquirer is cancelled. Then, regardless of whether
`RESUMED` or `CANCELLED` was written first, another cell in the
queue is marked to be resumed. However, this is incorrect: on
cancellation, the acquirer incremented the number of available
permits once more, making it `1`; thus, at the same time there
exist two permits for acquiring the mutex. At the next loop
iteration, a new acquirer tries to claim ownership of the mutex and
succeeds because it goes to the thread queue and sees its cell as
`RESUMED`. Thus, two entities own a mutex at the same time.

* Fix a bug in semaphore implementation

The fix works as follows: if `availablePermits` is negative, its
absolute value denotes the logical length of the thread queue.
Increasing its value if it was negative means that this thread
promises to wake exactly one thread, and if its positive, returns
one permit to the semaphore itself.

Before, the error was in that a queue could be of negative length:
if it consisted of only `N` cells, and `N` resume queries arrived,
cancelling any threads would mean that there are more wakers then
there are sleepers, which breaks the invariants of the semaphore.
Thus, if on cancellation the acquirer detects that it leaves the
queue empty in the presence of resumers, it simply transfers the
semaphore acquisition permit to the semaphore itself, because it
knows that it, in a sense, owns it already: there is a thread that
is bound to resume this cell. | 2019-09-03 13:43:23 | 9a62f27d1fe53552b0838156c17adc3b68dcc585

Repaired some of ListenableFuture.kt's cancellation corner cases.

This fixes:
  - Cancellation without an untrapped CancellationException propagating
    through a Callback; isCancelled() is the correct way to check for
    cancellation
  - Bidirectional propagation of cancellation through
    `asListenableFuture()`
  - The cause getting lost in the `asListenableFuture()` future  when
    cancelling its `Deferred` parent with a cause

This also:
  - Extensively documents the package and the contracts created by the
    promise-creating extension methods and `future()`
  - Uses `getUninterruptibly()` for speed
  - Uses `AbstractFuture` to make as certain as possible that
    `Future.cancel()` will return `true` at most once
  - Should clear up rare spooky race conditions around
    cancellation/interruption in hybrid Coroutines/Guava Futures
    codebases

There are probably a few more interesting corner cases hiding in here,
but this should be a good start improving the correctness of `.guava`'s
adapters.

This is a squash commit of kotlin/pr/1347, rebased on develop:

- Incorporated first-round feedback.

- Merged CancellationToCoroutine into ListenableFutureCoroutine to save an
allocation.

- Documented and tested for null completion of asDeferred()'s parent
Future.

- Renamed a cancellation test case for clarity of purpose.

- Split asDeferred() documentation between KDoc/details

- Implemented InternalFutures faster-fast path. Documented. | 2019-07-16 20:19:17 | 57cc36454da6851ecd2a00abe7cfd6ee6e06928f

flow: fix recursion in combineTransform<T1, T2, R>() | 2019-08-23 14:21:37 | 1f5ab53f7c7259fee1d28994b6402f40669f8a52

Introduce CoroutineDispatcher.asExecutor() extension (#1457)


Fixes #1450 | 2019-08-22 12:20:38 | bcf4a8cba083e5650b1c63a05da481f1b61c3e75

Add skip_snapshot_checks flag for snapshot train debuggability | 2019-08-21 14:08:34 | 6ca6ed5af208f72d443f747b7953c073acc4624d

Merge branch 'master' into develop

# Conflicts:
#	docs/coroutine-context-and-dispatchers.md | 2019-08-09 15:03:25 | a6da28e45948a4197fa3e3b80aa29bcee1f042f0

Renaming switchMap to flatMapLatest to better reflect its semantics and to have a consistent and meaningful naming scheme for the rest of the 'latest' operators

    * Make flatMapLatest pure, do not leak cancellation behaviour to downstream
    * Make *latest buffered by default to amortize constant re-dispatch cost
    * Introducing transformLatest
    * Introducing mapLatest

Fixes #1335 | 2019-07-28 18:59:25 | 3a958845a7f091fc9f3218aae20abed17c9e57be

Fully copy CoroutineInfo for DebugProbes.dumpCoroutinesInfo, it is re… (#1368)

* Fully copy CoroutineInfo for DebugProbes.dumpCoroutinesInfo, it is required for IDEA integration (field is left as internal deliberately)
* Make CoroutineInfo non-data class | 2019-08-09 14:36:25 | 0172998c5df4dc219c17f03d03502a42998f535e

Get rid of NonRecoverableThrowable, mention way to opt-out stacktrace… (#1420)

Get rid of NonRecoverableThrowable, mention way to opt-out stacktrace recovery in debugging.md | 2019-08-09 14:32:34 | 897f02e18a8538b53f1eeb6157a1c0cff0b65476

coroutine-context-and-dispatchers.md: Improve article usage, fix typos, reword phrases for better readability | 2019-08-07 15:27:21 | 28241ebd08977fc323d41366ed0c6705f9285095

Use setTimeout-based dispatcher when process is not available on the … (#1409)

* Use setTimeout-based dispatcher when process is not available on the target runtime

Fixes #1404 | 2019-08-05 14:59:11 | 2fc234cb6d24ee3f65a7aa35e4aeea6e506315d2

Update Guava to the latest version 28.0

This fixes vulnerability CVE-2018-10237
See https://ossindex.sonatype.org/vuln/24585a7f-eb6b-4d8d-a2a9-a6f16cc7c1d0 | 2019-08-05 11:58:23 | db95996ceb2758dfc7ccfe9ac805dace2e89128f

Flow.kt: fix typos and rephrase some expressions for better readability (#1408) | 2019-08-05 11:12:26 | 41428a3673f84c40766c9f65421f1649cffb328d

Better docs on coroutines debugging property

* Mention in the guide that `-ea` turns it on.
* Give a link to DEBUG_PROPERTY_NAME instead of newCoroutineContext.
  The later does not have details on its page anymore, since
  the details were only mentioned in JVM version.
* Move description in of debugging facilities to DEBUG_PROPERTY_NAME
  in the code. | 2019-07-23 13:33:07 | d78084b32295c923e2b8312a24729281f19517ca

Properly specify transitive dependencies for kotlinx-coroutines-debug | 2019-07-19 11:16:14 | 2f5036365b035912ce3efd25c307f70479bd9908

Move event loop infrastructure to common code

This makes code of EventLoop (including its task queue impl) shared
between JVM and Native making support and further fixes easier.
It it not actually used in JS and DCE should remove it. | 2019-07-02 12:30:47 | 98a970559601222de378d89920a8f4710d6baa31

Recover stacktraces for no-dispatched continuations, so recovery works in 'suspend fun main' cases to further improve user experience

Fixes #1328 | 2019-07-16 12:36:59 | f22604b01788784fd06b5f01554dc4800e7ff183

Rewrite assertions so that they are checked only in debug mode

* Make sure assertions are absent on native and JS
* Only print full toString for Job in debug mode | 2019-07-02 13:21:22 | 583d39dd4fe1d8f488df3e384901aa19f95166e2

Decouple asFlow from batchSize and move it to buffer instead, promote… (#1279)

* Optimize Publisher.asFlow and fix conflation
* Use channel.receiveOrNull instead of for loop iteration
  (it is more efficient)
* Calling Publisher.asFlow().produceIn(...) uses a single channel
  and is implemented via Publisher.openSubscription() | 2019-06-26 09:09:32 | 502610e7af760a73ea974f9c7cb75ec26a14d167

Unmute debugger test that were broken in 1.3.31, increase debug test timeout (slow CI), make shutdown more graceful by reducing timeout per thread (slow CI + unfortunate timings) | 2019-06-24 17:53:53 | bb97ffbb069774f2ba6ceb8e7dc4c6a2263ef9ff

Update "Shared mutable state and concurrency" guide with best practices

* Properly use structured concurrency in the example code.
* Also remove a special not on <= 2 core CPU, which is no longer needed
because default dispatcher has always at least two CPUs.

Fixed #1241 | 2019-06-01 11:18:42 | d94652feec64040c2c77af630fc4df30032e0efc

Enable R8 optimization of Dispatchers.Main loading

The developer still has to disable the FastServiceLoader manually
if they're using R8.

R8 is then able to optimize away the ServiceLoader and reflection
entirely, resulting in direct class instantiation and no extra I/O
on calling thread.

Fixes #1231 | 2019-05-30 12:17:51 | b9b7d828b18b2462817b6ed0c1a56233a4b6fcf4

Use identity hash code on K/N for debug strings

Fixes #1237 | 2019-05-31 11:39:08 | a3f150e66f7c47e0a0cefed4d9aa03199dff9e7f

Amortize the cost of coroutine dispatch using message queue in all JS dispatchers.
Use Promise.resolve and process.nextTick as dispatch mechanism for cold starts | 2019-03-01 11:25:23 | b7e1499b966175782cf2a5045c5bd3bb95a63b8c

Documentation improvements (#1229)

* Improve MainCoroutineDispatcher.immediate documentation
* Remove obsolete readme and package descriptions
* Clarify possible replacement of onCompletion parameter in produce
* Add paragraph about parent cancellation to async (Mention structured concurrency, but do not explain it there as the term should be easily googlable).

Fixes #1219
Fixes #994 
Fixes #787 | 2019-05-31 10:16:19 | c81dc91159dd1e33060ead8eeccc78df94c4649d

New flow builder: channelFlow (and its alias callbackFlow) and supple… (#1214)

New flow builder: channelFlow (and its alias callbackFlow) and supplementary ProducerScope.await method

Rationale:

    * Can be used in different context without breaking context preservation
    * Can be used to build concurrent operators such as merge
    * Can be used to integrate with callbacks
    * Is less error-prone than flowViaChannel because requires explicit await() call

Partially fixes #1210 | 2019-05-27 21:37:46 | b08d61c6c25d1a030ef37b6788b9ed3922520c85

Improve coroutine exception handling logic

  * Wrap exceptions into CE if parent cancels its child. This is possible because now we can be sure that no one is invoking `cancel(Throwable)`, thus if parent cancels its children, an exception is definitely handled.
  * Now exception is handled only once

First part of fix for #689 | 2019-05-17 08:55:17 | b0f6e05822f225afba43ed6e728669fe320146d8

Fix overflow bug in Flow.drop | 2019-05-20 07:45:03 | e35637a9faabb021d7a5efdc5509910cb499cd7a

Fixed Dispatcher docs

* Fixed typos
* Added reference to kotlinx-coroutines-test for testing `Main` dispatcher | 2019-04-27 19:32:57 | a2499a3ffe7522b8881a41ada45ce1779494be51

Ensure that there are no references to atomicfu in classes

* Updated to 0.12.7 version of atmoicfu with fixes.
* Added test that that is no references to atomicfu in any of the
  resulting class files.

Fixes #1155 | 2019-05-02 23:56:40 | 485eab1611433e49bd1d7c4a302b4825daf0d2e9

Knit: fix handling of backquote when making anchor reference | 2019-05-06 23:46:46 | 80039323d7ef284c3c4b851a6f3a91c46b3d7971

Knit: fix handling of backquote when making anchor reference | 2019-05-06 23:46:46 | b81f5f0ad73bc163a01a2ec88e2cb2e3d61927e1

Fixes kotlin-coroutines-test TestCoroutineDispatcher docs

Fixes #1163 | 2019-04-30 21:27:20 | 9614536ff093c99fc7febd5e31547ede8c8ceb5d

fix: broken anchors | 2019-05-06 07:26:16 | e3030e36945d79d7e54f0decaeef099a1720efcd

kotlinx-coroutines-test cleanup

    * Yield support in test dispatcher
    * Allow partial override of coroutine context
    * Code style fixes | 2019-04-25 21:07:56 | 9e5f9ab46506369f759d72e1195d9d7eb3ef1116

Flow operators: (#1132)

Flow operators:

    * switchMap
    * debounce
    * sample
    * Update RxJava version to 2.2.8

Partially fixes #1107 | 2019-04-24 14:14:03 | fe820bad2dc0743281f6ad130824114507a0a00a

AtomicFu version 0.12.5

This should really fix processing of class files

Fixes #1116
Fixes #1064 | 2019-04-22 18:05:50 | 26a14eef3c6fdf9480719dc1bc25b249b58bcb87

Fix atomicfu post-processing and dependencies

* Update to atomicfu 0.12.4, which fixes plugin operation with
  kotlin-multiplatform
* Remove explicit dependencies (plugins adds them automatically)

Fixes #1116
Fixes #1064 | 2019-04-19 15:51:05 | e1ac2e5c193654469468a04e4cadced3e3040e63

Add a period in the "You can get full code here" blocks and other small fixes | 2019-04-21 07:51:25 | 69c26dfbcefc24c66aadc586f9b5129894516bee

Knitted links and fixed minor style issues in test docs readme | 2019-04-21 08:21:59 | 445e798c3406c182337636026188fefd9f1cc950

Add README.md description of runBlockingTest, TestCoroutineContext, TestCoroutineDispatcher, TestCoroutineExceptionHandler. | 2019-04-21 01:10:09 | c0a8d1c078b6c3de49e3f6a4f77f2c713f47c7ac

TestCoroutineDispatcher code style cleanup and todos

* Kotlin libraries code style: explicit visibility and other style-issues
* DelayController.currentTime() is val
* Using atomicfu in place of AtomicXxx classes
* Added version to ExperimentCoroutineApi annotations
* Some todos are added for future consideration
* Fixed long overflows on delay (clamp) and added test
* License headers added to files
* Tests moved to an appropriate package
* Additional ordering tests using TestBase "expect" infrastructure | 2019-04-20 15:12:08 | d76456f1b6a92868e9f2f01309167003c94c66ca

fix typo: Coroutine"s"Context | 2019-04-17 08:58:42 | 43983505033a67719b0621572b868fc55f492016

Rework purity concept:

   * Purity is a way too polluted word and it is hard to tell what it means in Flow
   * Rename "purity" to "context preservation"
   * Prohibit changing the context, ignore only Job and CoroutineId (for debug mode) in SafeCollector
   * Reword documentation, add more samples
   * Add explanation for deprecated Rx-like methods | 2019-04-09 16:43:11 | d3cc25ff32a80de93ad5eaa912c8b54036c0f978

Unmute test that was failing due to JS BE bug | 2019-03-25 16:21:40 | 0d69e1353d9fcd5867fe74e0912d3f36dc7d8ea8

Merge pull request #1023 from Kotlin/debugger-sm-bypass

Improve stacktrace merge heuristic: skip state machine meaningless fr… | 2019-03-22 15:02:32 | 4ebc1306dd6e0a5929a9044bd65ff92edfeac8e0

Merge branch 'develop' into debugger-sm-bypass

# Conflicts:
#	kotlinx-coroutines-core/common/src/Timeout.kt | 2019-03-22 14:36:33 | 1ea4da4e510f68cb9311b140d2c2e13e8acefe6b

Rename CoroutineState to CoroutineInfo and improve its API

  * Rename jobOrNull to job
  * Replace coroutine with its context
  * Add check-and-act on isInstalled flag into synchronized blocks in order to avoid spurious memory leaks during uninstall
  * Replace WeakHashMap with Set to simplify debug probes | 2019-03-05 15:43:13 | 2496dc256712eb3bb282d3291cedc1497a09cdc8

fix documentation typo | 2019-03-14 13:49:36 | 325b0ad1ee98450e2598e2c0738a398e7b23d959

Add test about threading for immediate dispatch. | 2019-03-14 23:47:26 | a69f73613977bda2c25523cfcae93d6f74bd9cc0

Rename DispatchException to CoroutinesInternalError and make it an Error to better reflect its semantics | 2019-03-07 12:15:40 | 132c1e3f029610208607dcac4d55ed05f62d0642

Get rid of quadratic complexity during stack unrolling in debug agent in 1.3.30 | 2019-03-05 15:26:09 | e35baa43d379e9a7ee3eadc392665dc011268525

Make JobCancellationException copyable in debug mode

This simplifies trouble-shooting of "what caused cancellation", as you
can print out exception and see its recovered stack trace. | 2019-03-04 19:20:25 | d293639980d7a6141394dc8174180f221daa4787

Add operator invoke for CoroutineDispatcher | 2019-02-11 13:21:44 | 57540d452ef82207f14c4235ee690a4323a343fa

Hide cancel(Throwable), introduce cancel(CancellationException)

Job/ReceiveChannel/BroadcastChannel.cancel(Throwable) is now hidden and
cannot be invoked from a newly compiled code. This function had broken
semantics when used with an arbitrary exception. A safe replacement
is available in the form of cancel(CancellationException) where
CancellationException can be used to supply additional information
for debugging purposes.

Fixes #975 | 2019-03-01 09:08:43 | 0aad8f1274c4be7f02ac8f361eb0685d4b438243

Improve CoroutineDispatcher documentation | 2019-02-27 11:19:21 | 08f8214ddbcdbf0becc2b5264caf29080f04576f

Promote Dispatchers.Unconfined to stable API | 2019-02-27 10:16:00 | 9863de1401a90de61307c1ade952ebd7ac65a88a

Promote MainCoroutineDispatcher.immediate to stable API | 2019-02-27 10:02:03 | 4fc4fd555f784775360c464e178d7662291f5fba

Cancellation in consumeEach should dispose Rx Observable

Fixed bugs in MaybeSource/ObservableSource.consumeEach implementation
so that observable is disposed on cancellation.

Also optimized implementation of bridge function to avoid extra dispose
calls if possible (this is permissible by specification, though)

Fixes #1008 | 2019-02-26 16:03:24 | ae8a8743dd37a442c7882a04d1da0de367671ccd

Replace UI with Dispatchers.Main in CoroutineScope documentation

Fixes #803 | 2019-02-27 14:22:29 | b37c296f03ee38cd5cdf5091fa67a010c6a3f6d3

API Cleanup based on review

- removed asyncTest
- added pauseDispatcher(), pausDispatcher(block), and resumeDispatcher() API to delayController
- removed dispatchImmediately (the name was fairly opaque in an actual test case)
- added exception handling to runBlockingTest | 2019-02-12 02:46:06 | 8328a39b39d60fe4e44b6e1e5796d37ab02cbbae

Update coroutine test dispatcher to use structured concurrency. | 2019-02-11 23:40:52 | 9a8842956015a018ee4fa37631052fac82553d36

Make SupervisorCoroutine implement ScopeCoroutine

* Implement ScopeCoroutine in SupervisorCoroutine
* Do not indent scoped coroutines in debug strings

Fixes #915
Fixes #916 | 2019-02-20 15:31:02 | 8d506b3757777664e007b1287ce3c4cb943f4ae5

CoroutinesTimeout debug rule for JUnit 4 (#991)


Fixes #938 | 2019-02-20 14:00:57 | 2bdd4605e797a88019565938cf4a4daca92593a5

Reknit after fixing indentation in code samples | 2019-02-20 10:31:38 | 3785348e32e7180efe86862bc84da14d3631a98d

Update named arguments referenced issue

The issue previously reference was marked as fixed for one of the two problems it was about,
and a new one has been created for the remaining issue that is relevant here. | 2019-02-19 15:17:56 | 919284b159fec82ef2b6f4da9af5f88248e0713a

Obtain real stacktrace of running coroutines in debug agent

  * Capture thread of coroutine when it's transited to running state
  * During dump retrieve the stacktrace of captured thread for running coroutines and merge it with metadata-based stacktrace

Fixes #997 | 2019-02-20 08:43:23 | f18878f632dd28ad8ff847eb4f95e9ed50f373bb

Check that worker thread belongs to the same scheduler in dispatchers.shutdown

Fixes #990 | 2019-02-19 16:01:48 | 703a286e8b55d353b4ebc84320710562d627c96b

Add section about Android in debug agent readme | 2019-02-01 15:13:39 | a68376ceea89bc3599203a4c36e81cd177fc37cd

Additional documentation section about debug mode and stacktrace recovery.

Not included in a guide intentionally | 2019-02-01 11:54:06 | 418ba80a7bb0b8661823fbb325b7edac526ab7db

Call initCause during reflective exception copy in runCatching block to avoid DispatchException when initCause throws

Fixes #933 | 2019-01-15 12:18:43 | 3e4d808200e990e4b5c7e4755b23a5314fdb662a

Move debug example to a proper package | 2019-01-29 09:41:02 | c055f025f4fd3d3dc6a4ceecb798091b31f986e9

Migration to new multiplatorm plugin (#947)

Migration to a new multiplatform plugin
  
  * kotlinx-coroutines-core-[common|js|native] are merged into one core module with multiple source sets
  * Folder structure and readme are restructured
  * Publication process is patched to preserve backward compatibility with artifact names | 2019-01-28 08:34:24 | e50a0fa78aae052e128e8b17666e081e4dfc78be

Update CHM in test to containsKey for KT-18053 fix in 1.3.20 | 2019-01-23 14:49:17 | a672d5f58040f9a14661b157e085c63a7c8b2ff7

Replace old UI dispatcher name with Dispatchers.Main | 2018-12-31 13:52:33 | 8c071247dbe5928ebf5138471c1ac905c5de4018

Update coroutines-guide-ui.md

[Update]
- typo: what you might want to express here is `JavaScript event dispatch thread ` | 2019-01-08 16:01:55 | 66f0123b5fe98f861b46ef1400c8b11bc40c2ace

More idiomatic and readable example for coroutines debug module readme

* Idiomatically use suspend functions
* Idiomatic parallal decomposition with coroutineContext/async
* No GlobalScope
* Use less vertical space & more concise code to aid readability
* Link to full code file (in tests) | 2018-12-22 15:40:39 | b65dc7fe0f75b7dc76e84205c3b57c0aff09c269

Update CHM in test to containsKey for KT-18053 fix in 1.3.20 | 2018-12-22 13:38:36 | 4b60d013508c865dd8430f334e89481d93893ab1

EventLoop integration and reuse for runBlocking and Unconfined dispatchers (#889)

EventLoop integration and reuse for runBlocking and Unconfined dispatchers

* Event loop that is created by runBlocking or by Unconfined dispatcher
  is reused across the same thread to prevent blocking of the loop
* Semantics of runBlocking and Unconfined are fully retained
* DefaultExecutor also registers itself as running event loop and thus
  cannot be blocked by runBlocking
* Consolidates thread-local handling for native
* Also fixes thread-local memory leak on JVM (does not use custom class)
* Restore BlockingEventLoop class name for runBlocking event loop impl
* Internal API for custom waiting loops to be used by kotlinx-io

Fixes #860
Fixes #850 | 2018-12-21 13:41:39 | 51738243c980165ad4fb426105baf6e00d02f87b

Dokka links fixed | 2018-12-18 13:26:58 | 89d43afab3f1090a25697c1e8cebd7faac6612c1

Debug improvements (#900)

Debug improvements

* Rename printHierarchy to printJob and hierarchyToString to jobToString, introduce corresponding methods for scope to simplify scopes debugging
* Remove CoroutineState.job in favor of CoroutineState.jobOrNull
* Use runCatching in Continuation.toDebugString to avoid crashes on some Androids with R8 issue

Addresses #858 | 2018-12-18 09:47:50 | 115a13933adbce880a72c1653b7be94eba566202

Ignore exception on cancel/fail race in CancellableContinuation

There seems to be no other way to satisfactory fix the problem of
a race between cancellation on CancellationContinuation and
concurrent failure of the corresponding background process in a
way the distinguishes "failure from cancellation attempt" from
a "true failure" without placing undue burden on anyone who is
implementing `await()` extension function for various future types.

- Added testTimeoutCancellationFailRace that works as a perfect litmus
  test; being allowed to run for a while it reliably detects various
  problems in alternative approaches.
- Optimized CancellableContinuationImpl; merged its code with
  AbstractContinuation class that is not needed as a separate
  class and removed.
- Deprecated and hidden CancellableContinuation.initCancellability();
  it is now always invoked after the end of the block that was
  passed to suspendCancellableCoroutine.
- Deprecated `holdCancellability` parameter to an internal
  suspendAtomicCancellableCoroutine function.

Fixes #892
Fixes #830 | 2018-12-15 11:12:47 | 876e9bab95d34f311be030a0706497564f96d95a

Introduce test module with testable main dispatcher (#749)

Introduce kotlinx-coroutines-test module with API to set Dispatchers.Main 

  * Dispatchers.setMain and Dispatchers.resetMain extensions
  * Use real factory in HandlerDispatcher instead of using initialized-once statics (prevent ExceptionInInitializerError)
  * Improve MissingCoroutineDispatcher diagnostic
  * Do not cache failed results in test dispatcher to allow reusing it between tests 
  * Deprecate HandlerDispatcher.Main (was accessible only fom Java API)

Fixes #746
Fixed #810 | 2018-12-17 16:49:12 | 4327b2120558c0e232b522b32b3427dc2ad02bf5

fix small typo of async method | 2018-12-16 07:09:02 | 054fcc2b68f9d9933981d65c485af88dba8f89d6

After merge fix: resolve clashes between type alias CoroutineStackFrame and jvm.internal.CoroutineStackFrame | 2018-12-13 09:57:37 | cd162d356e7dbb8a6ed8e02ceae0133af2df95b5

Merge pull request #876 from Kotlin/debug-agent

Coroutines debug agent

Fixes #772 | 2018-12-13 09:39:45 | a5a7cdb86a10d6fcda61c2b9fc55963b86ca8947

Repackage byte-buddy along with debug agent (so it shouldn't be a dependency of target process), use shadow plugin for that to avoid clashes with other byte-buddy versions and publish shadow jar instead of regular one for debug module | 2018-12-13 08:58:29 | 3781a821a11a64670b5a3ffa3c276f1533332ad7

Reknit after docs fix | 2018-12-13 08:58:24 | 75f634c56e3655d475bd93c4d7a5fc7242744d69

Speedup linerizability tests, make conflation part of helpClose (fixes nightly stress failure) | 2018-11-19 16:31:51 | b733f7d0cfd3c8fcca234d7d49f4350dfeb36264

Debug agent cleanup

  * Readme
  * Do not fail on Windows during signal handler installation
  * Do not warn about missing artificial stackframe | 2018-12-12 16:08:32 | 7a6fd89c04b3ee972136c0648700f8500dfb0f23

Rephrase default dispatcher documentation | 2018-12-12 10:36:54 | e06585a482f0f94d2819c24af8ac42582d38af6a

Get rid of top level 'debug' folder | 2018-12-11 16:49:07 | 7520c978464e2f3b1cc075dea36a9f11088e2d85

Unreachable code fix | 2018-12-11 16:44:49 | f64bcde03b4c5e46d63f19d5dcb3b1738c59eefa

Debug agent code style | 2018-12-11 16:20:39 | 12695b763715338149e0bcaa3633a6e0296fc361

Code style in test code fixed | 2018-12-10 13:11:06 | 8e9e4d1706083dd5fb6fcc4c89d2a65caa33914c

Debug agent optimizations

  * Do not store creation stacktrace of the coroutine, recover it from ArtificialStackFrame
  * Reduce lock window where possible to avoid contention
  * Avoid stacktrace copying where possible | 2018-12-10 17:19:35 | 5a80d2a0b0c52121a0788acc036030812fea9f59

Debug agent to track alive coroutines

  * Can be installed dynamically or from command line
  * Captures coroutine creation stacktrace and stores it in completion, automatically enhancing stacktrace recovery mechanism
  * Allows to dump and introspect all active coroutines
  * Allows to dump Job hierarchy
  * When installed from command line, dumps all coroutines on kill -5
  * Probe support in undispatched coroutines | 2018-12-10 08:41:00 | c7239ac4915df344add7386c8aa19038499f5e4b

Scoped builders and exception stacktraces synergy

  * Recover stacktraces via both fast and slow paths in scoped builders
  * Merge stracktraces of nested scoped builders, eliminate common prefix so it looks like a flat profile
  * Optimize stacktrace-related machinery
  * Copy meaningful part of original exception into recovered one, rename "Current coroutine stacktrace" to "Coroutien boundary"
  * Rename Exception.kt to StackTraceRecovery.kt to avoid name clash with another Exception.kt | 2018-11-27 15:13:47 | 1032f5801a9719fbe67325daec944104eff793a9

Initialize JavaFx more accurately, do not leave dispatcher in uninitialized state in case of unexpected failure

Fixes #816 | 2018-11-27 12:57:16 | 69a2d9273288dec1e29a81f2c314ccf23ae99093

Fix: default dispatcher doesn't work with jsdom | 2018-11-06 16:46:00 | bb0ad4ae2772c9c4af0e3b44b129423cf5ae0c58

Sanitize class names received from Kotlin debug metadata | 2018-11-12 17:04:35 | 25a886e9ee0047f755e8d32f496ced3760e7ec64

Debug optimizations:

  * Extract call to suspendCoroutineUninterceptedOrReturn behind recoverability check
  * Cache exceptions constructors into WeakHashMap in order to avoid expensive ctor lookup | 2018-11-02 17:06:14 | e3b80d9c7198728a5566cb2c74da61ee115e61d6

Basic exception stacktrace recovery mechanism

  * Implement CoroutineStackFrame in CancellableContinuationImpl, DispatchedContinuation and ScopeCoroutine
  * On coroutine resumption try to reflectively instantiate exception instance of the same type, but with augmented stacktrace
  * Recover stacktrace by walking over CoroutineStackFrame
  * Recover stacktrace on fast-path exceptions without CoroutineStackFrame walking to provide more context to an exception
  * Unwrap exceptions when doing aggregation in JobSupport
  * Add kill-switch to disable stacktrace recovery, introduce method to recover stacktrace on the exceptional fast-path
  * Add `suspendCoroutineOrReturn` on exceptional fast-path in await in order to provide "real" stacktrace

Design rationale:
All recovery of *suspended* continuations takes place in Dispatched.kt file, the only place where all calls to "resume*" ends up, so we don't have to remember about stacktrace recovery in every primitive we are implementing. But to provide more accurate stacktraces we *have to* recover it on every fast-path for better debuggability.

Fixes #493 | 2018-11-02 12:55:20 | 675c30c4b96533a374ae36b144dbe6b26634b97b

Merge pull request #791 from Kotlin/undispatched-cancellation

Use final Job state in undispatched coroutine completion | 2018-11-06 12:55:53 | 666ea6e554fa52ea03504ab618543ca26e20ce3b

Add ExperimentalCoroutineDispatcher to binary compatibility check, restore binary compatibility in Ktor | 2018-11-06 11:03:39 | e3ab2a692a6da18ee9213a124a4c111235046c75

Add scheduler name to ExperimentalCoroutineDispatcher

Fixes #661 | 2018-10-31 13:15:35 | 92327322442d4c8be225067ff6e16c6827f8b38e

fix link | 2018-11-05 16:56:31 | 64f2b2006b5a7cf2a760ec976dd28e988ce122d0

fixed typo | 2018-11-05 14:28:47 | ace91872cc56113fa10e844069f46eb3bbec9c95

Use final Job state in undispatched coroutine completion

  * When using in-place coroutine builders, startUndispatchedOrReturn will return block's final value on fast-path. This is not correct because if any of the children had failed, whether or not exception is thrown depend only on child timings. Moreover, in the face of such race exception may be ignored if scope owner wasn't cancelled or is missing.
  * Introduce special hack for withTimeout and withTimeoutOrNull to ignore TimeoutCancellationException on the fast path
  * withContext, coroutineScope, supervisorScope, withTimeout and withTimeoutOrNull are affected and now check cancellation on fast-path | 2018-11-04 12:32:34 | 78832e3bb38560f4c4d55cdba436bf7bc9b761ca

SchedulerTask is now an abstract class with optimizations for jvm

* It removes the need for a separate SchedulerTaskBase
* submissionTime and taskContext are marked as @JvmField
* DispatchedTask is also an abstract class
* resumeMode is marked as @JvmField | 2018-11-01 21:10:39 | aa374a95dc7e6df4fd6458fe6d8abe95e2953fce

Scheduler: capture TaskContext for afterTask before running it

This is not strictly needed, since the reusable Task instances
(DispatchedTask) should be always reused in the same context, but
this makes the code more resilient to future changes. | 2018-10-22 02:31:23 | e64d9b706cb5180260e4d95fa3a990449163da51

Avoid allocation of CoroutineScheduler task object

* DispatchedContinuation and CancellableContinuationImpl have all
  the necessarily field to be scheduled | 2018-10-21 17:08:49 | 16e20347dc5557063742ea8a06dbe5162a211c25

Publish: Comments style fixed | 2018-10-26 20:02:08 | f18b9f580faff47af054cb6c0942cd15ccc7675d

Fixed exception handling for publish builder

* Test that ensures proper parent cancellation
* Stress test to ensure that exception in publisher always handled
  by parent
* Also fixed race between request & signal completion that did not
  reproduce before | 2018-10-23 05:28:12 | ac848e872da94e01ed60a6bfecbfe3926229f44f

Reactive streams integration conformance to TCK verified & fixed

* Throw NPE on null subscriber
* Throw IAE when requested n <= 0 elements
* Do not sent any notification after cancel() | 2018-10-20 16:50:05 | 8cced247b1d83f7885f21be8c9b0354dab0fd1f3

fix minor typo | 2018-10-30 19:14:20 | a223f351c1dac80443b02ab905d46acbf4a66720

Implement yield for unconfined dispatchers, documentation improvements

Fixes #737 | 2018-10-23 09:29:56 | c33ef61d4502b71e0cdc354337f261917102d1c6

fix: make snippet as non-runnable | 2018-10-23 12:33:12 | 0661d477332205c23defe65d51e4063cd009e023

Prevent temporary leaks in HandlerDispatcher by properly handling
cancellations in scheduleResumeAfterDelay() implementation | 2018-10-16 22:30:40 | e321394c359758659a07ad1c98429ec2acd8ea59

fixed typo | 2018-10-19 21:16:57 | d981966acf780078119493c1f64e30dc9fa6e02e

Merge branch 'release-candidate' into develop

# Conflicts:
#	core/kotlinx-coroutines-core/test/RunBlockingTest.kt
#	docs/coroutine-context-and-dispatchers.md | 2018-10-18 14:40:10 | a7e10146781744f6df3865a1a33fa4e7cbc2c0b6

Merge branch 'context-elements-opto' into release-candidate

# Conflicts:
#	common/kotlinx-coroutines-core-common/src/Dispatched.kt | 2018-10-18 13:59:46 | cd37d8e8b30656a92a883b646fe050ff479bafdd

Minor optimizations of UndispatchedEventLoop | 2018-10-18 12:17:25 | 23d435b17a1aaaba86cc71656a4080547c4c727e

Do not step into thread-local event-loop on CancellableContinuation#dispatch fast-path | 2018-10-18 08:54:56 | faa477496bc2c05dad4034847a3f7d3f6aae3818

Use FIFO queue in undispatched event loop | 2018-10-17 16:51:50 | 09b9d6c157c9d7c6ec84052c16e64d3eebd0bc8e

Move undispatched thread-local event loop to dispatched continuation, execute all undispatched tasks in that loop to avoid SOE in user-supplied unconfined dispatchers and 'immediate' main dispatchers. | 2018-10-17 15:37:36 | fd54bc4882357771d0bec29abbd6e99dfccab725

Rework Dispatchers.Unconfined to use thread-local event loop

Fixes #704 | 2018-10-17 07:57:30 | 7ee722a595b416023c69d987fb7e4682ac0ffe91

Cache result of ThreadContext#foldAll in the field of DispatchedCoroutine to avoid context fold in tight loops

Fixes #537 | 2018-10-16 12:47:26 | ae85797805f93f98bfad64f5f91ba97e4f2c1fbc

Dokka fixes

  * Provide module with Kotlin 1.3 API because Kotlin 1.2 from Dokka can't read classes marked as "from the future"
  * Add runConfiguration dokkaStubs which is included only during dokka task with some classpath magic for Kotlin 1.3
  * Add package.list for slf4j
  * Fix unresolved types/links in documentation
  * Suppress all internal/inherited API | 2018-10-13 12:40:32 | 706e39363b586127b29e28fd97d476129c22fe93

Make EventLoop internal, @JvmName("from") for ExecutorService.asCoroutineDispatcher | 2018-10-11 16:09:44 | b6eca2a62158b2dc8d9b41d86040924095dca662

Use toString implementation for continuations to leverage debug metadata

Fixes #679 | 2018-10-10 11:46:53 | 4220ca2106bea653f2831f19c2c93752ea0e468a

Cleanup: get rid of workarounds, cleanup guide, suppress/fix compilation warnings | 2018-10-10 08:56:41 | 1bdbb3ef364006515157b5884dc663d9c3172c6c

Experimental annotation revisit:

  * Mark our API annotation as experimental with corresponding warning or error
  * Get rid of workaround for new inference bug
  * Migrate to compiler arguments instead of annotations | 2018-10-09 16:06:29 | e6e82391c33716033996ef6718756feab641816c

Restore TOC in the root coroutines-guide.md file with links to individual files

* Knit supports new TOC_REF directive for that.
* Reknit docs (also fixed out-of-date sample file). | 2018-10-08 17:20:12 | 715acd33e564dbff128a12b10ec2c6e24240d330

Migrate to Kotlin 1.3 coroutines, drop experimental from package

* Features based on version 0.30.0
* Uses Kotlin version 1.3.0-rc-57
* Uses Kotlin/Native version 0.9.2
* Uses AtomicFu 0.11.9-eap13
* Replace SuccessOrFailure with Result
* Replace buildSequence and buildIterator with sequence and iterator
* Apply @BuilderInference on all builders (including extension methods to workaround inference bug) | 2018-07-13 07:33:25 | 0950dfa1fe114e3682a546e3e53ef34dec9dfd4a

Fix lost exception from dispatched withContext on cancelled job

Fixes #675 | 2018-10-08 13:13:01 | 0f94304c6ae46c8f0cec24dde29d2e7af9ae7e97

Mark newSingle/FixedThreadPoolContext as obsolete, document the reason

* The will be replaced by another mechanism in the future.
  See #261 for details.
* The proposed replacement is to use the standard java API:
  Executors.newSingleThreadExecutor/newFixedThreadPool
  and convert to dispatcher via asCoroutineDispatcher() extension. | 2018-10-06 13:36:13 | f5126d0a9263f0b73a57d17031c340f78e3a25bd

Lazily load Dispatchers.Main and provide a stub impl on failure

Also specified explicit public visibility for Dispatchers object.

Fixes #658
Fixes #665 | 2018-10-06 14:09:05 | 0ece3885d445b60d254dc0fb21c7c05c7ebfb1bf

fix grammar typo

removed repeated 'for' | 2018-10-05 13:16:33 | e7a0723e930d52c4cb4665c5a3918f883287c039

Short Dispatchers.Default.toString value ("DefaultDispatcher") | 2018-10-02 09:59:11 | ec8cbd252d20adcdc91149ae9129149b252d945c

Move UI dispatcher to common Dispatchers.Main (#641)

* Main thread dispatchers are grouped under Dispatchers object and are discoverable via ServiceLoader

  * Dispatchers.Main can be consistently used and easily discovered, its implementation is discovered with ServiceLoader
  * It allows us to add iOS Dispatchers.Main implementation in the future thus opening the door for multiplatform UI-dispatched code
  * Workaround for #626, now Android users can start migration to RC coroutines

Fixed #626 | 2018-10-01 16:01:16 | cfe699fb59d799ab22da23aae983cc34b1164f29

Never loose coroutines when CoroutineScheduler is closed

* CoroutineScheduler close/shutdown sequence now guaranteed that a
  submitted task is either executed by the scheduler that is being
  concurrently shutdown or RejectedExecutionException is thrown.
* RejectedExecutionException is caught by the coroutine dispatcher
  implementation and coroutines are rescheduled into DefaultExecutor
  if a (custom) instance  of CoroutineScheduler is being shutdown.
* Added stress test for coroutine scheduler closing. | 2018-10-01 07:52:56 | 4b0f4dec24b93db4e0e0abbfe59b115e886a30c1

Coroutine scheduler is used by default instead of deprecated CommonPool

* Documentation and guide are updated correspondingly
* "DefaultDispatcher" is used as a public name of the default impl
* Implementation is integrated with virtual time-source
* Shutdown sequence is reimplemented in a safe way for tests,
  makes "close" safe to use on custom instances.
* "close" on DefaultDispatcher throws exception just in case
* -Dkotlinx.coroutines.scheduler=off can be used to switch back to
  CommonPool

Fixes #198 | 2018-09-28 09:20:49 | 303708b27f8d997ae482e3106679a7d170bc16d7

Exception unwrapping logic rework, do not unwrap cancellation exception if parent can handle exceptions

It allows to properly handle only relevant exceptions by child without reporting the same exception multiple times, fixes suppressions hierarchy and allows to implement supervisorScope properly | 2018-09-28 09:29:21 | 88e72f9973810119f105f78768b59e19f6a49c26

Introduce SupervisorJob & supervisorScope

This change also fixes propagation of cancellation for Job() constructor.
When both Job() and SupervisorJob() are cancelled with exception (fail),
they cancel their parent, too. So we have similar behavior between:
* Job() and coroutineScope { ... }
* SupervisorJob() and supervisorScope { ... }

Fixes #576 | 2018-09-23 16:16:04 | 21f171c8cb09831e25acdeab5c667cf3c15a9692

Avoid OOM in thread-pool dispatchers, try to reflectively invoke setRemoveFutureOnCancel on executor instance and use default dispatcher if attempt failed

Fixes #571 | 2018-09-25 12:45:53 | e29f49799d118b5c3feb38886af3030d027e7b60

async and async-like builders cancel parent on failure

* Affects async, CompletableDeferred, and all Rx integration builders.
* This makes all coroutine builders totally consistent. They all
  cancel parent on failure, but they all consider "CancellationException"
  to be the case of "normal cancellation" that does not propagate to
  parent. The only missing case is Job() that should be fixed together
  with introduction of SupervisorJob().
* Note that "scoping" builders don't "cancel the parent", but rethrow
  the corresponding exception instead, so it that is how it gets
  propagated up the stack.
* This makes parallel decomposition exception-safe. You
  cannot loose an exception as along as default (child async)
  behavior is not overridden.

Fixes #552 | 2018-09-27 16:17:16 | 52bfdabfa1476f55c1b3880d43f49977fc8df943

Copy deprecated annotations on Job member to inheritors

* Makes them easier to find for cleanup
* Avoids bug with light classes | 2018-09-28 09:41:58 | ffda1da6aec27b51f0bc8640f0e48c8fcd1e8f59

Restore binary compatibility of Executor.asCoroutineDispatcher

Fixes #629 | 2018-09-27 18:19:38 | 18cc588106ff7f4c680831809e5af8d75063c689

fix broken links for kotlin web site (#628)

* fix broken links for Kotlin web site | 2018-09-27 15:42:04 | cbeef1039d7402939bac8ec4674e1a7b1adf993a

Merge pull request #588 from Kotlin/handle-exception-fix

Handle exceptions fix | 2018-09-25 21:00:29 | 25b4388ef2f94909acac51cf1e0206975cc4b84a

Add name parameter to Handler.asCoroutineDispatcher

Fixes #580 | 2018-09-25 13:40:30 | a180ff75e9f7c97189a2651e96f4212bff0b105e

Fix lost exception during cancellation in produce, fix integration with play services after rebase | 2018-09-25 16:16:02 | 1b22af7e462272cbc33fd019975ee3ec5dbf1b78

Merge branch 'develop' into handle-exception-fix | 2018-09-25 13:10:26 | 1e0a2f0ad358c49d97602ee01ecf76602721fa4f

fix compilation | 2018-09-24 17:29:00 | f30715955637d2006e17fda7f99d002877fedc1c

Docs for context/coroutineContext in AbstractCoroutine are fixed | 2018-09-24 17:29:42 | 2d8cad05755d47af7987f39385527d3bddb15377

Fix exception aggregation to ensure atomic handling of exceptions

* Removed legacy onFinishing handler support from JobSupport.
  - It is no longer needed, because handleJobException covers #208
* Fixed bugs that were masked by cancelling parent from onFinishing.
* Consistent "Finishing" state was introduced in internal machinery:
  - Job enters finishing state when it is failing or it is completing
    and has children
  - Finishing state cleanly aggregates all failures, tracks cancellation
    and completion status
* Job.isFailed is introduced as a consistent way to query the "failing"
  state of the job that was previously only implicitly available via
  invokeOnCompletion handler (cause != null means a failed job) and
  the documentation for both Job & Deferred is updated to reflect that.
* Source-incompatible change: Job.invokeOnCompletion boolean parameter is
  change to onFailing. Such handlers are now invoked as soon as the job
  starts failing and the root cause exception of the failure is consistently
  passed to all the handlers.
* The following internal methods were introduced to facilitate this:
  - Job.failParent(exception) is used by child to signal failure to parent
  - Job.cancelChild(parentJob) is used by parent to cancel child.
* Child never aggregates exception received from it parent, but uses
  it as it root cause if there is no other exception.
* JobSupport.handleJobException() logic for launch/actor is split into:
  - failParent - can be invoked multiple times on race;
  - handleJobException which is invoked exactly once.
* Exception materiazization is much lazier now, which should
  significantly improve performance when cancelling large hierarchies.
* Other minor perf improvements in JobSupport code.

Fixes #585 | 2018-09-14 09:52:50 | ecbc85cbdad134d868698e22c0fdd7220eaced0f

Typo fixed | 2018-09-22 13:28:37 | 63e3896d85f827f2e403ffd25593ac5d9af54715

Fix typo in deprecation message of JavaFx dispatcher | 2018-09-20 17:10:30 | 39a2c559b538b8681c0724d5ec3ee6058af4e1c3

Cosmetic fixes | 2018-09-20 08:25:56 | 2dd53204e7047e970f145281c11a9c834021b3a9

Improve HandlerDispatcherTest, check that jobs are actually executed | 2018-09-19 11:30:51 | 847eba7c935ed784e918d976c9c43464179a2df9

Reknit guide, fixed TOC in Knit with comma & verify mode in example-context-09 | 2018-09-19 11:49:42 | bca98f4e9ea3c485c8691209be32fee487f812fe

CoroutineScheduler: fixed race between createNewWorker & shutdown for tests | 2018-09-14 12:17:12 | 241e74e6a2cdadaa2753f40a326c732e95fac2d0

Fixed sporadic test crashes related to withTimeout and children

- The bug only manifested when withTimeout coroutine had children working
  in a different dispatcher
- A separate stress-test that reproduces this problem with much higher
  probability | 2018-09-16 12:31:13 | fa9586bc283d60427ad3e9162de7962da4b0ec1d

Updated dispatchers references in readmes and docs | 2018-09-11 16:16:49 | f189cec57d7d0751464a5939f1bbcbd32e15d7c0

Dispatchers are renamed and grouped in the Dispatchers object

* Dispatchers.Default — a default dispatcher for background asynchronous tasks
  (currently backed by FJP commonPool, a new dispatcher in the future).
* Dispatchers.IO — a dispatcher for blocking background operations (#79).
* Dispatchers.Main — a dispatcher for Android Main Thread (#533).
* Dispatchers.Swing — a dispatcher for Swing Event Dispatch Thread.
* Dispatchers.JavaFx — a dispatcher for JavaFx Application Thread.
* Old dispatchers are deprecated, CommonPool is deprecated, too.
* awaitPulse() in JavaFx and awaitFrame() in Android are top-level funs.
* Introduced HandlerDispatcher, SwingDispatcher, and JavaFxDispatcher types
  in the corresponding UI modules for type-safety and future extensions

Fixes #41
Fixes #533 | 2018-09-11 15:42:03 | dc29b071d4784e3739f89223ced2333ecd5408ad

Fixed hangs during thread termination in IO dispatcher

Fixes #524
Fixes #525 | 2018-09-11 12:38:14 | 750d468b3281570910d0cd4000d4e29702b25020

Invoke handler using invokeIt to avoid JS bugs | 2018-09-07 11:36:05 | c430e0797e87af77f812bbcfb8751e4a0e31ffc6

AtomicFU 0.11.5 to fix Windows compilation | 2018-09-04 14:58:45 | 61abcd224a13f674bffae096afa7250de262df87

typo fixed | 2018-08-24 12:24:02 | 1a1237083b14d5de8f13f66b7a4ba6d9e26183d7

Introduce IO dispatcher to offload blocking I/O-intensive tasks

Fixes #79 | 2018-08-23 14:27:19 | f5e67ba597acdfb90ef84d29e4d6028f3f17a6ba

Introduce ThreadContextElement API to integrate with thread-local sensitive code

* Debug thread name is redesigned using ThreadContextElement API
  where the name of thread reflects the name of currently coroutine.
* Intrinsics for startCoroutineUndispatched that correspond to
  CoroutineStart.UNDISPATCHED properly update coroutine context.
* New intrinsics named startCoroutineUnintercepted are introduced.
  They do not update thread context.
* withContext logic is fixed properly update context is various situations.
* DebugThreadNameTest is introduced.
* Reporting of unhandled errors in TestBase is improved.
  Its CoroutineExceptionHandler records but does not rethrow exception.
  This makes sure that failed tests actually fail and do not hang in
  recursive attempt to handle unhandled coroutine exception.

Fixes #119 | 2018-07-25 09:22:46 | 7587eba96a230f3f0ab0c04f52723e926f7a845d

AtomicFu version 0.11.3 (bug fix) | 2018-08-23 11:05:46 | be065fd2c566acf4f600de23d45d70cf9f2144bc

Introduce ExecutorCoroutineDispatcher instead of CloseableCoroutineDispatcher

Fixes #385 | 2018-08-15 10:03:23 | b517f0529fe4a2066ca8ac985c08206cd4587758

Add workaround for K/N bug | 2018-08-22 09:37:41 | bbe6d8a915b2be9c0a7ff9d92677c878718fa219

Implement withTimeoutOrNull via withTimeout to avoid timing bugs and races.
Remove deprecated API

Fixes #498 | 2018-08-21 16:45:29 | 988eb26469819f7cc8cb1ba26c3a76a6805e8387

Provide API to create limited view of experimental dispatcher

Fixes #475 | 2018-08-15 09:06:06 | cac1a0f13c5b81cdfa3c2d1020e8d86ac8cd0029

Additional debug output for CoroutineSchedulerStressTest | 2018-08-10 17:38:41 | 21ce9c066c752adf4db1e8388a9d38a390b5f08b

Execute EventLoop#invokeOnTimeout in DefaultDispatcher to allow busy-wait loops

Fixes #479 | 2018-08-08 15:04:59 | e90cdb031ffab87d9f7671cc9e856b2a9534d59e

Scheduler tests fixed:

[temporary] Ignore flaky tests
Fix benchmark compilation
Fix WorkQueueStressTest | 2018-07-26 17:02:03 | 9542f1ce4f84d08ef2b33d14ce3ae79a8a93fa86

Scheduler improvements:

Fix (one more) ABA problem in tryUnpark
Global TaskContext to speedup CPU tasks
Documentation improvements
Stress tests constants tuned to be more robust and faster on local machine (and when ran from IDEA)
Style fixes | 2018-07-26 10:57:04 | e50fb89c4e80d7accb9bdfff3ce54c59d2857c26

Scheduler tests infrastructure

Support "kotlinx.coroutines.scheduler" property to change DefaultDispatcher
Updated scheduler shrink test with custom idleWorkerKeepAliveNs config,
so that they execute faster
Fix submissions from another instance of CoroutineScheduler
Run JDK16 tests and tests under new scheduler tests only during nightly stress test | 2018-07-20 20:57:57 | 5c7454b8a872d925f206f418c16d9880bf23e25f

Removed wrapper from LimitingBlockingDispatcher by introducing TaskContext | 2018-07-23 09:38:06 | 216e4d30a2b225361a4f3e59465c079a0f116379

Fixed ABA problem in parkedWorkersStack and other stress improvements

* Workers are now numbered starting from 1, zero is used as sentinel
* Workers are lazily created (no threads initially)
* Close/shutdown of the scheduler also clears state so that subsequent
  rogue attempt to dispatch anything fails.
* Work stealing is more predictable. It starts at random index but
  then goes linearly via workers array. | 2018-07-20 20:25:58 | db22e4023442341d39d0c3797de73e74efb25882

Scheduler cosmetics

Stealing logic cleaned up a bit (mostly style)
Update worker thread names when worker threads are terminated to maintain
consistency between their index in array and name;
Improved debugging info (toString)
Merged yield and spin counters, parkTimeNs is in Int | 2018-07-19 11:12:31 | bba6e8918e32d521109583a9024b3d5e82da53f5

Improved management of parkedWorkersStack in terms of ABA/concurrency;
Also includes documentation, naming and packaging fixes | 2018-07-18 10:12:31 | 1d3b0191ecbf498965d81257c80ad6f87e583552

Improved tasks dispatching:

Merge blocking and created workers into single state variable
Replace j.u.c. queue of parked workers with intrusive stack to support shrinking and increase performance
Replace j.u.c. global queue with Michael & Scott queue which supports conditional polling
Poll for blocking tasks from global queue when CPU token is not available
Make last ditch effort before thread termination
Idle reset on requestCpuWorker | 2018-05-03 11:52:00 | 18a91347466560b63144d0097f248d9edb029780

Fix ordering bug in QuasarTest | 2018-07-25 16:16:23 | a608a335ff57e969f69985c43ee70c30da1dba8f

Get rid of compiler bugs workarounds | 2018-07-25 13:27:14 | 5f73827f3131332018c02650057eff4aa2886ae7

Channels concurrency improvement:

Make close, cancel, isClosedForSend, isClosedForReceive and offer linearizable with other operations
Fix bug when send operation can be stuck in channel forever
New concurrency tests

Fixes #359 | 2018-07-17 15:39:20 | ea651aa5badbc20f911c844db2a57ea4f68fc38b

Access to PlatformImpl in JavaFx dispatcher, on Java 9 it's an internal module which should be explicitly exported

Fixes #443 | 2018-07-20 12:07:28 | 5557245405f965ec5ca26083301559066a1be147

Minor grammatical changes to the Coroutines guide

Minor fixes for the English grammar in the coroutines guide to help ensure new readers understand coroutines properly. | 2018-07-19 20:01:40 | 977ada1e74e0ae9b011fb219891433a6d36e9ef3

Validate FJP.commonPool parallelism to avoid pathological bugs

Also always construct private FJP pool if
kotlinx.coroutines.default.parallelism is explicitly specified.

Fixes #432, #288 | 2018-07-11 10:36:07 | 1e12210cd2bccdfd866b1c9649cd19e40663fb5f

Change order of handlers in JobSupport and CancellableContinuation
1) Invoke handlers before dispatching in CancellableContinuation to make behaviour timing-independent and Unconfined doesn't produce unexpected results
2) Invoke onCancellation -> handlers -> onCompletion in Job to make behaviour timing-independent

Fixes #415 | 2018-07-03 08:11:21 | b10287ecb35463f471ac120367a0a4f56f6b5c49

Typo fixed | 2018-06-26 11:58:39 | 7981999a156918abced59de696b02d9bc731f808

IO: fix joining and continuous writing byte array interference | 2018-06-13 16:49:45 | 9faa0395afd26a3c29cd67de5dce635a7882cf5c

Update ThreadPoolDispatcher.kt

Fixed typos. | 2018-06-09 17:01:53 | 517a2592077b067032d6c0379226d0467d7662f1

IO: fix continuous writing session interfered with joining | 2018-06-01 14:23:47 | e15eae8e3537080a82078873d762ad9de61f50f4

Typo fix | 2018-06-03 23:34:22 | e185ed6f918a1df082832c9059a091505b9a5cf9

Introduce deprecated ReceiveChannel#use to preserve backward compatibility with SubscriptionReceiveChannel, fix reactive samples | 2018-06-01 12:30:34 | 313978cf6b3901b1d7fbfb5d1f688c068a072c09

LockFreeMPSCQueue optimized & fixed

* no need for REMOVE token to hurry up GC
* Placeholder logic is fixed to avoid potential data loss on wraparound
* Stress test for resize/copy added | 2018-05-30 18:58:02 | c22a1c748e93db6e7d4e73f9118e8435edbeb698

Leaking handles in awaitAll are fixed | 2018-04-28 16:22:29 | e0b6db04b3bd86e942bc7e40081a82aedd8fd200

Delay bug fixes:
Invoke clearTimeout on cancellation in JSDispatcher
Remove delayed task on cancellation from ThreadSafeHeap on cancellation to avoid memory leak | 2018-04-26 13:03:40 | cd00643b92c9698ca728f92a66f52b30b3811d05

Documentation for debug property values | 2018-04-11 19:21:23 | 590c8889c2bb5341f15ee20e440c5599342fe34b

typo fixed | 2018-04-04 06:59:33 | 905a512625ad96dcd45c789f983babd93dfde011

Add extension to ExecutorService to return closeable CoroutineDispatcher

Fixes #278 | 2018-03-20 19:28:52 | 26f4b9ecd1bdd03299b668541f7c7c9ecaf9ab7c

Debug toString for channels

Fixes #185 | 2018-03-06 10:37:42 | e4b6f09af7c0d0b6963fa8611e867ff3292fad0e

rx-example: Added application plugin & fixed to use runBlocking | 2018-03-05 14:58:59 | 00560e8b0add1628bd0a32202b6f3cc301b35af3

Use NodeDispatcher on ReactNative

Fixes #236 | 2018-03-05 09:01:07 | ecc68f13141d1353aa2bb1d027a077e0fd7be4fb

Check for undefined `window.addEventListener` when choosing default coroutine dispatcher.

Fixes #230 | 2018-02-10 19:35:58 | 54d57e0c1fff22fe1d72c762f2bdbf01995395ca

Update README.md

Minor typo and typography fixes. | 2018-02-04 00:30:58 | 7dd6b66eced47e4ddf0b2c76c974ac19612b827c

IO: fix error propagation in blocking adapter | 2018-02-02 14:18:47 | f0c1d99e2c5c5978da7ace9d58c61a5648ed7687

Update coroutines-guide.md

This tutorial suggests just Async suffix:
https://github.com/Kotlin/kotlin-coroutines/blob/master/kotlin-coroutines-informal.md#asynchronous-programming-styles
Also, there was "of" instead of "or" | 2018-01-29 17:39:02 | 7e94e70734f6e01b0522d11071e6825879a221e7

runBlocking is improved to properly support specified dispatchers,
so that `runBlocking(UI) { ... }` can be used outside of UI thread.

Fixes #209 | 2018-01-29 15:07:21 | cb78787638039096804bc1b97031bcb9801c0547

Workarounds for KT-21968 to fix JS tests | 2018-01-24 20:31:22 | dfeba242b9e328f7528507f9349623671a00333c

IO: fix joining sequence, avoid infinite joinTo suspension | 2018-01-23 20:16:54 | d1842c6301d8debca8509809d473ce7e889b1d7b

IO: make reusable cancellable continuation implement DispatchedTask | 2018-01-12 15:46:22 | 4d01f7ec3b33f7633f3737a5ab3a3fc90703f57f

JS: Introduce Window.asCoroutineDispatcher and use custom queue in
Window.awaitAnimationFrame to align all animations | 2018-01-13 08:20:32 | 1867f6de0fb39077d0cb13fdc0400dd4568f717b

Actually fixed startup/shutdown of DefaultExecutor for tests to prevent
thread leak. Includes test-case. | 2018-01-12 15:28:24 | 9483301695f4c0784d663238ecd0ef04bbfcbea3

MPP: Debug toString should not depend on kotlin-reflect | 2018-01-11 16:04:12 | b79277b4fab5353680445f36dd9b19a740828203

IO: Use TestBase in all tests and fix leaking threads in tests | 2018-01-11 10:48:19 | c45f5fa3b636d66b824351c8d8d9368b8ee4e37f

MPP: Ported DispatchedTask perf improvements to JS and more code is made common | 2018-01-11 09:39:36 | f29203c158a526f90ae8574abfc1ba6dd5249262

Performance: Remove DispatchTask, store value in DispatchedContinuation | 2018-01-10 13:25:25 | f2239e191f55883486d5ce04ffb0c6f75cdc3468

Update coroutines-guide.md

Correct `Dispatcher` spelling | 2018-01-08 13:56:54 | fa13beba79e6ebb68588ba2167b67a77196907d3

Optimize creation of DispatchTask for cancellable continuations (fixed) | 2017-12-28 09:21:14 | bdf23f28c425ea391baa7ddbc3ba012d15e6dfa5

Optimize creation of DispatchTask for cancellable continuations | 2017-12-27 22:09:43 | ac48070de5e20b727b6d9ffd5cc7c259426fb6fb

MPP: DefaultDispatcher internal impl class renamed to JSDispatcher | 2017-12-27 10:14:54 | a919827885289271a6c598ab47fdf4434a8e0da3

fix typos | 2017-12-24 19:55:06 | d2d42ea802b54d2ede23f3edf3c18521ae46a3e9

IO: fix accidentally used tryResumeWithException | 2017-12-06 14:09:01 | 9ef4e0c05168acdb2c955079e2ee857cfec9de06

IO: fix spuriously hanging pipe tests | 2017-12-05 12:41:42 | 4adac45480b33664d79b24f7a779e7d4c1da68b1

IO: fix joining with different write byte orders | 2017-12-05 09:35:56 | 8af8937a34e893661dfe15f9be598eac50b101df

IO: fix infinite writeSuspend loop caused by auto-resuming flush | 2017-12-05 09:27:09 | e6764086ef4a03ec610245740b379f5da617224c

Bug fix: start hangs on lazy coroutine with attached invokeOnCompletion | 2017-11-30 13:41:47 | 5610e1df2eb3f67be8b45633b5d6ffbf73ec6bb8

Add DefaultDispatcher on some reactive operators | 2017-11-29 21:12:35 | e19ee04ca72316f9d67a58d35b8be398b059f1f5

IO: fix too expensive joinTo fast-path | 2017-11-23 09:39:27 | 060f36a06d341f43c0f9e77fd6706bf71f94972c

IO: fix typo in test name | 2017-11-20 08:43:26 | 9a6ca1a006debfa08392027508d03a141ae53841

Introduced ReceiveChannel.cancel method;
all operators on ReceiveChannel fully consume the original channel
using a helper consume extension, which is reflected in docs;
removed `suspend` modifier from intermediate channel operators;
consistently renamed channel type param to <E>;
added two versions for xxxTo fun -- with MutableList & SendChannel;
added tests for all channel operators;
dropped/deprecated ActorJob/ProducerJob, fixes #127 | 2017-08-17 18:01:33 | b555d91193d9e76710062451cf94a94d14820e98

IO: fix race in closeWaitJob of JoiningState | 2017-11-17 16:30:22 | 47d92bafe90d899dfb53cd0f8bf7eae75504047e

IO: fix accidentally missed it | 2017-11-17 16:29:49 | d42bdadc8520ec490d5b37f5f160b54d4541d2f8

IO: fix race in ByteBufferChannel.write(lambda) | 2017-11-17 15:39:03 | 7bf4fa9e3b19a8200450fabe396a0ff854615596

IO: fix joining of already closed but not empty channel | 2017-11-14 11:52:32 | 9e9929d376d2b92cd5fda2f21f7cc1eb51f66ca8

IO: fix lincheck dependency | 2017-11-10 20:22:53 | b94ce42827dc5f9294f19b99da356ad585fb01ea

IO: fixed awaitClose and copyDirect | 2017-11-10 09:22:23 | 373d590e103f3203f61b2fb93b3b82bcce1de13e

IO: fix race in joined flush once again | 2017-11-09 18:18:05 | 8e9138ca4a297189f49bece8e739b6584f69e061

IO: fix joined close/flush | 2017-11-08 13:50:13 | 2fdb5aa4867b60f7c659cf4d950babfd2a43a67a

IO: fixed joined channel flush | 2017-11-08 03:15:39 | 625c1fefa57f95af2b723b7c7e3b1a5319c69faf

IO: fixed joined ByteChannel close | 2017-11-08 03:11:53 | ca8762b2f6a1043103a45153357a5f9e5dc010af

IO: fix writeByte BufferOverflowException

it is important to setup buffer's positions again after suspension
it is not the case if we don't hold writing state during suspension | 2017-11-07 16:42:15 | bab9f7927ca780b242c794578c02ddf63db40375

IO: fix race in readSuspend

consider state change:
writer: IDLE(empty) -> !do write -> IDLE(buffer) -> !close -> closed = C
reader:  !suspend -> resumed -> closed = C -> [here]

here reader can see that there is closed state however to see published
written state it should read state again rather than simply use already
readen state to get happens-before guarantee | 2017-11-07 16:18:16 | 32c90b169d05bd372317f90ae5ad511bbcb05bc5

IO: rewrite if/else/return code to identical

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 11:23:34 | fde1a646fe5a60c8aa211764d63527ec429672c3

IO: eliminate tail suspend calls in when blocks

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 10:54:47 | 4eccfba8d4cbe55ce49ac7b70c40eea1d0adf7c9

No Job in newSingleThreadContext and newFixedThreadPoolContext anymore

* This resolves the common issue of using `run(ctx)` where ctx comes from
either `newSingleThreadContext` or `newFixedThreadPoolContext`
invocation. They both used to return a combination of dispatcher + job,
and this job was overriding the parent job, thus preventing propagation
of cancellation. Not anymore.
* ThreadPoolDispatcher class is now public and is the result type for
both functions. It has the `close` method to release the thread pool.

Fixes #149
Fixes #151 | 2017-10-20 09:36:56 | d9ae2bcb88403e0854b895ba46c2417b4c0a4752

run uses cancelling state & propagates exceptions when cancelled

* When coroutine that was switched into a different dispatcher using
`run` is cancelled, the run invocation does not complete immediately,
but waits until the body completes.
* If the body completes with exception, then this exception is
propagated.

Fixes #147 | 2017-10-20 08:42:06 | bcdd8e17fed40097f9bb8fdb3e218f95ff8603a9

Exception propagation logic from cancelled coroutines is adjusted

* When cancelled coroutine crashes due to some other exception, this
other exception becomes the cancellation reason of the coroutine, while
the original cancellation reason is suppressed.
* UnexpectedCoroutineException is no longer used to report those cases
as is removed.
* This fixes a race between crash of CPU-consuming coroutine and
cancellation which resulted in an unhandled exception and lead to
crashes on Android.

Fixes #152 | 2017-10-20 06:00:50 | 6aed878a67e6f707e6c3afb0879beb8822a95d6f

Fixed Reactor docs (Scheduler.asCoroutineDispatcher) | 2017-10-07 19:58:40 | 8348b8c31d5b07541bd3d268ca2a186b0fe1ad6f

Failed parent Job cancels all children jobs, then waits them

Also improved debug output a little bit | 2017-10-07 12:44:48 | a36ab94253bb9945c6377eb43db0cb1071019c40

IO: eliminate race in close

I knew that I'll hit this bug anyway. Here we MUST flush twice as
flush at read suspend is not enough. If a writer closes then the first
flush does flush and it closes so all readers will see all pending data.
If a foreign thread does close then the first flush is makes no
difference however the second is required for proper cleanup and
to do tryTerminate | 2017-10-04 18:34:18 | ad68c06c1200f2038c26adeab2abf801a2a2114b

IO: fix verifying pool usage

buffer view doesn't hold original pool reference to make
pool chaining working | 2017-09-29 15:18:00 | ccf8dde980a4701b9cd30e1df23e5cbefdd93b53

IO: fix writing byte packet | 2017-09-28 07:58:15 | 754a19b188dc6d486d73b8e3a2f0c483c3f88f9b

Documentation for DefaultDispatcher in the guide | 2017-09-29 18:39:03 | 66f018c489c6b0ec0831fa9953db34da3edff5f3

DefaultDispatcher is introduced | 2017-09-28 11:27:05 | c0d559b594fce802f1d1be9a6feef49019d17160

IO: fix ByteWritePacket.writePacket size update | 2017-09-17 19:48:26 | 5ca0d12c1e8a9672d40fe83cd31d1b2426f397e7

IO: fix writer scope type | 2017-09-11 10:06:54 | ea3a418f84f3731e92658cedfa11878a8828500c

IO: fix byte channel readX operations return -1 during close+flush

Read operation should try flush before return -1 if closed because
the close operation setting close status first then do flush
so reader could see closed status but not-yet-flushed byte counters | 2017-09-11 07:31:08 | e4d3ce750ed8b864a435fb0926d0d77e9c02b208

IO: add more byte packet tests and fix few bugs | 2017-09-06 18:50:51 | 5feaf6973c23fae3c5a8df64748e2181c50dd0d6

IO: fix delimiter lookahead | 2017-09-06 15:52:04 | 1cc86083e7be17ce53f7c80cfa6ba67e8569e33e

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 99cdb380bf6391db7e7d08e8673c627c554074d8

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 776b370d58883e9bce0c309ebb4919ef4cdac13c

IO: fix byte packet write buffer leak | 2017-08-25 08:39:00 | 974cbb3b21b8d7613c41ee2221ce435e347b068f

IO: fix byte channel close with error buffer leak | 2017-08-25 08:06:59 | 24b040f1345db27b45589a975daab45bf9325494

IO: fix CR-only line endings processing + tests | 2017-08-23 11:39:41 | a9a936d1a325ee0baf36df444414e1e17ac539da

IO: rename writeStringUtf8, fix implementation + tests | 2017-08-23 09:26:18 | fbcba264a37580b5c47f3314395e5146afb38287

IO: fix copyAndClose + tests | 2017-08-23 09:11:55 | fc84a634ff9a1acca04e09fa5a031b904c5c8838

IO: byte packet readLine support + bugfixes | 2017-07-26 09:59:16 | 0b12ffc0178844e813223039adf5d7510703485d

Fixed bug in LockFreeLinkedList (invariant & lock-freedom violation)
Migrated atomic ops to AtomicFU library for ease of code maintenance
Implement lock-freedom testing in LockFreeLinkedListAtomicStressLFTest | 2017-08-10 18:09:26 | 7eb41efbacd498704f25465e2a58f4892c16aa32

Typo fixed | 2017-07-24 13:42:34 | a448903dcac25e450d87c49705e7a6693a300d29

Use CompletableDeferred in the guide section on coroutines;
fix (reknit) broken links to factory functions that are now top-level | 2017-07-21 22:00:30 | 256812a1c09511744575ed3d2c64fec27979f391

More documentation on CompletableDeferred states and style fixes | 2017-07-21 15:04:23 | 8e2ae9964614e35295a8d695114b00c35f5fc755

Better debug strings for continuations | 2017-07-12 12:22:21 | 69d9c852289f1a4a9ffe107dc75cc71871cfe34e

ObservableBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 10:16:30 | ed6985459318209be084ff807676cb722387fb6f

PublisherBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 09:58:44 | 58246ca7e7727632ba50c41d0314df47ba9e3fc0

Fixed IllegalStateException in select that concurrently selects, which
was due a problem with Job concurrent cancel and dispose of handle.
The bug was introduced by addition of Cancelling state for a Job.

Original stack trace in select was:
java.lang.IllegalStateException: Check failed.
	at kotlinx.coroutines.experimental.internal.LockFreeLinkedListNode.remove(LockFreeLinkedList.kt:236)
	at kotlinx.coroutines.experimental.JobSupport.removeNode$kotlinx_coroutines_core(Job.kt:734)
	at kotlinx.coroutines.experimental.JobNode.dispose(Job.kt:995)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.initCancellability(Select.kt:294)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.getResult(Select.kt:273) | 2017-07-11 09:50:00 | e9f64491787433b3d53ad5800456524820058d5f

typo fixed | 2017-07-10 10:46:13 | d28cc872fb7815b51ceb7c84a4e77117fce380c7

typo fixed | 2017-07-10 10:44:07 | 8b0b07ab81f12bc605462a6a1333b61abce547cb

typo fixed | 2017-07-10 10:43:20 | 93f7e8e22019643caaf14ae480c05ab0a349064d

Bug fixed on waitTimeoutOrNull (was flaky testOuterTimeoutTest) | 2017-07-10 10:38:54 | 769d48217f8787c7f64c07da6e53c27b2d703274

Refactor DispatchTask to reuse it for dispatchYield | 2017-07-10 10:16:20 | 2a93646a8054ce7819e9bdbff8d28849a19e874b

Fix SecurityException when trying to read "kotlinx.coroutines.debug" prop | 2017-07-10 07:15:40 | e824eaaab9d053ff0f2cc028c7413bb83adcacc0

A fix & optimization for select impl helping scheme | 2017-07-05 06:53:29 | 907074f1f63871ed29feab3173a2e38b30d8fbb6

Reactive tests fixed for cancellation logic change | 2017-06-26 11:25:56 | 7a7b00938934ef7d0855eb24ec93a06d0b0c97e7

Fix typo: debugging more -> debugging mode | 2017-06-24 21:03:35 | ed5ed49913498b4e880415d2f0fb9004e20e1b5a

Typo fixed | 2017-06-23 10:27:02 | 6c18dfd15f6e1703db57531422bc0df3cb7d08ff

fix typo.

somethine -> something | 2017-06-18 07:37:59 | 81a6f23ca68d7ed37f36dcb966fe74e3bc53de57

Typo fixed | 2017-06-09 17:25:03 | c3c2f3269220f5d7ae20e7592ca1253061b50a95

CoroutineExceptionHandlerTest fixed | 2017-06-09 15:59:25 | 866521b83ed0676d0203dec35de5fb797bc9a59d

SimpleSendReceiveTest is fixed to account for close conflation | 2017-06-06 11:36:38 | 9ff32644381bf1a692d9a935170a9f7b7023f244

Fixed lock-freedom of send/offer on closed channels and related bugs.
Conflated[Broadcast]Channel hang of concurrent offer/close is fixed. | 2017-06-05 14:04:39 | e6e8ce8d46cee273e00ee130334239880734dc2f

Integration readme title fixed | 2017-05-17 11:59:49 | 0c2e25d7c38f50bd3c9866ea1fc2c12d5d74251a

launched jobs and await can be cancelled while waiting in dispatch queue

* suspendAtomicCancellableCoroutine function is introduced for funs like
  send/receive/receiveOrNull that require atomic cancellation
  (they cannot be cancelled after decision was made)
* Coroutines started with default mode (CoroutineStart.ATOMIC) using
  async/launch/actor builders can be cancelled before execution starts.
* CoroutineStart.ATOMIC is introduced as a start mode to specify that
  coroutine cannot be cancelled before its execution start. | 2017-05-11 17:15:18 | a74eb5f8b08e84f904e75aa71da4547c9178da8d

Fix withTimeout/OrNull bug with spurious concurrency on cancellation | 2017-04-20 16:23:18 | ca9d5be31a30c5f6a20875438f9ae40db4183f4c

Refactored ThreadPoolDispatcher to reuse code of ExecutorCoroutineDispatcher | 2017-04-18 12:28:35 | f04f51d5b05a0aec7c97acc202d180096a095fbf

equals/hashCode for wrapper CoroutineDispatcher impls | 2017-04-11 10:50:03 | 30dd5c129c493ca7b1a3b2b80437e8a7ec68f3ec

Starting coroutine in UI event handlers without dispatch in UI guide | 2017-04-07 15:06:22 | f724f6e2fe7c20cb48b69cd7b19b2658313231e4

Nicer toString implementations for CommonPool & Unconfined dispatchers | 2017-04-07 07:35:28 | dc9fd1c2d18da2f23d9907148b4674cda6418e49

Few minor docs & build fixes for reactor support | 2017-04-06 19:15:35 | 523516abd2023f8d968d389b32dee713130a9f83

Merge pull request #53 from mkobit/patch-1

Correct typo in coroutines-guide-reactive.md | 2017-04-05 09:41:56 | 7676e2239947273c6cbb4cb77536042bd9f2ce43

Fix repository urls

need to be reverted once bintray will fix jcenter sync issue | 2017-03-23 14:45:39 | 78fd3cb8932410af9beab4effc04bdeea4343732

Merge pull request #42 from jakiejj/master

fix typos in comments to Nio functions | 2017-03-20 07:16:24 | 9ef792fec6775bb5cdb08c84511488f324db3322

fix typos in comments | 2017-03-17 20:48:39 | 4d927c76488b96abaae7ba003f8064ad84b8334e

Typo fixed | 2017-03-14 17:39:50 | 81a5b7144484dcc8ebc89cd98fd9bd8a2d45afbe

startUndispatchedCoroutine is renamed to startCoroutineUndispatched for consistency with coroutine intrinsics | 2017-03-14 16:39:26 | 4638d79097a3d5b0c1b32c1e468ad723cc4b2bd9

Fixed bug with sometimes missing `onComplete` in `publish`, `rxObservable`, and `rxFlowable` builders | 2017-03-13 09:03:35 | d14a3901f365f622d9a7ba96fc00900011c9c009

Scheduler.asCoroutineDispatcher extension for Rx 2.x | 2017-03-10 12:06:01 | a1fe3da17907024afa50a35cbfcc72639d62bf78

not -> no typo fixed | 2017-03-09 09:57:57 | 228d084bfb87f967e216b84029b58649fcbe7472

Executor.toCoroutineDispatcher is renamed to asCoroutineDispatcher | 2017-03-09 09:03:39 | 38b5ea18e36f1a53d4cde27bf3fd21522727cbbb

Fixed dispatching logic of `withTimeout` (removed extra dispatch) | 2017-03-02 21:15:21 | 43d831f61f33262dcb4621069451d1699898d1cb

More links and typos fixed | 2017-03-01 14:21:48 | cc63363ead9d82f4e246a319ca3e0cb9f15e3a14

top-level readme links fixed to produce & co | 2017-02-22 12:04:28 | 40e89f689f89ae643f68c68efc57aebd8f8284ed

Jon.onJoin select clause is implemented, lazy onAwait/onJoin & dispatch fixed | 2017-02-22 11:56:58 | d84dbc2d75927fe8446098a225a3fbb884683bde

startUndispatchedCoroutine utility functions | 2017-02-22 06:53:49 | ee88fbef2d78e4b25f741efffabf4756bff8e7f3

buildChannel deprecation template fixed | 2017-02-20 12:53:30 | de8b9e9b336491ff0dbf107fe35d9efa030d92d3

Merge pull request #31 from gildor/on-completion-deprecation-fix

Job.onCompletion deprecation template fixed | 2017-02-20 12:49:41 | 85923e2de75ed522903cc3d64aef2ad178c1cbf8

Job.onCompletion deprecation template fixed | 2017-02-19 13:26:29 | c8f9ca308abe963cafa5f676410402fc287cfa5a

Delay implementation in Swing, JavaFx, and scheduled executors is fixed to avoid an extra dispatch
CancellableContinuation.resumeUndispatched is introduced to make this efficient implementation possible
Additional documentation for CoroutineDispatcher implementors | 2017-02-10 10:30:38 | a198bad7365a508baf1041993e9a14007f9d5aa3

Doc fixed | 2017-02-10 10:14:35 | 8c8551e7dbea7c2467060c2d3c6aa1c54c721e68

Merge pull request #29 from cbeust/patch-1

Update coroutines-guide.md | 2017-02-07 17:52:01 | 4d821e3901d038f005850b38d1e4954506306383

Merge pull request #28 from erokhins/patch-1

Update 1.1.0-beta-37 to 1.1.0-beta-38 | 2017-02-02 19:24:36 | 40f69cf704e7b31cec9c8a935317d8c173e79623

Added deprecated (with error level) plus operators on Job and CoroutineDispatcher to catch potential problem with their incorrect use at compile time | 2017-02-01 15:43:32 | 79a2868295127b81056f66d644da72db5a40d772

Merge pull request #27 from tairrzayev/readme-fix

Fixes the typo in the coroutines-guide.md | 2017-02-02 06:15:26 | 9d844fa1733f83e5e1b85c3e762a69729d3c5ef2

Dispatchers default behaviour is changed to schedule new coroutine for execution later.
Job.getInactiveCancellationException is introduced.
yield is cancellable while it is waiting to executed.
core tutorial is expanded. | 2017-01-29 18:58:33 | 7cf452eab59cdca570227f071cba2da374f77110

Finer grained control on debugging facilities | 2017-01-24 07:29:53 | aecb9aa1606b79243c8e93221de9713c164ce015

Added context parameter to CoroutineDispatcher methods, implemented Executor.toCoroutineDispatcher | 2017-01-23 13:47:20 | 67891d867da022d608d4589859002f256d9a313e

Fixed initialization of Job with parent (initParentJob), fixed handling on uncaught exceptions in standalone coroutines | 2017-01-20 09:19:52 | 58a7add417403811e822a4f6f7689ae3fd0e2018

Minor: fix version of maven-deploy-plugin, fix pom warnings | 2016-12-21 17:21:30 | c4ad15fc6246b7496d610da7419441020dfe1c56

Merge pull request #6 from hhariri/patch-1

Fixed packaged names | 2016-07-27 07:04:12 | c6993089412fbc491ddeb0a71b57e67bf31e21d6

Fixed packaged names 

On the repo, the package names don't have the suffix -1. | 2016-07-27 06:03:41 | 1abe89716c093c9e010a45a5235da7f9b50eea17

Fix Byte Buddy use in debug jar

The `shadow` configuration extends `api` now, which means that all
the `api`-style dependencies of this module are not bundled in the
fat jar and are instead mentioned in the POM file as `RUNTIME`
dependencies.

This means that now JNA is not included with the jar, but when
someone depends on the jar to later call `DebugProbes.install()`,
JNA is fetched as a transitive dependency.

This is what we want: JNA is not needed in the jar, because when
the debugger is run as a Java agent, attachment of Byte Buddy
happens in `Installer`, and JNA-based attach emulation is not used;
Byte Buddy is also written is such a way that if JNA is not in the
class path, nothing breaks unless one tries to use attach
emulation. | 2020-03-19 09:12:44 | e76f10b890b384bb93eb9913406ab82ed8632e24

Update kotlinx-coroutines-debug/README.md

Co-Authored-By: Sergei Egorov <bsideup@gmail.com> | 2020-03-16 14:16:16 | 20cc2ff7db315847c1a1e8d51dc1bb5c9c8754c9

Add an integration test for coroutine debugger java agent | 2020-03-16 11:32:01 | 76ab90f2d8428a6033e7a87c2ee6bd5cd7e3a359

Implement BlockHound integration properly

Now it relies on the ServiceLoader mechanism to load the
integration: if the user installs BlockHound and
`kotlinx-coroutines-debug` is in the classpath, then BlockHound
will know to detect blocking calls in scenarios that forbid it. | 2020-02-19 12:04:07 | efb4720f87e8d3eebb06935871d130fb78097ada

Fix tests not being run with the right dispatcher

Integration with BlockHound revealed that several tests were
performing blocking operations such as Thread.sleep in
coroutine context `Dispatchers.DEFAULT`.

Also, some tests hanged because the exception that notified about
blocking calls were wildcard-matched. | 2020-02-06 09:40:41 | 69f76dc332b40ca20e61636967558505b0b81d2b

Do not shadow ByteBuddy agent

This way, it can work even with BlockHound on JDK8, which also uses
ByteBuddy and thus was in conflict.

Kind of solves
https://github.com/Kotlin/kotlinx.coroutines/issues/1060, but since
now the debugging routine depends on BlockHound, where, it seems,
the same problem was not fixed, the original cause for concern
probably still stands. | 2020-02-06 09:36:21 | ef33b348d82854e42b3782881306a0dc89c80ebf

Implement DebugTestBase in DebugProbesTest | 2020-03-13 12:02:40 | 8aaf2f70b26e5d9095c9e6ea121f6daa5247be5b

Make DebugProbes ready to production (#1862)

* Speed-up installed debug probes by splitting global probes lock to RW-lock, guard all state transitions with read lock and all read operations with write lock to guarantee a consistent snapshot
* Prevent IllegalStateException during 'kill -5' command
* Introduce flag to disable creation stacktrace capturing in DebugProbes
* Support proposed changes in JUnit4 rules

Fixes #1379
Fixes #1372 | 2020-03-13 11:13:09 | 4116fbf1dda610d13095e0e23642a66862f56065

Document the fact that dispatch should eventually invoke the given runnable (#1854) | 2020-03-13 11:10:13 | 10fd73e8a1751819280ab4d7e4ba26b89ff57d9f

Leverage polymorphic keys un CoroutineDispatcher and ExecutorCoroutineDispatcher (#1840) | 2020-03-05 20:02:30 | 214f156c7915185b04489c23ad5468cd5266aabb

Temporary workaround bug in K/N 1.3.70 codegen (KT-37061) | 2020-02-26 14:14:10 | 21bb6fb201b12e26d6763519b46881f89914d6fc

Optimize the size of the coroutines library in Android projects (#1282)

* Includes additional R8 rules to disable debugging & stack-trace recovery in optimized
Android builds. Additional savings with AGP 4.0.0-alpha06 (r8-2.0.4-dev) are ~16kb
in uncompressed DEX size.
* Tests are modified to verify that the classes that are supposed to be removed are
indeed removed.
* Cleaner build logic without error-prone "return" in the middle
* Report the size of optimized Android Dex as teamcity metric | 2020-02-14 12:52:10 | bf9509da7a0eff08e489555254d9662f2cc1894f

Fix a race in some tests for JavaRX integration (#1801)

An extremely rare race could happen in any of the tests in
`LeakedExceptionTest` in the following case:
* `withExceptionHandler` runs the block passed to it;
* In one of the last iterations of `repeat`, `select` in `combine`
  happens on both flows at the same time, that is, the block that
  was passed to `rx[Something]` runs in two threads
  simultaneously;
* One of these two threads (thread A) runs anomalously slow;
* The other thread successfully throws an exception;
* This exception is propagated to `catch`, so `collect` is
  finished;
* `repeat` is exited, the block passed to `withExceptionHandler` is
  done executing;
* `withExceptionHandler` sets back the usual exception handler,
  which fails when an exception in JavaRX happens (see
  https://github.com/ReactiveX/RxJava/wiki/What's-different-in-2.0#error-handling);
* Thread A wakes up and throws an exception. This time, it is
  passed not to `handler`, which is made specifically to deal with
  this, but to the default handler.

As a fix, now a special coroutine context passed to `rx[Something]`
ensures that the spawned executions are run in a thread pool that
blocks until all the tasks are done. | 2020-02-13 13:44:49 | 9f4fd70597567dc4477e5d935d06a380edd09eae

Do not request additional worker from 'yield' calls and during post-e… (#1728)

Do not request additional worker from 'yield' calls and during post-execution phase in LimitingDispatcher

Fixes #1704
Fixes #1706 | 2019-12-25 11:16:39 | c526c3fafa0efdb638e99cb30a10cdcfb8e2bc1c

CoroutineScheduler parking strategy rework

    * WorkQueue.trySteal reports not only whether the steal was successful, but also a waiting time unless task becomes stealable
    * CoroutineScheduler.trySteal attempts to steal from all the workers (starting from the random position) per iteration to have deterministic stealing
    * Parking mechanics rework. After unsuccessful findTask, worker immediately adds itself to parking stack, then rescans all the queues to avoid missing tryUnparks and only then parks itself (parking duration depends on WorkQueue.trySteal result), terminating later
    * Excessive spinning and parking is completely eliminated, significantly (x3) reducing CPU-consumption and making CoroutineScheduler on-par with FJP and FTP on Ktor-like workloads
    * Downside of aggressive parking is a cost of slow-path unpark payed by external submitters that can be shown in degraded DispatchersContextSwitchBenchmark. Follow-up commits will fix that problem
    * Retry on tryStealLastScheduled failures to avoid potential starvation
    * Merge available CPU permits with controlState to simplify reasoning about pool state and make all state transitions atomic
    * Get rid of synthetic accessors | 2019-10-01 17:22:56 | f27d176e7a6add3b92f268c413b0ea4d27de35aa

User Class.forName instead of ServiceLoader to instantiate Dispatchers.Main on Android (#1572)

Fixes #1557
Fixes #878
Fixes #1606 | 2019-12-12 09:10:21 | e60ec8e1fa2a55006f67b0e113b17388595bce97

Introduce DebugProbes.isInstalled method | 2019-12-11 16:04:47 | af9a2010611248a16f6c271274028770d5a4f067

Better diagnostic exception message in MissingMainCoroutineDispatcher | 2019-12-10 14:14:46 | 6cb317b500d176aa0d13b3a2f2ca9ead336f6b0c

ContextScope.toString for better debuggability | 2019-12-05 15:52:43 | c02648baee0f490a150bdb645637e0ee940ef7bf

Promote isDispatchNeeded to stable API | 2019-11-26 11:07:53 | 391042f20bbc12b77b33a550b566265346e2a423

Improve documentation

    * Clarifications of CoroutineExceptionHandler execution
    * Clarifications of MainCoroutineDispatcher.immediate
    * Outdated documentation (pointed out by Google AndoidX team) for isDispatchNeeded is rewritten
    *

Fixes #1650
Fixes #1651
Fixes #1634 | 2019-11-25 15:56:24 | 445e026f95392c19e4eb8be17af9ef454d0647e8

Optimize yield via dispatcher.isDispatchNeeded

Also, as it was before, throw UnsupportedOperationException from the
Dispatcher.Unconfined.dispatch method in case some code wraps
the Unconfined dispatcher but fails to delegate isDispatchNeeded
properly. | 2019-11-26 08:33:08 | 69d1d4160154105a7944feeb67f851d676ee7f94

Avoid potential StackOverflow on wrapped UnconfinedDispatcher+yield

See ImmediateYieldTest.testWrappedUnconfinedDispatcherYieldStackOverflow

This commit changes the way Unconfined dispatcher is detected.
Instead of equality check we try to dispatch to the dispatcher with
a specially updated coroutine context that has YieldContext element
that is processed by the Unconfied dispatcher in a special way. | 2019-11-23 15:21:22 | 8f1f252a31a43534dc6dfac8af465c2bc78cb115

Support yield in immediate dispatchers

So yield now checks for "Unconfined" dispatcher instead of
"isDispatchNeeded" and works properly for immediate dispatchers.

Fixes #1474 | 2019-11-20 08:02:46 | 3ab34d808b5aa2c8673754bd43e4879b9d4af8c9

Clarify documentation around Dispatcher.IO parallelism | 2019-11-02 09:40:23 | 9d1146fdc91177320fb22c455086e14da0be008d

Fix ReactorFlow integration bug exposed by TestBase | 2019-10-29 16:48:49 | 1652bb9602a23a6c6a7c445a88f8da9a24f39ef5

Properly choose timeout exception with a recovered stacktrace to provide better debugging experience

Fixes #1625 | 2019-10-22 16:18:22 | 3affb90f51029781fb3384ff2fda51586441d1d3

Eagerly create cancellation exception during Job.cancel call to make stacktrace even shorter

Also, fix stacktrace recovery in select clause | 2019-10-04 19:35:19 | ae57774c1ea253e0272d92c4c064b2b721847989

Change stacktrace recovery contract

    * Stacktraces are no longer recovered in DispatchedTask.run
    * Callers of uCont.resumeWithException are responsible for recovering the stacktrace
    * CancellableContinuation.resumeWithException recovers stacktrace if necessary
    * Properly recover stacktrace in Channel.receive fast-path
    * Properly recover stactraces on Channel.send fast-path
    * Restructure stacktrace recovery tests | 2019-10-03 13:45:49 | 3b2e4377ac14b9c9c4acfc01d9d50a5c9519e9de

Shorten resume call stack

Calls of afterCompletionInternal are pulled up the call stack. This
is very important, since scoped coroutines do "uCont.resumeWith" from
afterCompletionInternal, which makes all the JVM method visible in the
debugger call frames and in exceptions.

Additionally, this allows for some simplification of the JobSupport
code, as a number of methods do not need "mode" parameter anymore.
Moreover, the kludge of MODE_IGNORE is no longer needed and is
dropped.

Make TimeoutCoroutine extends ScopedCoroutines.

Fixes #1574 | 2019-09-25 21:14:05 | ff9060c5f0054940e9204049ba30fd6797899ca0

Fix race in channel select/cancel

This bug was introduced by PR #1524. It was reproducing when there
is a regular "send" operation on one side of a channel and
"select { onReceive }" on another side of the channel and the
"send" coroutine gets cancelled. The problem is that
SendElement.tryResumeSend implementation was calling finishPrepare
before it has successfully resumed continuation, so if that
continuation was already cancelled, the code in "finishPrepare" had
already stored the wrong affected node which it would later try to
call "completeResume" on.

This patch also adds hexAddress to the debug toString method of
all internal node classes in channel implementation.

Fixes #1588 | 2019-10-02 11:42:30 | d9d35747cfa336108734a47f7aac1aa05410389a

Fix race condition in pair select

This bug was introduced by #1524. The crux of problem is that
TryOffer/PollDesc.onPrepare method is no longer allowed to update
fields in these classes (like "resumeToken" and "pollResult") after call
to tryResumeSend/Receive method, because the latter will complete
the ongoing atomic operation and helper method might find it complete
and try reading "resumeToken" which was not initialized yet.

This change removes "pollResult" field which was not really needed
("result.pollResult" field is used) and removes "resumeToken" by
exploiting the fact that current implementation of
CancellableContinuationImpl does not need a token anymore. However,
CancellableContinuation.tryResume/completeResume ABI is left intact,
because it is used by 3rd party code.

This fix lead to overall simplification of the code. A number of fields
and an auxiliary IdempotentTokenValue class are removed, tokens used to
indicate various results are consolidated, so that resume success
is now consistently indicated by a single RESUME_TOKEN symbol.

Fixes #1561 | 2019-09-22 18:13:12 | 2f8bff1b0972defc473dd8c857600db481f013a3

Introduce reusable cancellable continuations for hot loops with channels (#1534)


  * Average performance improvement is around 25%
  * API is internal and targeted to specific usage
  * DispatchedTask and DispatchedContinuation are extracted to separate files for better readability and maintainability
  * Ensure ConsumeAsFlow does not retain reference to the last element of the flow with test | 2019-09-25 15:02:24 | 946e5789fa982e397d49b788d308afdc5d44ccce

Fix StackOverflowException with select expressions

* onSend/onReceive clauses on the same channel: Instead of
  StackOverflowError we throw IllegalStateException and leave
  the channel in the original state.
* Fix SOE in select with "opposite channels" stress-test. The fix is
  based on the sequential numbering of atomic select operation.
  Deadlock is detected and the operation with the lower sequential
  number is aborted and restarted (with a larger number).

Fixes #504
Fixes #1411 | 2019-08-30 10:01:19 | 3dbe82b44e6af89719c6d331400aed58de9e5521

Install debug probes in CoroutinesTimeout constructor to capture coroutines launched from within a test constructor

Fixes #1542 | 2019-09-17 14:26:45 | fcc004c2a03be7c7389a3a95b7a805058fb936e5

Eagerly create coroutine for lazily-started coroutine builders in order to trigger DebugProbes.probeCoroutineCreated

Fixes #1544 | 2019-09-17 15:32:43 | 858094ee4262ab93a8ec9a1ff24e6df4bc9a8ed4

Do not aggregate all coroutine info into a single string before dumping it to the out in DebugProbes.dumpCoroutines

Previously it was done intentionally to reduce synchronization window of DebugProbesImpl, but still have a consistent view of the world and to avoid interleaving with other usages of out.

Apparently, applications with a significant amount of coroutines (e.g. Ktor) may spend a lot of time or even experience OOM in DebugProbes.dumpCoroutines. To make it usable in such applications, we dump coroutines incrementally without releasing a lock in DebugProbesImpl (thus significantly increasing synchronization window) while holding a lock on out to still have a continuous dump.

Fixes #1535 | 2019-09-16 17:21:33 | 3826ae58bc3651a6d76be256d51b866947581b60

Improve docs / fix grammar | 2019-08-05 13:32:34 | a7afd4657de916978898570d0baf86c0d73906f5

Fixed site publication in build script

:example-frontend-js:bundle task is fixed. | 2019-09-04 15:57:21 | a70022d6e7d9aa5d8fe27a2c46e987a2e8b85c21

Fix of a bug in the semaphore (#1477)

* Add a failing test for a semaphore

This test consistently fails for the current implementation. It
attempts to cause the following state: after `job2` increments
`availablePermits` but before it wakes up the acquirer in the
queue, the acquirer is cancelled. Then, regardless of whether
`RESUMED` or `CANCELLED` was written first, another cell in the
queue is marked to be resumed. However, this is incorrect: on
cancellation, the acquirer incremented the number of available
permits once more, making it `1`; thus, at the same time there
exist two permits for acquiring the mutex. At the next loop
iteration, a new acquirer tries to claim ownership of the mutex and
succeeds because it goes to the thread queue and sees its cell as
`RESUMED`. Thus, two entities own a mutex at the same time.

* Fix a bug in semaphore implementation

The fix works as follows: if `availablePermits` is negative, its
absolute value denotes the logical length of the thread queue.
Increasing its value if it was negative means that this thread
promises to wake exactly one thread, and if its positive, returns
one permit to the semaphore itself.

Before, the error was in that a queue could be of negative length:
if it consisted of only `N` cells, and `N` resume queries arrived,
cancelling any threads would mean that there are more wakers then
there are sleepers, which breaks the invariants of the semaphore.
Thus, if on cancellation the acquirer detects that it leaves the
queue empty in the presence of resumers, it simply transfers the
semaphore acquisition permit to the semaphore itself, because it
knows that it, in a sense, owns it already: there is a thread that
is bound to resume this cell. | 2019-09-03 13:43:23 | 9a62f27d1fe53552b0838156c17adc3b68dcc585

Repaired some of ListenableFuture.kt's cancellation corner cases.

This fixes:
  - Cancellation without an untrapped CancellationException propagating
    through a Callback; isCancelled() is the correct way to check for
    cancellation
  - Bidirectional propagation of cancellation through
    `asListenableFuture()`
  - The cause getting lost in the `asListenableFuture()` future  when
    cancelling its `Deferred` parent with a cause

This also:
  - Extensively documents the package and the contracts created by the
    promise-creating extension methods and `future()`
  - Uses `getUninterruptibly()` for speed
  - Uses `AbstractFuture` to make as certain as possible that
    `Future.cancel()` will return `true` at most once
  - Should clear up rare spooky race conditions around
    cancellation/interruption in hybrid Coroutines/Guava Futures
    codebases

There are probably a few more interesting corner cases hiding in here,
but this should be a good start improving the correctness of `.guava`'s
adapters.

This is a squash commit of kotlin/pr/1347, rebased on develop:

- Incorporated first-round feedback.

- Merged CancellationToCoroutine into ListenableFutureCoroutine to save an
allocation.

- Documented and tested for null completion of asDeferred()'s parent
Future.

- Renamed a cancellation test case for clarity of purpose.

- Split asDeferred() documentation between KDoc/details

- Implemented InternalFutures faster-fast path. Documented. | 2019-07-16 20:19:17 | 57cc36454da6851ecd2a00abe7cfd6ee6e06928f

flow: fix recursion in combineTransform<T1, T2, R>() | 2019-08-23 14:21:37 | 1f5ab53f7c7259fee1d28994b6402f40669f8a52

Introduce CoroutineDispatcher.asExecutor() extension (#1457)


Fixes #1450 | 2019-08-22 12:20:38 | bcf4a8cba083e5650b1c63a05da481f1b61c3e75

Add skip_snapshot_checks flag for snapshot train debuggability | 2019-08-21 14:08:34 | 6ca6ed5af208f72d443f747b7953c073acc4624d

Merge branch 'master' into develop

# Conflicts:
#	docs/coroutine-context-and-dispatchers.md | 2019-08-09 15:03:25 | a6da28e45948a4197fa3e3b80aa29bcee1f042f0

Renaming switchMap to flatMapLatest to better reflect its semantics and to have a consistent and meaningful naming scheme for the rest of the 'latest' operators

    * Make flatMapLatest pure, do not leak cancellation behaviour to downstream
    * Make *latest buffered by default to amortize constant re-dispatch cost
    * Introducing transformLatest
    * Introducing mapLatest

Fixes #1335 | 2019-07-28 18:59:25 | 3a958845a7f091fc9f3218aae20abed17c9e57be

Fully copy CoroutineInfo for DebugProbes.dumpCoroutinesInfo, it is re… (#1368)

* Fully copy CoroutineInfo for DebugProbes.dumpCoroutinesInfo, it is required for IDEA integration (field is left as internal deliberately)
* Make CoroutineInfo non-data class | 2019-08-09 14:36:25 | 0172998c5df4dc219c17f03d03502a42998f535e

Get rid of NonRecoverableThrowable, mention way to opt-out stacktrace… (#1420)

Get rid of NonRecoverableThrowable, mention way to opt-out stacktrace recovery in debugging.md | 2019-08-09 14:32:34 | 897f02e18a8538b53f1eeb6157a1c0cff0b65476

coroutine-context-and-dispatchers.md: Improve article usage, fix typos, reword phrases for better readability | 2019-08-07 15:27:21 | 28241ebd08977fc323d41366ed0c6705f9285095

Use setTimeout-based dispatcher when process is not available on the … (#1409)

* Use setTimeout-based dispatcher when process is not available on the target runtime

Fixes #1404 | 2019-08-05 14:59:11 | 2fc234cb6d24ee3f65a7aa35e4aeea6e506315d2

Update Guava to the latest version 28.0

This fixes vulnerability CVE-2018-10237
See https://ossindex.sonatype.org/vuln/24585a7f-eb6b-4d8d-a2a9-a6f16cc7c1d0 | 2019-08-05 11:58:23 | db95996ceb2758dfc7ccfe9ac805dace2e89128f

Flow.kt: fix typos and rephrase some expressions for better readability (#1408) | 2019-08-05 11:12:26 | 41428a3673f84c40766c9f65421f1649cffb328d

Better docs on coroutines debugging property

* Mention in the guide that `-ea` turns it on.
* Give a link to DEBUG_PROPERTY_NAME instead of newCoroutineContext.
  The later does not have details on its page anymore, since
  the details were only mentioned in JVM version.
* Move description in of debugging facilities to DEBUG_PROPERTY_NAME
  in the code. | 2019-07-23 13:33:07 | d78084b32295c923e2b8312a24729281f19517ca

Properly specify transitive dependencies for kotlinx-coroutines-debug | 2019-07-19 11:16:14 | 2f5036365b035912ce3efd25c307f70479bd9908

Move event loop infrastructure to common code

This makes code of EventLoop (including its task queue impl) shared
between JVM and Native making support and further fixes easier.
It it not actually used in JS and DCE should remove it. | 2019-07-02 12:30:47 | 98a970559601222de378d89920a8f4710d6baa31

Recover stacktraces for no-dispatched continuations, so recovery works in 'suspend fun main' cases to further improve user experience

Fixes #1328 | 2019-07-16 12:36:59 | f22604b01788784fd06b5f01554dc4800e7ff183

Rewrite assertions so that they are checked only in debug mode

* Make sure assertions are absent on native and JS
* Only print full toString for Job in debug mode | 2019-07-02 13:21:22 | 583d39dd4fe1d8f488df3e384901aa19f95166e2

Decouple asFlow from batchSize and move it to buffer instead, promote… (#1279)

* Optimize Publisher.asFlow and fix conflation
* Use channel.receiveOrNull instead of for loop iteration
  (it is more efficient)
* Calling Publisher.asFlow().produceIn(...) uses a single channel
  and is implemented via Publisher.openSubscription() | 2019-06-26 09:09:32 | 502610e7af760a73ea974f9c7cb75ec26a14d167

Unmute debugger test that were broken in 1.3.31, increase debug test timeout (slow CI), make shutdown more graceful by reducing timeout per thread (slow CI + unfortunate timings) | 2019-06-24 17:53:53 | bb97ffbb069774f2ba6ceb8e7dc4c6a2263ef9ff

Update "Shared mutable state and concurrency" guide with best practices

* Properly use structured concurrency in the example code.
* Also remove a special not on <= 2 core CPU, which is no longer needed
because default dispatcher has always at least two CPUs.

Fixed #1241 | 2019-06-01 11:18:42 | d94652feec64040c2c77af630fc4df30032e0efc

Enable R8 optimization of Dispatchers.Main loading

The developer still has to disable the FastServiceLoader manually
if they're using R8.

R8 is then able to optimize away the ServiceLoader and reflection
entirely, resulting in direct class instantiation and no extra I/O
on calling thread.

Fixes #1231 | 2019-05-30 12:17:51 | b9b7d828b18b2462817b6ed0c1a56233a4b6fcf4

Use identity hash code on K/N for debug strings

Fixes #1237 | 2019-05-31 11:39:08 | a3f150e66f7c47e0a0cefed4d9aa03199dff9e7f

Amortize the cost of coroutine dispatch using message queue in all JS dispatchers.
Use Promise.resolve and process.nextTick as dispatch mechanism for cold starts | 2019-03-01 11:25:23 | b7e1499b966175782cf2a5045c5bd3bb95a63b8c

Documentation improvements (#1229)

* Improve MainCoroutineDispatcher.immediate documentation
* Remove obsolete readme and package descriptions
* Clarify possible replacement of onCompletion parameter in produce
* Add paragraph about parent cancellation to async (Mention structured concurrency, but do not explain it there as the term should be easily googlable).

Fixes #1219
Fixes #994 
Fixes #787 | 2019-05-31 10:16:19 | c81dc91159dd1e33060ead8eeccc78df94c4649d

New flow builder: channelFlow (and its alias callbackFlow) and supple… (#1214)

New flow builder: channelFlow (and its alias callbackFlow) and supplementary ProducerScope.await method

Rationale:

    * Can be used in different context without breaking context preservation
    * Can be used to build concurrent operators such as merge
    * Can be used to integrate with callbacks
    * Is less error-prone than flowViaChannel because requires explicit await() call

Partially fixes #1210 | 2019-05-27 21:37:46 | b08d61c6c25d1a030ef37b6788b9ed3922520c85

Improve coroutine exception handling logic

  * Wrap exceptions into CE if parent cancels its child. This is possible because now we can be sure that no one is invoking `cancel(Throwable)`, thus if parent cancels its children, an exception is definitely handled.
  * Now exception is handled only once

First part of fix for #689 | 2019-05-17 08:55:17 | b0f6e05822f225afba43ed6e728669fe320146d8

Fix overflow bug in Flow.drop | 2019-05-20 07:45:03 | e35637a9faabb021d7a5efdc5509910cb499cd7a

Fixed Dispatcher docs

* Fixed typos
* Added reference to kotlinx-coroutines-test for testing `Main` dispatcher | 2019-04-27 19:32:57 | a2499a3ffe7522b8881a41ada45ce1779494be51

Ensure that there are no references to atomicfu in classes

* Updated to 0.12.7 version of atmoicfu with fixes.
* Added test that that is no references to atomicfu in any of the
  resulting class files.

Fixes #1155 | 2019-05-02 23:56:40 | 485eab1611433e49bd1d7c4a302b4825daf0d2e9

Knit: fix handling of backquote when making anchor reference | 2019-05-06 23:46:46 | 80039323d7ef284c3c4b851a6f3a91c46b3d7971

Knit: fix handling of backquote when making anchor reference | 2019-05-06 23:46:46 | b81f5f0ad73bc163a01a2ec88e2cb2e3d61927e1

Fixes kotlin-coroutines-test TestCoroutineDispatcher docs

Fixes #1163 | 2019-04-30 21:27:20 | 9614536ff093c99fc7febd5e31547ede8c8ceb5d

fix: broken anchors | 2019-05-06 07:26:16 | e3030e36945d79d7e54f0decaeef099a1720efcd

kotlinx-coroutines-test cleanup

    * Yield support in test dispatcher
    * Allow partial override of coroutine context
    * Code style fixes | 2019-04-25 21:07:56 | 9e5f9ab46506369f759d72e1195d9d7eb3ef1116

Flow operators: (#1132)

Flow operators:

    * switchMap
    * debounce
    * sample
    * Update RxJava version to 2.2.8

Partially fixes #1107 | 2019-04-24 14:14:03 | fe820bad2dc0743281f6ad130824114507a0a00a

AtomicFu version 0.12.5

This should really fix processing of class files

Fixes #1116
Fixes #1064 | 2019-04-22 18:05:50 | 26a14eef3c6fdf9480719dc1bc25b249b58bcb87

Fix atomicfu post-processing and dependencies

* Update to atomicfu 0.12.4, which fixes plugin operation with
  kotlin-multiplatform
* Remove explicit dependencies (plugins adds them automatically)

Fixes #1116
Fixes #1064 | 2019-04-19 15:51:05 | e1ac2e5c193654469468a04e4cadced3e3040e63

Add a period in the "You can get full code here" blocks and other small fixes | 2019-04-21 07:51:25 | 69c26dfbcefc24c66aadc586f9b5129894516bee

Knitted links and fixed minor style issues in test docs readme | 2019-04-21 08:21:59 | 445e798c3406c182337636026188fefd9f1cc950

Add README.md description of runBlockingTest, TestCoroutineContext, TestCoroutineDispatcher, TestCoroutineExceptionHandler. | 2019-04-21 01:10:09 | c0a8d1c078b6c3de49e3f6a4f77f2c713f47c7ac

TestCoroutineDispatcher code style cleanup and todos

* Kotlin libraries code style: explicit visibility and other style-issues
* DelayController.currentTime() is val
* Using atomicfu in place of AtomicXxx classes
* Added version to ExperimentCoroutineApi annotations
* Some todos are added for future consideration
* Fixed long overflows on delay (clamp) and added test
* License headers added to files
* Tests moved to an appropriate package
* Additional ordering tests using TestBase "expect" infrastructure | 2019-04-20 15:12:08 | d76456f1b6a92868e9f2f01309167003c94c66ca

fix typo: Coroutine"s"Context | 2019-04-17 08:58:42 | 43983505033a67719b0621572b868fc55f492016

Rework purity concept:

   * Purity is a way too polluted word and it is hard to tell what it means in Flow
   * Rename "purity" to "context preservation"
   * Prohibit changing the context, ignore only Job and CoroutineId (for debug mode) in SafeCollector
   * Reword documentation, add more samples
   * Add explanation for deprecated Rx-like methods | 2019-04-09 16:43:11 | d3cc25ff32a80de93ad5eaa912c8b54036c0f978

Unmute test that was failing due to JS BE bug | 2019-03-25 16:21:40 | 0d69e1353d9fcd5867fe74e0912d3f36dc7d8ea8

Merge pull request #1023 from Kotlin/debugger-sm-bypass

Improve stacktrace merge heuristic: skip state machine meaningless fr… | 2019-03-22 15:02:32 | 4ebc1306dd6e0a5929a9044bd65ff92edfeac8e0

Merge branch 'develop' into debugger-sm-bypass

# Conflicts:
#	kotlinx-coroutines-core/common/src/Timeout.kt | 2019-03-22 14:36:33 | 1ea4da4e510f68cb9311b140d2c2e13e8acefe6b

Rename CoroutineState to CoroutineInfo and improve its API

  * Rename jobOrNull to job
  * Replace coroutine with its context
  * Add check-and-act on isInstalled flag into synchronized blocks in order to avoid spurious memory leaks during uninstall
  * Replace WeakHashMap with Set to simplify debug probes | 2019-03-05 15:43:13 | 2496dc256712eb3bb282d3291cedc1497a09cdc8

fix documentation typo | 2019-03-14 13:49:36 | 325b0ad1ee98450e2598e2c0738a398e7b23d959

Add test about threading for immediate dispatch. | 2019-03-14 23:47:26 | a69f73613977bda2c25523cfcae93d6f74bd9cc0

Rename DispatchException to CoroutinesInternalError and make it an Error to better reflect its semantics | 2019-03-07 12:15:40 | 132c1e3f029610208607dcac4d55ed05f62d0642

Get rid of quadratic complexity during stack unrolling in debug agent in 1.3.30 | 2019-03-05 15:26:09 | e35baa43d379e9a7ee3eadc392665dc011268525

Make JobCancellationException copyable in debug mode

This simplifies trouble-shooting of "what caused cancellation", as you
can print out exception and see its recovered stack trace. | 2019-03-04 19:20:25 | d293639980d7a6141394dc8174180f221daa4787

Add operator invoke for CoroutineDispatcher | 2019-02-11 13:21:44 | 57540d452ef82207f14c4235ee690a4323a343fa

Hide cancel(Throwable), introduce cancel(CancellationException)

Job/ReceiveChannel/BroadcastChannel.cancel(Throwable) is now hidden and
cannot be invoked from a newly compiled code. This function had broken
semantics when used with an arbitrary exception. A safe replacement
is available in the form of cancel(CancellationException) where
CancellationException can be used to supply additional information
for debugging purposes.

Fixes #975 | 2019-03-01 09:08:43 | 0aad8f1274c4be7f02ac8f361eb0685d4b438243

Improve CoroutineDispatcher documentation | 2019-02-27 11:19:21 | 08f8214ddbcdbf0becc2b5264caf29080f04576f

Promote Dispatchers.Unconfined to stable API | 2019-02-27 10:16:00 | 9863de1401a90de61307c1ade952ebd7ac65a88a

Promote MainCoroutineDispatcher.immediate to stable API | 2019-02-27 10:02:03 | 4fc4fd555f784775360c464e178d7662291f5fba

Cancellation in consumeEach should dispose Rx Observable

Fixed bugs in MaybeSource/ObservableSource.consumeEach implementation
so that observable is disposed on cancellation.

Also optimized implementation of bridge function to avoid extra dispose
calls if possible (this is permissible by specification, though)

Fixes #1008 | 2019-02-26 16:03:24 | ae8a8743dd37a442c7882a04d1da0de367671ccd

Replace UI with Dispatchers.Main in CoroutineScope documentation

Fixes #803 | 2019-02-27 14:22:29 | b37c296f03ee38cd5cdf5091fa67a010c6a3f6d3

API Cleanup based on review

- removed asyncTest
- added pauseDispatcher(), pausDispatcher(block), and resumeDispatcher() API to delayController
- removed dispatchImmediately (the name was fairly opaque in an actual test case)
- added exception handling to runBlockingTest | 2019-02-12 02:46:06 | 8328a39b39d60fe4e44b6e1e5796d37ab02cbbae

Update coroutine test dispatcher to use structured concurrency. | 2019-02-11 23:40:52 | 9a8842956015a018ee4fa37631052fac82553d36

Make SupervisorCoroutine implement ScopeCoroutine

* Implement ScopeCoroutine in SupervisorCoroutine
* Do not indent scoped coroutines in debug strings

Fixes #915
Fixes #916 | 2019-02-20 15:31:02 | 8d506b3757777664e007b1287ce3c4cb943f4ae5

CoroutinesTimeout debug rule for JUnit 4 (#991)


Fixes #938 | 2019-02-20 14:00:57 | 2bdd4605e797a88019565938cf4a4daca92593a5

Reknit after fixing indentation in code samples | 2019-02-20 10:31:38 | 3785348e32e7180efe86862bc84da14d3631a98d

Update named arguments referenced issue

The issue previously reference was marked as fixed for one of the two problems it was about,
and a new one has been created for the remaining issue that is relevant here. | 2019-02-19 15:17:56 | 919284b159fec82ef2b6f4da9af5f88248e0713a

Obtain real stacktrace of running coroutines in debug agent

  * Capture thread of coroutine when it's transited to running state
  * During dump retrieve the stacktrace of captured thread for running coroutines and merge it with metadata-based stacktrace

Fixes #997 | 2019-02-20 08:43:23 | f18878f632dd28ad8ff847eb4f95e9ed50f373bb

Check that worker thread belongs to the same scheduler in dispatchers.shutdown

Fixes #990 | 2019-02-19 16:01:48 | 703a286e8b55d353b4ebc84320710562d627c96b

Add section about Android in debug agent readme | 2019-02-01 15:13:39 | a68376ceea89bc3599203a4c36e81cd177fc37cd

Additional documentation section about debug mode and stacktrace recovery.

Not included in a guide intentionally | 2019-02-01 11:54:06 | 418ba80a7bb0b8661823fbb325b7edac526ab7db

Call initCause during reflective exception copy in runCatching block to avoid DispatchException when initCause throws

Fixes #933 | 2019-01-15 12:18:43 | 3e4d808200e990e4b5c7e4755b23a5314fdb662a

Move debug example to a proper package | 2019-01-29 09:41:02 | c055f025f4fd3d3dc6a4ceecb798091b31f986e9

Migration to new multiplatorm plugin (#947)

Migration to a new multiplatform plugin
  
  * kotlinx-coroutines-core-[common|js|native] are merged into one core module with multiple source sets
  * Folder structure and readme are restructured
  * Publication process is patched to preserve backward compatibility with artifact names | 2019-01-28 08:34:24 | e50a0fa78aae052e128e8b17666e081e4dfc78be

Update CHM in test to containsKey for KT-18053 fix in 1.3.20 | 2019-01-23 14:49:17 | a672d5f58040f9a14661b157e085c63a7c8b2ff7

Replace old UI dispatcher name with Dispatchers.Main | 2018-12-31 13:52:33 | 8c071247dbe5928ebf5138471c1ac905c5de4018

Update coroutines-guide-ui.md

[Update]
- typo: what you might want to express here is `JavaScript event dispatch thread ` | 2019-01-08 16:01:55 | 66f0123b5fe98f861b46ef1400c8b11bc40c2ace

More idiomatic and readable example for coroutines debug module readme

* Idiomatically use suspend functions
* Idiomatic parallal decomposition with coroutineContext/async
* No GlobalScope
* Use less vertical space & more concise code to aid readability
* Link to full code file (in tests) | 2018-12-22 15:40:39 | b65dc7fe0f75b7dc76e84205c3b57c0aff09c269

Update CHM in test to containsKey for KT-18053 fix in 1.3.20 | 2018-12-22 13:38:36 | 4b60d013508c865dd8430f334e89481d93893ab1

EventLoop integration and reuse for runBlocking and Unconfined dispatchers (#889)

EventLoop integration and reuse for runBlocking and Unconfined dispatchers

* Event loop that is created by runBlocking or by Unconfined dispatcher
  is reused across the same thread to prevent blocking of the loop
* Semantics of runBlocking and Unconfined are fully retained
* DefaultExecutor also registers itself as running event loop and thus
  cannot be blocked by runBlocking
* Consolidates thread-local handling for native
* Also fixes thread-local memory leak on JVM (does not use custom class)
* Restore BlockingEventLoop class name for runBlocking event loop impl
* Internal API for custom waiting loops to be used by kotlinx-io

Fixes #860
Fixes #850 | 2018-12-21 13:41:39 | 51738243c980165ad4fb426105baf6e00d02f87b

Dokka links fixed | 2018-12-18 13:26:58 | 89d43afab3f1090a25697c1e8cebd7faac6612c1

Debug improvements (#900)

Debug improvements

* Rename printHierarchy to printJob and hierarchyToString to jobToString, introduce corresponding methods for scope to simplify scopes debugging
* Remove CoroutineState.job in favor of CoroutineState.jobOrNull
* Use runCatching in Continuation.toDebugString to avoid crashes on some Androids with R8 issue

Addresses #858 | 2018-12-18 09:47:50 | 115a13933adbce880a72c1653b7be94eba566202

Ignore exception on cancel/fail race in CancellableContinuation

There seems to be no other way to satisfactory fix the problem of
a race between cancellation on CancellationContinuation and
concurrent failure of the corresponding background process in a
way the distinguishes "failure from cancellation attempt" from
a "true failure" without placing undue burden on anyone who is
implementing `await()` extension function for various future types.

- Added testTimeoutCancellationFailRace that works as a perfect litmus
  test; being allowed to run for a while it reliably detects various
  problems in alternative approaches.
- Optimized CancellableContinuationImpl; merged its code with
  AbstractContinuation class that is not needed as a separate
  class and removed.
- Deprecated and hidden CancellableContinuation.initCancellability();
  it is now always invoked after the end of the block that was
  passed to suspendCancellableCoroutine.
- Deprecated `holdCancellability` parameter to an internal
  suspendAtomicCancellableCoroutine function.

Fixes #892
Fixes #830 | 2018-12-15 11:12:47 | 876e9bab95d34f311be030a0706497564f96d95a

Introduce test module with testable main dispatcher (#749)

Introduce kotlinx-coroutines-test module with API to set Dispatchers.Main 

  * Dispatchers.setMain and Dispatchers.resetMain extensions
  * Use real factory in HandlerDispatcher instead of using initialized-once statics (prevent ExceptionInInitializerError)
  * Improve MissingCoroutineDispatcher diagnostic
  * Do not cache failed results in test dispatcher to allow reusing it between tests 
  * Deprecate HandlerDispatcher.Main (was accessible only fom Java API)

Fixes #746
Fixed #810 | 2018-12-17 16:49:12 | 4327b2120558c0e232b522b32b3427dc2ad02bf5

fix small typo of async method | 2018-12-16 07:09:02 | 054fcc2b68f9d9933981d65c485af88dba8f89d6

After merge fix: resolve clashes between type alias CoroutineStackFrame and jvm.internal.CoroutineStackFrame | 2018-12-13 09:57:37 | cd162d356e7dbb8a6ed8e02ceae0133af2df95b5

Merge pull request #876 from Kotlin/debug-agent

Coroutines debug agent

Fixes #772 | 2018-12-13 09:39:45 | a5a7cdb86a10d6fcda61c2b9fc55963b86ca8947

Repackage byte-buddy along with debug agent (so it shouldn't be a dependency of target process), use shadow plugin for that to avoid clashes with other byte-buddy versions and publish shadow jar instead of regular one for debug module | 2018-12-13 08:58:29 | 3781a821a11a64670b5a3ffa3c276f1533332ad7

Reknit after docs fix | 2018-12-13 08:58:24 | 75f634c56e3655d475bd93c4d7a5fc7242744d69

Speedup linerizability tests, make conflation part of helpClose (fixes nightly stress failure) | 2018-11-19 16:31:51 | b733f7d0cfd3c8fcca234d7d49f4350dfeb36264

Debug agent cleanup

  * Readme
  * Do not fail on Windows during signal handler installation
  * Do not warn about missing artificial stackframe | 2018-12-12 16:08:32 | 7a6fd89c04b3ee972136c0648700f8500dfb0f23

Rephrase default dispatcher documentation | 2018-12-12 10:36:54 | e06585a482f0f94d2819c24af8ac42582d38af6a

Get rid of top level 'debug' folder | 2018-12-11 16:49:07 | 7520c978464e2f3b1cc075dea36a9f11088e2d85

Unreachable code fix | 2018-12-11 16:44:49 | f64bcde03b4c5e46d63f19d5dcb3b1738c59eefa

Debug agent code style | 2018-12-11 16:20:39 | 12695b763715338149e0bcaa3633a6e0296fc361

Code style in test code fixed | 2018-12-10 13:11:06 | 8e9e4d1706083dd5fb6fcc4c89d2a65caa33914c

Debug agent optimizations

  * Do not store creation stacktrace of the coroutine, recover it from ArtificialStackFrame
  * Reduce lock window where possible to avoid contention
  * Avoid stacktrace copying where possible | 2018-12-10 17:19:35 | 5a80d2a0b0c52121a0788acc036030812fea9f59

Debug agent to track alive coroutines

  * Can be installed dynamically or from command line
  * Captures coroutine creation stacktrace and stores it in completion, automatically enhancing stacktrace recovery mechanism
  * Allows to dump and introspect all active coroutines
  * Allows to dump Job hierarchy
  * When installed from command line, dumps all coroutines on kill -5
  * Probe support in undispatched coroutines | 2018-12-10 08:41:00 | c7239ac4915df344add7386c8aa19038499f5e4b

Scoped builders and exception stacktraces synergy

  * Recover stacktraces via both fast and slow paths in scoped builders
  * Merge stracktraces of nested scoped builders, eliminate common prefix so it looks like a flat profile
  * Optimize stacktrace-related machinery
  * Copy meaningful part of original exception into recovered one, rename "Current coroutine stacktrace" to "Coroutien boundary"
  * Rename Exception.kt to StackTraceRecovery.kt to avoid name clash with another Exception.kt | 2018-11-27 15:13:47 | 1032f5801a9719fbe67325daec944104eff793a9

Initialize JavaFx more accurately, do not leave dispatcher in uninitialized state in case of unexpected failure

Fixes #816 | 2018-11-27 12:57:16 | 69a2d9273288dec1e29a81f2c314ccf23ae99093

Fix: default dispatcher doesn't work with jsdom | 2018-11-06 16:46:00 | bb0ad4ae2772c9c4af0e3b44b129423cf5ae0c58

Sanitize class names received from Kotlin debug metadata | 2018-11-12 17:04:35 | 25a886e9ee0047f755e8d32f496ced3760e7ec64

Debug optimizations:

  * Extract call to suspendCoroutineUninterceptedOrReturn behind recoverability check
  * Cache exceptions constructors into WeakHashMap in order to avoid expensive ctor lookup | 2018-11-02 17:06:14 | e3b80d9c7198728a5566cb2c74da61ee115e61d6

Basic exception stacktrace recovery mechanism

  * Implement CoroutineStackFrame in CancellableContinuationImpl, DispatchedContinuation and ScopeCoroutine
  * On coroutine resumption try to reflectively instantiate exception instance of the same type, but with augmented stacktrace
  * Recover stacktrace by walking over CoroutineStackFrame
  * Recover stacktrace on fast-path exceptions without CoroutineStackFrame walking to provide more context to an exception
  * Unwrap exceptions when doing aggregation in JobSupport
  * Add kill-switch to disable stacktrace recovery, introduce method to recover stacktrace on the exceptional fast-path
  * Add `suspendCoroutineOrReturn` on exceptional fast-path in await in order to provide "real" stacktrace

Design rationale:
All recovery of *suspended* continuations takes place in Dispatched.kt file, the only place where all calls to "resume*" ends up, so we don't have to remember about stacktrace recovery in every primitive we are implementing. But to provide more accurate stacktraces we *have to* recover it on every fast-path for better debuggability.

Fixes #493 | 2018-11-02 12:55:20 | 675c30c4b96533a374ae36b144dbe6b26634b97b

Merge pull request #791 from Kotlin/undispatched-cancellation

Use final Job state in undispatched coroutine completion | 2018-11-06 12:55:53 | 666ea6e554fa52ea03504ab618543ca26e20ce3b

Add ExperimentalCoroutineDispatcher to binary compatibility check, restore binary compatibility in Ktor | 2018-11-06 11:03:39 | e3ab2a692a6da18ee9213a124a4c111235046c75

Add scheduler name to ExperimentalCoroutineDispatcher

Fixes #661 | 2018-10-31 13:15:35 | 92327322442d4c8be225067ff6e16c6827f8b38e

fix link | 2018-11-05 16:56:31 | 64f2b2006b5a7cf2a760ec976dd28e988ce122d0

fixed typo | 2018-11-05 14:28:47 | ace91872cc56113fa10e844069f46eb3bbec9c95

Use final Job state in undispatched coroutine completion

  * When using in-place coroutine builders, startUndispatchedOrReturn will return block's final value on fast-path. This is not correct because if any of the children had failed, whether or not exception is thrown depend only on child timings. Moreover, in the face of such race exception may be ignored if scope owner wasn't cancelled or is missing.
  * Introduce special hack for withTimeout and withTimeoutOrNull to ignore TimeoutCancellationException on the fast path
  * withContext, coroutineScope, supervisorScope, withTimeout and withTimeoutOrNull are affected and now check cancellation on fast-path | 2018-11-04 12:32:34 | 78832e3bb38560f4c4d55cdba436bf7bc9b761ca

SchedulerTask is now an abstract class with optimizations for jvm

* It removes the need for a separate SchedulerTaskBase
* submissionTime and taskContext are marked as @JvmField
* DispatchedTask is also an abstract class
* resumeMode is marked as @JvmField | 2018-11-01 21:10:39 | aa374a95dc7e6df4fd6458fe6d8abe95e2953fce

Scheduler: capture TaskContext for afterTask before running it

This is not strictly needed, since the reusable Task instances
(DispatchedTask) should be always reused in the same context, but
this makes the code more resilient to future changes. | 2018-10-22 02:31:23 | e64d9b706cb5180260e4d95fa3a990449163da51

Avoid allocation of CoroutineScheduler task object

* DispatchedContinuation and CancellableContinuationImpl have all
  the necessarily field to be scheduled | 2018-10-21 17:08:49 | 16e20347dc5557063742ea8a06dbe5162a211c25

Publish: Comments style fixed | 2018-10-26 20:02:08 | f18b9f580faff47af054cb6c0942cd15ccc7675d

Fixed exception handling for publish builder

* Test that ensures proper parent cancellation
* Stress test to ensure that exception in publisher always handled
  by parent
* Also fixed race between request & signal completion that did not
  reproduce before | 2018-10-23 05:28:12 | ac848e872da94e01ed60a6bfecbfe3926229f44f

Reactive streams integration conformance to TCK verified & fixed

* Throw NPE on null subscriber
* Throw IAE when requested n <= 0 elements
* Do not sent any notification after cancel() | 2018-10-20 16:50:05 | 8cced247b1d83f7885f21be8c9b0354dab0fd1f3

fix minor typo | 2018-10-30 19:14:20 | a223f351c1dac80443b02ab905d46acbf4a66720

Implement yield for unconfined dispatchers, documentation improvements

Fixes #737 | 2018-10-23 09:29:56 | c33ef61d4502b71e0cdc354337f261917102d1c6

fix: make snippet as non-runnable | 2018-10-23 12:33:12 | 0661d477332205c23defe65d51e4063cd009e023

Prevent temporary leaks in HandlerDispatcher by properly handling
cancellations in scheduleResumeAfterDelay() implementation | 2018-10-16 22:30:40 | e321394c359758659a07ad1c98429ec2acd8ea59

fixed typo | 2018-10-19 21:16:57 | d981966acf780078119493c1f64e30dc9fa6e02e

Merge branch 'release-candidate' into develop

# Conflicts:
#	core/kotlinx-coroutines-core/test/RunBlockingTest.kt
#	docs/coroutine-context-and-dispatchers.md | 2018-10-18 14:40:10 | a7e10146781744f6df3865a1a33fa4e7cbc2c0b6

Merge branch 'context-elements-opto' into release-candidate

# Conflicts:
#	common/kotlinx-coroutines-core-common/src/Dispatched.kt | 2018-10-18 13:59:46 | cd37d8e8b30656a92a883b646fe050ff479bafdd

Minor optimizations of UndispatchedEventLoop | 2018-10-18 12:17:25 | 23d435b17a1aaaba86cc71656a4080547c4c727e

Do not step into thread-local event-loop on CancellableContinuation#dispatch fast-path | 2018-10-18 08:54:56 | faa477496bc2c05dad4034847a3f7d3f6aae3818

Use FIFO queue in undispatched event loop | 2018-10-17 16:51:50 | 09b9d6c157c9d7c6ec84052c16e64d3eebd0bc8e

Move undispatched thread-local event loop to dispatched continuation, execute all undispatched tasks in that loop to avoid SOE in user-supplied unconfined dispatchers and 'immediate' main dispatchers. | 2018-10-17 15:37:36 | fd54bc4882357771d0bec29abbd6e99dfccab725

Rework Dispatchers.Unconfined to use thread-local event loop

Fixes #704 | 2018-10-17 07:57:30 | 7ee722a595b416023c69d987fb7e4682ac0ffe91

Cache result of ThreadContext#foldAll in the field of DispatchedCoroutine to avoid context fold in tight loops

Fixes #537 | 2018-10-16 12:47:26 | ae85797805f93f98bfad64f5f91ba97e4f2c1fbc

Dokka fixes

  * Provide module with Kotlin 1.3 API because Kotlin 1.2 from Dokka can't read classes marked as "from the future"
  * Add runConfiguration dokkaStubs which is included only during dokka task with some classpath magic for Kotlin 1.3
  * Add package.list for slf4j
  * Fix unresolved types/links in documentation
  * Suppress all internal/inherited API | 2018-10-13 12:40:32 | 706e39363b586127b29e28fd97d476129c22fe93

Make EventLoop internal, @JvmName("from") for ExecutorService.asCoroutineDispatcher | 2018-10-11 16:09:44 | b6eca2a62158b2dc8d9b41d86040924095dca662

Use toString implementation for continuations to leverage debug metadata

Fixes #679 | 2018-10-10 11:46:53 | 4220ca2106bea653f2831f19c2c93752ea0e468a

Cleanup: get rid of workarounds, cleanup guide, suppress/fix compilation warnings | 2018-10-10 08:56:41 | 1bdbb3ef364006515157b5884dc663d9c3172c6c

Experimental annotation revisit:

  * Mark our API annotation as experimental with corresponding warning or error
  * Get rid of workaround for new inference bug
  * Migrate to compiler arguments instead of annotations | 2018-10-09 16:06:29 | e6e82391c33716033996ef6718756feab641816c

Restore TOC in the root coroutines-guide.md file with links to individual files

* Knit supports new TOC_REF directive for that.
* Reknit docs (also fixed out-of-date sample file). | 2018-10-08 17:20:12 | 715acd33e564dbff128a12b10ec2c6e24240d330

Migrate to Kotlin 1.3 coroutines, drop experimental from package

* Features based on version 0.30.0
* Uses Kotlin version 1.3.0-rc-57
* Uses Kotlin/Native version 0.9.2
* Uses AtomicFu 0.11.9-eap13
* Replace SuccessOrFailure with Result
* Replace buildSequence and buildIterator with sequence and iterator
* Apply @BuilderInference on all builders (including extension methods to workaround inference bug) | 2018-07-13 07:33:25 | 0950dfa1fe114e3682a546e3e53ef34dec9dfd4a

Fix lost exception from dispatched withContext on cancelled job

Fixes #675 | 2018-10-08 13:13:01 | 0f94304c6ae46c8f0cec24dde29d2e7af9ae7e97

Mark newSingle/FixedThreadPoolContext as obsolete, document the reason

* The will be replaced by another mechanism in the future.
  See #261 for details.
* The proposed replacement is to use the standard java API:
  Executors.newSingleThreadExecutor/newFixedThreadPool
  and convert to dispatcher via asCoroutineDispatcher() extension. | 2018-10-06 13:36:13 | f5126d0a9263f0b73a57d17031c340f78e3a25bd

Lazily load Dispatchers.Main and provide a stub impl on failure

Also specified explicit public visibility for Dispatchers object.

Fixes #658
Fixes #665 | 2018-10-06 14:09:05 | 0ece3885d445b60d254dc0fb21c7c05c7ebfb1bf

fix grammar typo

removed repeated 'for' | 2018-10-05 13:16:33 | e7a0723e930d52c4cb4665c5a3918f883287c039

Short Dispatchers.Default.toString value ("DefaultDispatcher") | 2018-10-02 09:59:11 | ec8cbd252d20adcdc91149ae9129149b252d945c

Move UI dispatcher to common Dispatchers.Main (#641)

* Main thread dispatchers are grouped under Dispatchers object and are discoverable via ServiceLoader

  * Dispatchers.Main can be consistently used and easily discovered, its implementation is discovered with ServiceLoader
  * It allows us to add iOS Dispatchers.Main implementation in the future thus opening the door for multiplatform UI-dispatched code
  * Workaround for #626, now Android users can start migration to RC coroutines

Fixed #626 | 2018-10-01 16:01:16 | cfe699fb59d799ab22da23aae983cc34b1164f29

Never loose coroutines when CoroutineScheduler is closed

* CoroutineScheduler close/shutdown sequence now guaranteed that a
  submitted task is either executed by the scheduler that is being
  concurrently shutdown or RejectedExecutionException is thrown.
* RejectedExecutionException is caught by the coroutine dispatcher
  implementation and coroutines are rescheduled into DefaultExecutor
  if a (custom) instance  of CoroutineScheduler is being shutdown.
* Added stress test for coroutine scheduler closing. | 2018-10-01 07:52:56 | 4b0f4dec24b93db4e0e0abbfe59b115e886a30c1

Coroutine scheduler is used by default instead of deprecated CommonPool

* Documentation and guide are updated correspondingly
* "DefaultDispatcher" is used as a public name of the default impl
* Implementation is integrated with virtual time-source
* Shutdown sequence is reimplemented in a safe way for tests,
  makes "close" safe to use on custom instances.
* "close" on DefaultDispatcher throws exception just in case
* -Dkotlinx.coroutines.scheduler=off can be used to switch back to
  CommonPool

Fixes #198 | 2018-09-28 09:20:49 | 303708b27f8d997ae482e3106679a7d170bc16d7

Exception unwrapping logic rework, do not unwrap cancellation exception if parent can handle exceptions

It allows to properly handle only relevant exceptions by child without reporting the same exception multiple times, fixes suppressions hierarchy and allows to implement supervisorScope properly | 2018-09-28 09:29:21 | 88e72f9973810119f105f78768b59e19f6a49c26

Introduce SupervisorJob & supervisorScope

This change also fixes propagation of cancellation for Job() constructor.
When both Job() and SupervisorJob() are cancelled with exception (fail),
they cancel their parent, too. So we have similar behavior between:
* Job() and coroutineScope { ... }
* SupervisorJob() and supervisorScope { ... }

Fixes #576 | 2018-09-23 16:16:04 | 21f171c8cb09831e25acdeab5c667cf3c15a9692

Avoid OOM in thread-pool dispatchers, try to reflectively invoke setRemoveFutureOnCancel on executor instance and use default dispatcher if attempt failed

Fixes #571 | 2018-09-25 12:45:53 | e29f49799d118b5c3feb38886af3030d027e7b60

async and async-like builders cancel parent on failure

* Affects async, CompletableDeferred, and all Rx integration builders.
* This makes all coroutine builders totally consistent. They all
  cancel parent on failure, but they all consider "CancellationException"
  to be the case of "normal cancellation" that does not propagate to
  parent. The only missing case is Job() that should be fixed together
  with introduction of SupervisorJob().
* Note that "scoping" builders don't "cancel the parent", but rethrow
  the corresponding exception instead, so it that is how it gets
  propagated up the stack.
* This makes parallel decomposition exception-safe. You
  cannot loose an exception as along as default (child async)
  behavior is not overridden.

Fixes #552 | 2018-09-27 16:17:16 | 52bfdabfa1476f55c1b3880d43f49977fc8df943

Copy deprecated annotations on Job member to inheritors

* Makes them easier to find for cleanup
* Avoids bug with light classes | 2018-09-28 09:41:58 | ffda1da6aec27b51f0bc8640f0e48c8fcd1e8f59

Restore binary compatibility of Executor.asCoroutineDispatcher

Fixes #629 | 2018-09-27 18:19:38 | 18cc588106ff7f4c680831809e5af8d75063c689

fix broken links for kotlin web site (#628)

* fix broken links for Kotlin web site | 2018-09-27 15:42:04 | cbeef1039d7402939bac8ec4674e1a7b1adf993a

Merge pull request #588 from Kotlin/handle-exception-fix

Handle exceptions fix | 2018-09-25 21:00:29 | 25b4388ef2f94909acac51cf1e0206975cc4b84a

Add name parameter to Handler.asCoroutineDispatcher

Fixes #580 | 2018-09-25 13:40:30 | a180ff75e9f7c97189a2651e96f4212bff0b105e

Fix lost exception during cancellation in produce, fix integration with play services after rebase | 2018-09-25 16:16:02 | 1b22af7e462272cbc33fd019975ee3ec5dbf1b78

Merge branch 'develop' into handle-exception-fix | 2018-09-25 13:10:26 | 1e0a2f0ad358c49d97602ee01ecf76602721fa4f

fix compilation | 2018-09-24 17:29:00 | f30715955637d2006e17fda7f99d002877fedc1c

Docs for context/coroutineContext in AbstractCoroutine are fixed | 2018-09-24 17:29:42 | 2d8cad05755d47af7987f39385527d3bddb15377

Fix exception aggregation to ensure atomic handling of exceptions

* Removed legacy onFinishing handler support from JobSupport.
  - It is no longer needed, because handleJobException covers #208
* Fixed bugs that were masked by cancelling parent from onFinishing.
* Consistent "Finishing" state was introduced in internal machinery:
  - Job enters finishing state when it is failing or it is completing
    and has children
  - Finishing state cleanly aggregates all failures, tracks cancellation
    and completion status
* Job.isFailed is introduced as a consistent way to query the "failing"
  state of the job that was previously only implicitly available via
  invokeOnCompletion handler (cause != null means a failed job) and
  the documentation for both Job & Deferred is updated to reflect that.
* Source-incompatible change: Job.invokeOnCompletion boolean parameter is
  change to onFailing. Such handlers are now invoked as soon as the job
  starts failing and the root cause exception of the failure is consistently
  passed to all the handlers.
* The following internal methods were introduced to facilitate this:
  - Job.failParent(exception) is used by child to signal failure to parent
  - Job.cancelChild(parentJob) is used by parent to cancel child.
* Child never aggregates exception received from it parent, but uses
  it as it root cause if there is no other exception.
* JobSupport.handleJobException() logic for launch/actor is split into:
  - failParent - can be invoked multiple times on race;
  - handleJobException which is invoked exactly once.
* Exception materiazization is much lazier now, which should
  significantly improve performance when cancelling large hierarchies.
* Other minor perf improvements in JobSupport code.

Fixes #585 | 2018-09-14 09:52:50 | ecbc85cbdad134d868698e22c0fdd7220eaced0f

Typo fixed | 2018-09-22 13:28:37 | 63e3896d85f827f2e403ffd25593ac5d9af54715

Fix typo in deprecation message of JavaFx dispatcher | 2018-09-20 17:10:30 | 39a2c559b538b8681c0724d5ec3ee6058af4e1c3

Cosmetic fixes | 2018-09-20 08:25:56 | 2dd53204e7047e970f145281c11a9c834021b3a9

Improve HandlerDispatcherTest, check that jobs are actually executed | 2018-09-19 11:30:51 | 847eba7c935ed784e918d976c9c43464179a2df9

Reknit guide, fixed TOC in Knit with comma & verify mode in example-context-09 | 2018-09-19 11:49:42 | bca98f4e9ea3c485c8691209be32fee487f812fe

CoroutineScheduler: fixed race between createNewWorker & shutdown for tests | 2018-09-14 12:17:12 | 241e74e6a2cdadaa2753f40a326c732e95fac2d0

Fixed sporadic test crashes related to withTimeout and children

- The bug only manifested when withTimeout coroutine had children working
  in a different dispatcher
- A separate stress-test that reproduces this problem with much higher
  probability | 2018-09-16 12:31:13 | fa9586bc283d60427ad3e9162de7962da4b0ec1d

Updated dispatchers references in readmes and docs | 2018-09-11 16:16:49 | f189cec57d7d0751464a5939f1bbcbd32e15d7c0

Dispatchers are renamed and grouped in the Dispatchers object

* Dispatchers.Default — a default dispatcher for background asynchronous tasks
  (currently backed by FJP commonPool, a new dispatcher in the future).
* Dispatchers.IO — a dispatcher for blocking background operations (#79).
* Dispatchers.Main — a dispatcher for Android Main Thread (#533).
* Dispatchers.Swing — a dispatcher for Swing Event Dispatch Thread.
* Dispatchers.JavaFx — a dispatcher for JavaFx Application Thread.
* Old dispatchers are deprecated, CommonPool is deprecated, too.
* awaitPulse() in JavaFx and awaitFrame() in Android are top-level funs.
* Introduced HandlerDispatcher, SwingDispatcher, and JavaFxDispatcher types
  in the corresponding UI modules for type-safety and future extensions

Fixes #41
Fixes #533 | 2018-09-11 15:42:03 | dc29b071d4784e3739f89223ced2333ecd5408ad

Fixed hangs during thread termination in IO dispatcher

Fixes #524
Fixes #525 | 2018-09-11 12:38:14 | 750d468b3281570910d0cd4000d4e29702b25020

Invoke handler using invokeIt to avoid JS bugs | 2018-09-07 11:36:05 | c430e0797e87af77f812bbcfb8751e4a0e31ffc6

AtomicFU 0.11.5 to fix Windows compilation | 2018-09-04 14:58:45 | 61abcd224a13f674bffae096afa7250de262df87

typo fixed | 2018-08-24 12:24:02 | 1a1237083b14d5de8f13f66b7a4ba6d9e26183d7

Introduce IO dispatcher to offload blocking I/O-intensive tasks

Fixes #79 | 2018-08-23 14:27:19 | f5e67ba597acdfb90ef84d29e4d6028f3f17a6ba

Introduce ThreadContextElement API to integrate with thread-local sensitive code

* Debug thread name is redesigned using ThreadContextElement API
  where the name of thread reflects the name of currently coroutine.
* Intrinsics for startCoroutineUndispatched that correspond to
  CoroutineStart.UNDISPATCHED properly update coroutine context.
* New intrinsics named startCoroutineUnintercepted are introduced.
  They do not update thread context.
* withContext logic is fixed properly update context is various situations.
* DebugThreadNameTest is introduced.
* Reporting of unhandled errors in TestBase is improved.
  Its CoroutineExceptionHandler records but does not rethrow exception.
  This makes sure that failed tests actually fail and do not hang in
  recursive attempt to handle unhandled coroutine exception.

Fixes #119 | 2018-07-25 09:22:46 | 7587eba96a230f3f0ab0c04f52723e926f7a845d

AtomicFu version 0.11.3 (bug fix) | 2018-08-23 11:05:46 | be065fd2c566acf4f600de23d45d70cf9f2144bc

Introduce ExecutorCoroutineDispatcher instead of CloseableCoroutineDispatcher

Fixes #385 | 2018-08-15 10:03:23 | b517f0529fe4a2066ca8ac985c08206cd4587758

Add workaround for K/N bug | 2018-08-22 09:37:41 | bbe6d8a915b2be9c0a7ff9d92677c878718fa219

Implement withTimeoutOrNull via withTimeout to avoid timing bugs and races.
Remove deprecated API

Fixes #498 | 2018-08-21 16:45:29 | 988eb26469819f7cc8cb1ba26c3a76a6805e8387

Provide API to create limited view of experimental dispatcher

Fixes #475 | 2018-08-15 09:06:06 | cac1a0f13c5b81cdfa3c2d1020e8d86ac8cd0029

Additional debug output for CoroutineSchedulerStressTest | 2018-08-10 17:38:41 | 21ce9c066c752adf4db1e8388a9d38a390b5f08b

Execute EventLoop#invokeOnTimeout in DefaultDispatcher to allow busy-wait loops

Fixes #479 | 2018-08-08 15:04:59 | e90cdb031ffab87d9f7671cc9e856b2a9534d59e

Scheduler tests fixed:

[temporary] Ignore flaky tests
Fix benchmark compilation
Fix WorkQueueStressTest | 2018-07-26 17:02:03 | 9542f1ce4f84d08ef2b33d14ce3ae79a8a93fa86

Scheduler improvements:

Fix (one more) ABA problem in tryUnpark
Global TaskContext to speedup CPU tasks
Documentation improvements
Stress tests constants tuned to be more robust and faster on local machine (and when ran from IDEA)
Style fixes | 2018-07-26 10:57:04 | e50fb89c4e80d7accb9bdfff3ce54c59d2857c26

Scheduler tests infrastructure

Support "kotlinx.coroutines.scheduler" property to change DefaultDispatcher
Updated scheduler shrink test with custom idleWorkerKeepAliveNs config,
so that they execute faster
Fix submissions from another instance of CoroutineScheduler
Run JDK16 tests and tests under new scheduler tests only during nightly stress test | 2018-07-20 20:57:57 | 5c7454b8a872d925f206f418c16d9880bf23e25f

Removed wrapper from LimitingBlockingDispatcher by introducing TaskContext | 2018-07-23 09:38:06 | 216e4d30a2b225361a4f3e59465c079a0f116379

Fixed ABA problem in parkedWorkersStack and other stress improvements

* Workers are now numbered starting from 1, zero is used as sentinel
* Workers are lazily created (no threads initially)
* Close/shutdown of the scheduler also clears state so that subsequent
  rogue attempt to dispatch anything fails.
* Work stealing is more predictable. It starts at random index but
  then goes linearly via workers array. | 2018-07-20 20:25:58 | db22e4023442341d39d0c3797de73e74efb25882

Scheduler cosmetics

Stealing logic cleaned up a bit (mostly style)
Update worker thread names when worker threads are terminated to maintain
consistency between their index in array and name;
Improved debugging info (toString)
Merged yield and spin counters, parkTimeNs is in Int | 2018-07-19 11:12:31 | bba6e8918e32d521109583a9024b3d5e82da53f5

Improved management of parkedWorkersStack in terms of ABA/concurrency;
Also includes documentation, naming and packaging fixes | 2018-07-18 10:12:31 | 1d3b0191ecbf498965d81257c80ad6f87e583552

Improved tasks dispatching:

Merge blocking and created workers into single state variable
Replace j.u.c. queue of parked workers with intrusive stack to support shrinking and increase performance
Replace j.u.c. global queue with Michael & Scott queue which supports conditional polling
Poll for blocking tasks from global queue when CPU token is not available
Make last ditch effort before thread termination
Idle reset on requestCpuWorker | 2018-05-03 11:52:00 | 18a91347466560b63144d0097f248d9edb029780

Fix ordering bug in QuasarTest | 2018-07-25 16:16:23 | a608a335ff57e969f69985c43ee70c30da1dba8f

Get rid of compiler bugs workarounds | 2018-07-25 13:27:14 | 5f73827f3131332018c02650057eff4aa2886ae7

Channels concurrency improvement:

Make close, cancel, isClosedForSend, isClosedForReceive and offer linearizable with other operations
Fix bug when send operation can be stuck in channel forever
New concurrency tests

Fixes #359 | 2018-07-17 15:39:20 | ea651aa5badbc20f911c844db2a57ea4f68fc38b

Access to PlatformImpl in JavaFx dispatcher, on Java 9 it's an internal module which should be explicitly exported

Fixes #443 | 2018-07-20 12:07:28 | 5557245405f965ec5ca26083301559066a1be147

Minor grammatical changes to the Coroutines guide

Minor fixes for the English grammar in the coroutines guide to help ensure new readers understand coroutines properly. | 2018-07-19 20:01:40 | 977ada1e74e0ae9b011fb219891433a6d36e9ef3

Validate FJP.commonPool parallelism to avoid pathological bugs

Also always construct private FJP pool if
kotlinx.coroutines.default.parallelism is explicitly specified.

Fixes #432, #288 | 2018-07-11 10:36:07 | 1e12210cd2bccdfd866b1c9649cd19e40663fb5f

Change order of handlers in JobSupport and CancellableContinuation
1) Invoke handlers before dispatching in CancellableContinuation to make behaviour timing-independent and Unconfined doesn't produce unexpected results
2) Invoke onCancellation -> handlers -> onCompletion in Job to make behaviour timing-independent

Fixes #415 | 2018-07-03 08:11:21 | b10287ecb35463f471ac120367a0a4f56f6b5c49

Typo fixed | 2018-06-26 11:58:39 | 7981999a156918abced59de696b02d9bc731f808

IO: fix joining and continuous writing byte array interference | 2018-06-13 16:49:45 | 9faa0395afd26a3c29cd67de5dce635a7882cf5c

Update ThreadPoolDispatcher.kt

Fixed typos. | 2018-06-09 17:01:53 | 517a2592077b067032d6c0379226d0467d7662f1

IO: fix continuous writing session interfered with joining | 2018-06-01 14:23:47 | e15eae8e3537080a82078873d762ad9de61f50f4

Typo fix | 2018-06-03 23:34:22 | e185ed6f918a1df082832c9059a091505b9a5cf9

Introduce deprecated ReceiveChannel#use to preserve backward compatibility with SubscriptionReceiveChannel, fix reactive samples | 2018-06-01 12:30:34 | 313978cf6b3901b1d7fbfb5d1f688c068a072c09

LockFreeMPSCQueue optimized & fixed

* no need for REMOVE token to hurry up GC
* Placeholder logic is fixed to avoid potential data loss on wraparound
* Stress test for resize/copy added | 2018-05-30 18:58:02 | c22a1c748e93db6e7d4e73f9118e8435edbeb698

Leaking handles in awaitAll are fixed | 2018-04-28 16:22:29 | e0b6db04b3bd86e942bc7e40081a82aedd8fd200

Delay bug fixes:
Invoke clearTimeout on cancellation in JSDispatcher
Remove delayed task on cancellation from ThreadSafeHeap on cancellation to avoid memory leak | 2018-04-26 13:03:40 | cd00643b92c9698ca728f92a66f52b30b3811d05

Documentation for debug property values | 2018-04-11 19:21:23 | 590c8889c2bb5341f15ee20e440c5599342fe34b

typo fixed | 2018-04-04 06:59:33 | 905a512625ad96dcd45c789f983babd93dfde011

Add extension to ExecutorService to return closeable CoroutineDispatcher

Fixes #278 | 2018-03-20 19:28:52 | 26f4b9ecd1bdd03299b668541f7c7c9ecaf9ab7c

Debug toString for channels

Fixes #185 | 2018-03-06 10:37:42 | e4b6f09af7c0d0b6963fa8611e867ff3292fad0e

rx-example: Added application plugin & fixed to use runBlocking | 2018-03-05 14:58:59 | 00560e8b0add1628bd0a32202b6f3cc301b35af3

Use NodeDispatcher on ReactNative

Fixes #236 | 2018-03-05 09:01:07 | ecc68f13141d1353aa2bb1d027a077e0fd7be4fb

Check for undefined `window.addEventListener` when choosing default coroutine dispatcher.

Fixes #230 | 2018-02-10 19:35:58 | 54d57e0c1fff22fe1d72c762f2bdbf01995395ca

Update README.md

Minor typo and typography fixes. | 2018-02-04 00:30:58 | 7dd6b66eced47e4ddf0b2c76c974ac19612b827c

IO: fix error propagation in blocking adapter | 2018-02-02 14:18:47 | f0c1d99e2c5c5978da7ace9d58c61a5648ed7687

Update coroutines-guide.md

This tutorial suggests just Async suffix:
https://github.com/Kotlin/kotlin-coroutines/blob/master/kotlin-coroutines-informal.md#asynchronous-programming-styles
Also, there was "of" instead of "or" | 2018-01-29 17:39:02 | 7e94e70734f6e01b0522d11071e6825879a221e7

runBlocking is improved to properly support specified dispatchers,
so that `runBlocking(UI) { ... }` can be used outside of UI thread.

Fixes #209 | 2018-01-29 15:07:21 | cb78787638039096804bc1b97031bcb9801c0547

Workarounds for KT-21968 to fix JS tests | 2018-01-24 20:31:22 | dfeba242b9e328f7528507f9349623671a00333c

IO: fix joining sequence, avoid infinite joinTo suspension | 2018-01-23 20:16:54 | d1842c6301d8debca8509809d473ce7e889b1d7b

IO: make reusable cancellable continuation implement DispatchedTask | 2018-01-12 15:46:22 | 4d01f7ec3b33f7633f3737a5ab3a3fc90703f57f

JS: Introduce Window.asCoroutineDispatcher and use custom queue in
Window.awaitAnimationFrame to align all animations | 2018-01-13 08:20:32 | 1867f6de0fb39077d0cb13fdc0400dd4568f717b

Actually fixed startup/shutdown of DefaultExecutor for tests to prevent
thread leak. Includes test-case. | 2018-01-12 15:28:24 | 9483301695f4c0784d663238ecd0ef04bbfcbea3

MPP: Debug toString should not depend on kotlin-reflect | 2018-01-11 16:04:12 | b79277b4fab5353680445f36dd9b19a740828203

IO: Use TestBase in all tests and fix leaking threads in tests | 2018-01-11 10:48:19 | c45f5fa3b636d66b824351c8d8d9368b8ee4e37f

MPP: Ported DispatchedTask perf improvements to JS and more code is made common | 2018-01-11 09:39:36 | f29203c158a526f90ae8574abfc1ba6dd5249262

Performance: Remove DispatchTask, store value in DispatchedContinuation | 2018-01-10 13:25:25 | f2239e191f55883486d5ce04ffb0c6f75cdc3468

Update coroutines-guide.md

Correct `Dispatcher` spelling | 2018-01-08 13:56:54 | fa13beba79e6ebb68588ba2167b67a77196907d3

Optimize creation of DispatchTask for cancellable continuations (fixed) | 2017-12-28 09:21:14 | bdf23f28c425ea391baa7ddbc3ba012d15e6dfa5

Optimize creation of DispatchTask for cancellable continuations | 2017-12-27 22:09:43 | ac48070de5e20b727b6d9ffd5cc7c259426fb6fb

MPP: DefaultDispatcher internal impl class renamed to JSDispatcher | 2017-12-27 10:14:54 | a919827885289271a6c598ab47fdf4434a8e0da3

fix typos | 2017-12-24 19:55:06 | d2d42ea802b54d2ede23f3edf3c18521ae46a3e9

IO: fix accidentally used tryResumeWithException | 2017-12-06 14:09:01 | 9ef4e0c05168acdb2c955079e2ee857cfec9de06

IO: fix spuriously hanging pipe tests | 2017-12-05 12:41:42 | 4adac45480b33664d79b24f7a779e7d4c1da68b1

IO: fix joining with different write byte orders | 2017-12-05 09:35:56 | 8af8937a34e893661dfe15f9be598eac50b101df

IO: fix infinite writeSuspend loop caused by auto-resuming flush | 2017-12-05 09:27:09 | e6764086ef4a03ec610245740b379f5da617224c

Bug fix: start hangs on lazy coroutine with attached invokeOnCompletion | 2017-11-30 13:41:47 | 5610e1df2eb3f67be8b45633b5d6ffbf73ec6bb8

Add DefaultDispatcher on some reactive operators | 2017-11-29 21:12:35 | e19ee04ca72316f9d67a58d35b8be398b059f1f5

IO: fix too expensive joinTo fast-path | 2017-11-23 09:39:27 | 060f36a06d341f43c0f9e77fd6706bf71f94972c

IO: fix typo in test name | 2017-11-20 08:43:26 | 9a6ca1a006debfa08392027508d03a141ae53841

Introduced ReceiveChannel.cancel method;
all operators on ReceiveChannel fully consume the original channel
using a helper consume extension, which is reflected in docs;
removed `suspend` modifier from intermediate channel operators;
consistently renamed channel type param to <E>;
added two versions for xxxTo fun -- with MutableList & SendChannel;
added tests for all channel operators;
dropped/deprecated ActorJob/ProducerJob, fixes #127 | 2017-08-17 18:01:33 | b555d91193d9e76710062451cf94a94d14820e98

IO: fix race in closeWaitJob of JoiningState | 2017-11-17 16:30:22 | 47d92bafe90d899dfb53cd0f8bf7eae75504047e

IO: fix accidentally missed it | 2017-11-17 16:29:49 | d42bdadc8520ec490d5b37f5f160b54d4541d2f8

IO: fix race in ByteBufferChannel.write(lambda) | 2017-11-17 15:39:03 | 7bf4fa9e3b19a8200450fabe396a0ff854615596

IO: fix joining of already closed but not empty channel | 2017-11-14 11:52:32 | 9e9929d376d2b92cd5fda2f21f7cc1eb51f66ca8

IO: fix lincheck dependency | 2017-11-10 20:22:53 | b94ce42827dc5f9294f19b99da356ad585fb01ea

IO: fixed awaitClose and copyDirect | 2017-11-10 09:22:23 | 373d590e103f3203f61b2fb93b3b82bcce1de13e

IO: fix race in joined flush once again | 2017-11-09 18:18:05 | 8e9138ca4a297189f49bece8e739b6584f69e061

IO: fix joined close/flush | 2017-11-08 13:50:13 | 2fdb5aa4867b60f7c659cf4d950babfd2a43a67a

IO: fixed joined channel flush | 2017-11-08 03:15:39 | 625c1fefa57f95af2b723b7c7e3b1a5319c69faf

IO: fixed joined ByteChannel close | 2017-11-08 03:11:53 | ca8762b2f6a1043103a45153357a5f9e5dc010af

IO: fix writeByte BufferOverflowException

it is important to setup buffer's positions again after suspension
it is not the case if we don't hold writing state during suspension | 2017-11-07 16:42:15 | bab9f7927ca780b242c794578c02ddf63db40375

IO: fix race in readSuspend

consider state change:
writer: IDLE(empty) -> !do write -> IDLE(buffer) -> !close -> closed = C
reader:  !suspend -> resumed -> closed = C -> [here]

here reader can see that there is closed state however to see published
written state it should read state again rather than simply use already
readen state to get happens-before guarantee | 2017-11-07 16:18:16 | 32c90b169d05bd372317f90ae5ad511bbcb05bc5

IO: rewrite if/else/return code to identical

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 11:23:34 | fde1a646fe5a60c8aa211764d63527ec429672c3

IO: eliminate tail suspend calls in when blocks

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 10:54:47 | 4eccfba8d4cbe55ce49ac7b70c40eea1d0adf7c9

No Job in newSingleThreadContext and newFixedThreadPoolContext anymore

* This resolves the common issue of using `run(ctx)` where ctx comes from
either `newSingleThreadContext` or `newFixedThreadPoolContext`
invocation. They both used to return a combination of dispatcher + job,
and this job was overriding the parent job, thus preventing propagation
of cancellation. Not anymore.
* ThreadPoolDispatcher class is now public and is the result type for
both functions. It has the `close` method to release the thread pool.

Fixes #149
Fixes #151 | 2017-10-20 09:36:56 | d9ae2bcb88403e0854b895ba46c2417b4c0a4752

run uses cancelling state & propagates exceptions when cancelled

* When coroutine that was switched into a different dispatcher using
`run` is cancelled, the run invocation does not complete immediately,
but waits until the body completes.
* If the body completes with exception, then this exception is
propagated.

Fixes #147 | 2017-10-20 08:42:06 | bcdd8e17fed40097f9bb8fdb3e218f95ff8603a9

Exception propagation logic from cancelled coroutines is adjusted

* When cancelled coroutine crashes due to some other exception, this
other exception becomes the cancellation reason of the coroutine, while
the original cancellation reason is suppressed.
* UnexpectedCoroutineException is no longer used to report those cases
as is removed.
* This fixes a race between crash of CPU-consuming coroutine and
cancellation which resulted in an unhandled exception and lead to
crashes on Android.

Fixes #152 | 2017-10-20 06:00:50 | 6aed878a67e6f707e6c3afb0879beb8822a95d6f

Fixed Reactor docs (Scheduler.asCoroutineDispatcher) | 2017-10-07 19:58:40 | 8348b8c31d5b07541bd3d268ca2a186b0fe1ad6f

Failed parent Job cancels all children jobs, then waits them

Also improved debug output a little bit | 2017-10-07 12:44:48 | a36ab94253bb9945c6377eb43db0cb1071019c40

IO: eliminate race in close

I knew that I'll hit this bug anyway. Here we MUST flush twice as
flush at read suspend is not enough. If a writer closes then the first
flush does flush and it closes so all readers will see all pending data.
If a foreign thread does close then the first flush is makes no
difference however the second is required for proper cleanup and
to do tryTerminate | 2017-10-04 18:34:18 | ad68c06c1200f2038c26adeab2abf801a2a2114b

IO: fix verifying pool usage

buffer view doesn't hold original pool reference to make
pool chaining working | 2017-09-29 15:18:00 | ccf8dde980a4701b9cd30e1df23e5cbefdd93b53

IO: fix writing byte packet | 2017-09-28 07:58:15 | 754a19b188dc6d486d73b8e3a2f0c483c3f88f9b

Documentation for DefaultDispatcher in the guide | 2017-09-29 18:39:03 | 66f018c489c6b0ec0831fa9953db34da3edff5f3

DefaultDispatcher is introduced | 2017-09-28 11:27:05 | c0d559b594fce802f1d1be9a6feef49019d17160

IO: fix ByteWritePacket.writePacket size update | 2017-09-17 19:48:26 | 5ca0d12c1e8a9672d40fe83cd31d1b2426f397e7

IO: fix writer scope type | 2017-09-11 10:06:54 | ea3a418f84f3731e92658cedfa11878a8828500c

IO: fix byte channel readX operations return -1 during close+flush

Read operation should try flush before return -1 if closed because
the close operation setting close status first then do flush
so reader could see closed status but not-yet-flushed byte counters | 2017-09-11 07:31:08 | e4d3ce750ed8b864a435fb0926d0d77e9c02b208

IO: add more byte packet tests and fix few bugs | 2017-09-06 18:50:51 | 5feaf6973c23fae3c5a8df64748e2181c50dd0d6

IO: fix delimiter lookahead | 2017-09-06 15:52:04 | 1cc86083e7be17ce53f7c80cfa6ba67e8569e33e

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 99cdb380bf6391db7e7d08e8673c627c554074d8

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 776b370d58883e9bce0c309ebb4919ef4cdac13c

IO: fix byte packet write buffer leak | 2017-08-25 08:39:00 | 974cbb3b21b8d7613c41ee2221ce435e347b068f

IO: fix byte channel close with error buffer leak | 2017-08-25 08:06:59 | 24b040f1345db27b45589a975daab45bf9325494

IO: fix CR-only line endings processing + tests | 2017-08-23 11:39:41 | a9a936d1a325ee0baf36df444414e1e17ac539da

IO: rename writeStringUtf8, fix implementation + tests | 2017-08-23 09:26:18 | fbcba264a37580b5c47f3314395e5146afb38287

IO: fix copyAndClose + tests | 2017-08-23 09:11:55 | fc84a634ff9a1acca04e09fa5a031b904c5c8838

IO: byte packet readLine support + bugfixes | 2017-07-26 09:59:16 | 0b12ffc0178844e813223039adf5d7510703485d

Fixed bug in LockFreeLinkedList (invariant & lock-freedom violation)
Migrated atomic ops to AtomicFU library for ease of code maintenance
Implement lock-freedom testing in LockFreeLinkedListAtomicStressLFTest | 2017-08-10 18:09:26 | 7eb41efbacd498704f25465e2a58f4892c16aa32

Typo fixed | 2017-07-24 13:42:34 | a448903dcac25e450d87c49705e7a6693a300d29

Use CompletableDeferred in the guide section on coroutines;
fix (reknit) broken links to factory functions that are now top-level | 2017-07-21 22:00:30 | 256812a1c09511744575ed3d2c64fec27979f391

More documentation on CompletableDeferred states and style fixes | 2017-07-21 15:04:23 | 8e2ae9964614e35295a8d695114b00c35f5fc755

Better debug strings for continuations | 2017-07-12 12:22:21 | 69d9c852289f1a4a9ffe107dc75cc71871cfe34e

ObservableBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 10:16:30 | ed6985459318209be084ff807676cb722387fb6f

PublisherBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 09:58:44 | 58246ca7e7727632ba50c41d0314df47ba9e3fc0

Fixed IllegalStateException in select that concurrently selects, which
was due a problem with Job concurrent cancel and dispose of handle.
The bug was introduced by addition of Cancelling state for a Job.

Original stack trace in select was:
java.lang.IllegalStateException: Check failed.
	at kotlinx.coroutines.experimental.internal.LockFreeLinkedListNode.remove(LockFreeLinkedList.kt:236)
	at kotlinx.coroutines.experimental.JobSupport.removeNode$kotlinx_coroutines_core(Job.kt:734)
	at kotlinx.coroutines.experimental.JobNode.dispose(Job.kt:995)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.initCancellability(Select.kt:294)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.getResult(Select.kt:273) | 2017-07-11 09:50:00 | e9f64491787433b3d53ad5800456524820058d5f

typo fixed | 2017-07-10 10:46:13 | d28cc872fb7815b51ceb7c84a4e77117fce380c7

typo fixed | 2017-07-10 10:44:07 | 8b0b07ab81f12bc605462a6a1333b61abce547cb

typo fixed | 2017-07-10 10:43:20 | 93f7e8e22019643caaf14ae480c05ab0a349064d

Bug fixed on waitTimeoutOrNull (was flaky testOuterTimeoutTest) | 2017-07-10 10:38:54 | 769d48217f8787c7f64c07da6e53c27b2d703274

Refactor DispatchTask to reuse it for dispatchYield | 2017-07-10 10:16:20 | 2a93646a8054ce7819e9bdbff8d28849a19e874b

Fix SecurityException when trying to read "kotlinx.coroutines.debug" prop | 2017-07-10 07:15:40 | e824eaaab9d053ff0f2cc028c7413bb83adcacc0

A fix & optimization for select impl helping scheme | 2017-07-05 06:53:29 | 907074f1f63871ed29feab3173a2e38b30d8fbb6

Reactive tests fixed for cancellation logic change | 2017-06-26 11:25:56 | 7a7b00938934ef7d0855eb24ec93a06d0b0c97e7

Fix typo: debugging more -> debugging mode | 2017-06-24 21:03:35 | ed5ed49913498b4e880415d2f0fb9004e20e1b5a

Typo fixed | 2017-06-23 10:27:02 | 6c18dfd15f6e1703db57531422bc0df3cb7d08ff

fix typo.

somethine -> something | 2017-06-18 07:37:59 | 81a6f23ca68d7ed37f36dcb966fe74e3bc53de57

Typo fixed | 2017-06-09 17:25:03 | c3c2f3269220f5d7ae20e7592ca1253061b50a95

CoroutineExceptionHandlerTest fixed | 2017-06-09 15:59:25 | 866521b83ed0676d0203dec35de5fb797bc9a59d

SimpleSendReceiveTest is fixed to account for close conflation | 2017-06-06 11:36:38 | 9ff32644381bf1a692d9a935170a9f7b7023f244

Fixed lock-freedom of send/offer on closed channels and related bugs.
Conflated[Broadcast]Channel hang of concurrent offer/close is fixed. | 2017-06-05 14:04:39 | e6e8ce8d46cee273e00ee130334239880734dc2f

Integration readme title fixed | 2017-05-17 11:59:49 | 0c2e25d7c38f50bd3c9866ea1fc2c12d5d74251a

launched jobs and await can be cancelled while waiting in dispatch queue

* suspendAtomicCancellableCoroutine function is introduced for funs like
  send/receive/receiveOrNull that require atomic cancellation
  (they cannot be cancelled after decision was made)
* Coroutines started with default mode (CoroutineStart.ATOMIC) using
  async/launch/actor builders can be cancelled before execution starts.
* CoroutineStart.ATOMIC is introduced as a start mode to specify that
  coroutine cannot be cancelled before its execution start. | 2017-05-11 17:15:18 | a74eb5f8b08e84f904e75aa71da4547c9178da8d

Fix withTimeout/OrNull bug with spurious concurrency on cancellation | 2017-04-20 16:23:18 | ca9d5be31a30c5f6a20875438f9ae40db4183f4c

Refactored ThreadPoolDispatcher to reuse code of ExecutorCoroutineDispatcher | 2017-04-18 12:28:35 | f04f51d5b05a0aec7c97acc202d180096a095fbf

equals/hashCode for wrapper CoroutineDispatcher impls | 2017-04-11 10:50:03 | 30dd5c129c493ca7b1a3b2b80437e8a7ec68f3ec

Starting coroutine in UI event handlers without dispatch in UI guide | 2017-04-07 15:06:22 | f724f6e2fe7c20cb48b69cd7b19b2658313231e4

Nicer toString implementations for CommonPool & Unconfined dispatchers | 2017-04-07 07:35:28 | dc9fd1c2d18da2f23d9907148b4674cda6418e49

Few minor docs & build fixes for reactor support | 2017-04-06 19:15:35 | 523516abd2023f8d968d389b32dee713130a9f83

Merge pull request #53 from mkobit/patch-1

Correct typo in coroutines-guide-reactive.md | 2017-04-05 09:41:56 | 7676e2239947273c6cbb4cb77536042bd9f2ce43

Fix repository urls

need to be reverted once bintray will fix jcenter sync issue | 2017-03-23 14:45:39 | 78fd3cb8932410af9beab4effc04bdeea4343732

Merge pull request #42 from jakiejj/master

fix typos in comments to Nio functions | 2017-03-20 07:16:24 | 9ef792fec6775bb5cdb08c84511488f324db3322

fix typos in comments | 2017-03-17 20:48:39 | 4d927c76488b96abaae7ba003f8064ad84b8334e

Typo fixed | 2017-03-14 17:39:50 | 81a5b7144484dcc8ebc89cd98fd9bd8a2d45afbe

startUndispatchedCoroutine is renamed to startCoroutineUndispatched for consistency with coroutine intrinsics | 2017-03-14 16:39:26 | 4638d79097a3d5b0c1b32c1e468ad723cc4b2bd9

Fixed bug with sometimes missing `onComplete` in `publish`, `rxObservable`, and `rxFlowable` builders | 2017-03-13 09:03:35 | d14a3901f365f622d9a7ba96fc00900011c9c009

Scheduler.asCoroutineDispatcher extension for Rx 2.x | 2017-03-10 12:06:01 | a1fe3da17907024afa50a35cbfcc72639d62bf78

not -> no typo fixed | 2017-03-09 09:57:57 | 228d084bfb87f967e216b84029b58649fcbe7472

Executor.toCoroutineDispatcher is renamed to asCoroutineDispatcher | 2017-03-09 09:03:39 | 38b5ea18e36f1a53d4cde27bf3fd21522727cbbb

Fixed dispatching logic of `withTimeout` (removed extra dispatch) | 2017-03-02 21:15:21 | 43d831f61f33262dcb4621069451d1699898d1cb

More links and typos fixed | 2017-03-01 14:21:48 | cc63363ead9d82f4e246a319ca3e0cb9f15e3a14

top-level readme links fixed to produce & co | 2017-02-22 12:04:28 | 40e89f689f89ae643f68c68efc57aebd8f8284ed

Jon.onJoin select clause is implemented, lazy onAwait/onJoin & dispatch fixed | 2017-02-22 11:56:58 | d84dbc2d75927fe8446098a225a3fbb884683bde

startUndispatchedCoroutine utility functions | 2017-02-22 06:53:49 | ee88fbef2d78e4b25f741efffabf4756bff8e7f3

buildChannel deprecation template fixed | 2017-02-20 12:53:30 | de8b9e9b336491ff0dbf107fe35d9efa030d92d3

Merge pull request #31 from gildor/on-completion-deprecation-fix

Job.onCompletion deprecation template fixed | 2017-02-20 12:49:41 | 85923e2de75ed522903cc3d64aef2ad178c1cbf8

Job.onCompletion deprecation template fixed | 2017-02-19 13:26:29 | c8f9ca308abe963cafa5f676410402fc287cfa5a

Delay implementation in Swing, JavaFx, and scheduled executors is fixed to avoid an extra dispatch
CancellableContinuation.resumeUndispatched is introduced to make this efficient implementation possible
Additional documentation for CoroutineDispatcher implementors | 2017-02-10 10:30:38 | a198bad7365a508baf1041993e9a14007f9d5aa3

Doc fixed | 2017-02-10 10:14:35 | 8c8551e7dbea7c2467060c2d3c6aa1c54c721e68

Merge pull request #29 from cbeust/patch-1

Update coroutines-guide.md | 2017-02-07 17:52:01 | 4d821e3901d038f005850b38d1e4954506306383

Merge pull request #28 from erokhins/patch-1

Update 1.1.0-beta-37 to 1.1.0-beta-38 | 2017-02-02 19:24:36 | 40f69cf704e7b31cec9c8a935317d8c173e79623

Added deprecated (with error level) plus operators on Job and CoroutineDispatcher to catch potential problem with their incorrect use at compile time | 2017-02-01 15:43:32 | 79a2868295127b81056f66d644da72db5a40d772

Merge pull request #27 from tairrzayev/readme-fix

Fixes the typo in the coroutines-guide.md | 2017-02-02 06:15:26 | 9d844fa1733f83e5e1b85c3e762a69729d3c5ef2

Dispatchers default behaviour is changed to schedule new coroutine for execution later.
Job.getInactiveCancellationException is introduced.
yield is cancellable while it is waiting to executed.
core tutorial is expanded. | 2017-01-29 18:58:33 | 7cf452eab59cdca570227f071cba2da374f77110

Finer grained control on debugging facilities | 2017-01-24 07:29:53 | aecb9aa1606b79243c8e93221de9713c164ce015

Added context parameter to CoroutineDispatcher methods, implemented Executor.toCoroutineDispatcher | 2017-01-23 13:47:20 | 67891d867da022d608d4589859002f256d9a313e

Fixed initialization of Job with parent (initParentJob), fixed handling on uncaught exceptions in standalone coroutines | 2017-01-20 09:19:52 | 58a7add417403811e822a4f6f7689ae3fd0e2018

Minor: fix version of maven-deploy-plugin, fix pom warnings | 2016-12-21 17:21:30 | c4ad15fc6246b7496d610da7419441020dfe1c56

Merge pull request #6 from hhariri/patch-1

Fixed packaged names | 2016-07-27 07:04:12 | c6993089412fbc491ddeb0a71b57e67bf31e21d6

Fixed packaged names 

On the repo, the package names don't have the suffix -1. | 2016-07-27 06:03:41 | 1abe89716c093c9e010a45a5235da7f9b50eea17

After merge fix: resolve clashes between type alias CoroutineStackFrame and jvm.internal.CoroutineStackFrame | 2018-12-13 09:57:37 | cd162d356e7dbb8a6ed8e02ceae0133af2df95b5

Merge pull request #876 from Kotlin/debug-agent

Coroutines debug agent

Fixes #772 | 2018-12-13 09:39:45 | a5a7cdb86a10d6fcda61c2b9fc55963b86ca8947

Repackage byte-buddy along with debug agent (so it shouldn't be a dependency of target process), use shadow plugin for that to avoid clashes with other byte-buddy versions and publish shadow jar instead of regular one for debug module | 2018-12-13 08:58:29 | 3781a821a11a64670b5a3ffa3c276f1533332ad7

Reknit after docs fix | 2018-12-13 08:58:24 | 75f634c56e3655d475bd93c4d7a5fc7242744d69

Speedup linerizability tests, make conflation part of helpClose (fixes nightly stress failure) | 2018-11-19 16:31:51 | b733f7d0cfd3c8fcca234d7d49f4350dfeb36264

Debug agent cleanup

  * Readme
  * Do not fail on Windows during signal handler installation
  * Do not warn about missing artificial stackframe | 2018-12-12 16:08:32 | 7a6fd89c04b3ee972136c0648700f8500dfb0f23

Rephrase default dispatcher documentation | 2018-12-12 10:36:54 | e06585a482f0f94d2819c24af8ac42582d38af6a

Get rid of top level 'debug' folder | 2018-12-11 16:49:07 | 7520c978464e2f3b1cc075dea36a9f11088e2d85

Unreachable code fix | 2018-12-11 16:44:49 | f64bcde03b4c5e46d63f19d5dcb3b1738c59eefa

Debug agent code style | 2018-12-11 16:20:39 | 12695b763715338149e0bcaa3633a6e0296fc361

Code style in test code fixed | 2018-12-10 13:11:06 | 8e9e4d1706083dd5fb6fcc4c89d2a65caa33914c

Debug agent optimizations

  * Do not store creation stacktrace of the coroutine, recover it from ArtificialStackFrame
  * Reduce lock window where possible to avoid contention
  * Avoid stacktrace copying where possible | 2018-12-10 17:19:35 | 5a80d2a0b0c52121a0788acc036030812fea9f59

Debug agent to track alive coroutines

  * Can be installed dynamically or from command line
  * Captures coroutine creation stacktrace and stores it in completion, automatically enhancing stacktrace recovery mechanism
  * Allows to dump and introspect all active coroutines
  * Allows to dump Job hierarchy
  * When installed from command line, dumps all coroutines on kill -5
  * Probe support in undispatched coroutines | 2018-12-10 08:41:00 | c7239ac4915df344add7386c8aa19038499f5e4b

Scoped builders and exception stacktraces synergy

  * Recover stacktraces via both fast and slow paths in scoped builders
  * Merge stracktraces of nested scoped builders, eliminate common prefix so it looks like a flat profile
  * Optimize stacktrace-related machinery
  * Copy meaningful part of original exception into recovered one, rename "Current coroutine stacktrace" to "Coroutien boundary"
  * Rename Exception.kt to StackTraceRecovery.kt to avoid name clash with another Exception.kt | 2018-11-27 15:13:47 | 1032f5801a9719fbe67325daec944104eff793a9

Initialize JavaFx more accurately, do not leave dispatcher in uninitialized state in case of unexpected failure

Fixes #816 | 2018-11-27 12:57:16 | 69a2d9273288dec1e29a81f2c314ccf23ae99093

Fix: default dispatcher doesn't work with jsdom | 2018-11-06 16:46:00 | bb0ad4ae2772c9c4af0e3b44b129423cf5ae0c58

Sanitize class names received from Kotlin debug metadata | 2018-11-12 17:04:35 | 25a886e9ee0047f755e8d32f496ced3760e7ec64

Debug optimizations:

  * Extract call to suspendCoroutineUninterceptedOrReturn behind recoverability check
  * Cache exceptions constructors into WeakHashMap in order to avoid expensive ctor lookup | 2018-11-02 17:06:14 | e3b80d9c7198728a5566cb2c74da61ee115e61d6

Basic exception stacktrace recovery mechanism

  * Implement CoroutineStackFrame in CancellableContinuationImpl, DispatchedContinuation and ScopeCoroutine
  * On coroutine resumption try to reflectively instantiate exception instance of the same type, but with augmented stacktrace
  * Recover stacktrace by walking over CoroutineStackFrame
  * Recover stacktrace on fast-path exceptions without CoroutineStackFrame walking to provide more context to an exception
  * Unwrap exceptions when doing aggregation in JobSupport
  * Add kill-switch to disable stacktrace recovery, introduce method to recover stacktrace on the exceptional fast-path
  * Add `suspendCoroutineOrReturn` on exceptional fast-path in await in order to provide "real" stacktrace

Design rationale:
All recovery of *suspended* continuations takes place in Dispatched.kt file, the only place where all calls to "resume*" ends up, so we don't have to remember about stacktrace recovery in every primitive we are implementing. But to provide more accurate stacktraces we *have to* recover it on every fast-path for better debuggability.

Fixes #493 | 2018-11-02 12:55:20 | 675c30c4b96533a374ae36b144dbe6b26634b97b

Merge pull request #791 from Kotlin/undispatched-cancellation

Use final Job state in undispatched coroutine completion | 2018-11-06 12:55:53 | 666ea6e554fa52ea03504ab618543ca26e20ce3b

Add ExperimentalCoroutineDispatcher to binary compatibility check, restore binary compatibility in Ktor | 2018-11-06 11:03:39 | e3ab2a692a6da18ee9213a124a4c111235046c75

Add scheduler name to ExperimentalCoroutineDispatcher

Fixes #661 | 2018-10-31 13:15:35 | 92327322442d4c8be225067ff6e16c6827f8b38e

fix link | 2018-11-05 16:56:31 | 64f2b2006b5a7cf2a760ec976dd28e988ce122d0

fixed typo | 2018-11-05 14:28:47 | ace91872cc56113fa10e844069f46eb3bbec9c95

Use final Job state in undispatched coroutine completion

  * When using in-place coroutine builders, startUndispatchedOrReturn will return block's final value on fast-path. This is not correct because if any of the children had failed, whether or not exception is thrown depend only on child timings. Moreover, in the face of such race exception may be ignored if scope owner wasn't cancelled or is missing.
  * Introduce special hack for withTimeout and withTimeoutOrNull to ignore TimeoutCancellationException on the fast path
  * withContext, coroutineScope, supervisorScope, withTimeout and withTimeoutOrNull are affected and now check cancellation on fast-path | 2018-11-04 12:32:34 | 78832e3bb38560f4c4d55cdba436bf7bc9b761ca

SchedulerTask is now an abstract class with optimizations for jvm

* It removes the need for a separate SchedulerTaskBase
* submissionTime and taskContext are marked as @JvmField
* DispatchedTask is also an abstract class
* resumeMode is marked as @JvmField | 2018-11-01 21:10:39 | aa374a95dc7e6df4fd6458fe6d8abe95e2953fce

Scheduler: capture TaskContext for afterTask before running it

This is not strictly needed, since the reusable Task instances
(DispatchedTask) should be always reused in the same context, but
this makes the code more resilient to future changes. | 2018-10-22 02:31:23 | e64d9b706cb5180260e4d95fa3a990449163da51

Avoid allocation of CoroutineScheduler task object

* DispatchedContinuation and CancellableContinuationImpl have all
  the necessarily field to be scheduled | 2018-10-21 17:08:49 | 16e20347dc5557063742ea8a06dbe5162a211c25

Publish: Comments style fixed | 2018-10-26 20:02:08 | f18b9f580faff47af054cb6c0942cd15ccc7675d

Fixed exception handling for publish builder

* Test that ensures proper parent cancellation
* Stress test to ensure that exception in publisher always handled
  by parent
* Also fixed race between request & signal completion that did not
  reproduce before | 2018-10-23 05:28:12 | ac848e872da94e01ed60a6bfecbfe3926229f44f

Reactive streams integration conformance to TCK verified & fixed

* Throw NPE on null subscriber
* Throw IAE when requested n <= 0 elements
* Do not sent any notification after cancel() | 2018-10-20 16:50:05 | 8cced247b1d83f7885f21be8c9b0354dab0fd1f3

fix minor typo | 2018-10-30 19:14:20 | a223f351c1dac80443b02ab905d46acbf4a66720

Implement yield for unconfined dispatchers, documentation improvements

Fixes #737 | 2018-10-23 09:29:56 | c33ef61d4502b71e0cdc354337f261917102d1c6

fix: make snippet as non-runnable | 2018-10-23 12:33:12 | 0661d477332205c23defe65d51e4063cd009e023

Prevent temporary leaks in HandlerDispatcher by properly handling
cancellations in scheduleResumeAfterDelay() implementation | 2018-10-16 22:30:40 | e321394c359758659a07ad1c98429ec2acd8ea59

fixed typo | 2018-10-19 21:16:57 | d981966acf780078119493c1f64e30dc9fa6e02e

Merge branch 'release-candidate' into develop

# Conflicts:
#	core/kotlinx-coroutines-core/test/RunBlockingTest.kt
#	docs/coroutine-context-and-dispatchers.md | 2018-10-18 14:40:10 | a7e10146781744f6df3865a1a33fa4e7cbc2c0b6

Merge branch 'context-elements-opto' into release-candidate

# Conflicts:
#	common/kotlinx-coroutines-core-common/src/Dispatched.kt | 2018-10-18 13:59:46 | cd37d8e8b30656a92a883b646fe050ff479bafdd

Minor optimizations of UndispatchedEventLoop | 2018-10-18 12:17:25 | 23d435b17a1aaaba86cc71656a4080547c4c727e

Do not step into thread-local event-loop on CancellableContinuation#dispatch fast-path | 2018-10-18 08:54:56 | faa477496bc2c05dad4034847a3f7d3f6aae3818

Use FIFO queue in undispatched event loop | 2018-10-17 16:51:50 | 09b9d6c157c9d7c6ec84052c16e64d3eebd0bc8e

Move undispatched thread-local event loop to dispatched continuation, execute all undispatched tasks in that loop to avoid SOE in user-supplied unconfined dispatchers and 'immediate' main dispatchers. | 2018-10-17 15:37:36 | fd54bc4882357771d0bec29abbd6e99dfccab725

Rework Dispatchers.Unconfined to use thread-local event loop

Fixes #704 | 2018-10-17 07:57:30 | 7ee722a595b416023c69d987fb7e4682ac0ffe91

Cache result of ThreadContext#foldAll in the field of DispatchedCoroutine to avoid context fold in tight loops

Fixes #537 | 2018-10-16 12:47:26 | ae85797805f93f98bfad64f5f91ba97e4f2c1fbc

Dokka fixes

  * Provide module with Kotlin 1.3 API because Kotlin 1.2 from Dokka can't read classes marked as "from the future"
  * Add runConfiguration dokkaStubs which is included only during dokka task with some classpath magic for Kotlin 1.3
  * Add package.list for slf4j
  * Fix unresolved types/links in documentation
  * Suppress all internal/inherited API | 2018-10-13 12:40:32 | 706e39363b586127b29e28fd97d476129c22fe93

Make EventLoop internal, @JvmName("from") for ExecutorService.asCoroutineDispatcher | 2018-10-11 16:09:44 | b6eca2a62158b2dc8d9b41d86040924095dca662

Use toString implementation for continuations to leverage debug metadata

Fixes #679 | 2018-10-10 11:46:53 | 4220ca2106bea653f2831f19c2c93752ea0e468a

Cleanup: get rid of workarounds, cleanup guide, suppress/fix compilation warnings | 2018-10-10 08:56:41 | 1bdbb3ef364006515157b5884dc663d9c3172c6c

Experimental annotation revisit:

  * Mark our API annotation as experimental with corresponding warning or error
  * Get rid of workaround for new inference bug
  * Migrate to compiler arguments instead of annotations | 2018-10-09 16:06:29 | e6e82391c33716033996ef6718756feab641816c

Restore TOC in the root coroutines-guide.md file with links to individual files

* Knit supports new TOC_REF directive for that.
* Reknit docs (also fixed out-of-date sample file). | 2018-10-08 17:20:12 | 715acd33e564dbff128a12b10ec2c6e24240d330

Migrate to Kotlin 1.3 coroutines, drop experimental from package

* Features based on version 0.30.0
* Uses Kotlin version 1.3.0-rc-57
* Uses Kotlin/Native version 0.9.2
* Uses AtomicFu 0.11.9-eap13
* Replace SuccessOrFailure with Result
* Replace buildSequence and buildIterator with sequence and iterator
* Apply @BuilderInference on all builders (including extension methods to workaround inference bug) | 2018-07-13 07:33:25 | 0950dfa1fe114e3682a546e3e53ef34dec9dfd4a

Fix lost exception from dispatched withContext on cancelled job

Fixes #675 | 2018-10-08 13:13:01 | 0f94304c6ae46c8f0cec24dde29d2e7af9ae7e97

Mark newSingle/FixedThreadPoolContext as obsolete, document the reason

* The will be replaced by another mechanism in the future.
  See #261 for details.
* The proposed replacement is to use the standard java API:
  Executors.newSingleThreadExecutor/newFixedThreadPool
  and convert to dispatcher via asCoroutineDispatcher() extension. | 2018-10-06 13:36:13 | f5126d0a9263f0b73a57d17031c340f78e3a25bd

Lazily load Dispatchers.Main and provide a stub impl on failure

Also specified explicit public visibility for Dispatchers object.

Fixes #658
Fixes #665 | 2018-10-06 14:09:05 | 0ece3885d445b60d254dc0fb21c7c05c7ebfb1bf

fix grammar typo

removed repeated 'for' | 2018-10-05 13:16:33 | e7a0723e930d52c4cb4665c5a3918f883287c039

Short Dispatchers.Default.toString value ("DefaultDispatcher") | 2018-10-02 09:59:11 | ec8cbd252d20adcdc91149ae9129149b252d945c

Move UI dispatcher to common Dispatchers.Main (#641)

* Main thread dispatchers are grouped under Dispatchers object and are discoverable via ServiceLoader

  * Dispatchers.Main can be consistently used and easily discovered, its implementation is discovered with ServiceLoader
  * It allows us to add iOS Dispatchers.Main implementation in the future thus opening the door for multiplatform UI-dispatched code
  * Workaround for #626, now Android users can start migration to RC coroutines

Fixed #626 | 2018-10-01 16:01:16 | cfe699fb59d799ab22da23aae983cc34b1164f29

Never loose coroutines when CoroutineScheduler is closed

* CoroutineScheduler close/shutdown sequence now guaranteed that a
  submitted task is either executed by the scheduler that is being
  concurrently shutdown or RejectedExecutionException is thrown.
* RejectedExecutionException is caught by the coroutine dispatcher
  implementation and coroutines are rescheduled into DefaultExecutor
  if a (custom) instance  of CoroutineScheduler is being shutdown.
* Added stress test for coroutine scheduler closing. | 2018-10-01 07:52:56 | 4b0f4dec24b93db4e0e0abbfe59b115e886a30c1

Coroutine scheduler is used by default instead of deprecated CommonPool

* Documentation and guide are updated correspondingly
* "DefaultDispatcher" is used as a public name of the default impl
* Implementation is integrated with virtual time-source
* Shutdown sequence is reimplemented in a safe way for tests,
  makes "close" safe to use on custom instances.
* "close" on DefaultDispatcher throws exception just in case
* -Dkotlinx.coroutines.scheduler=off can be used to switch back to
  CommonPool

Fixes #198 | 2018-09-28 09:20:49 | 303708b27f8d997ae482e3106679a7d170bc16d7

Exception unwrapping logic rework, do not unwrap cancellation exception if parent can handle exceptions

It allows to properly handle only relevant exceptions by child without reporting the same exception multiple times, fixes suppressions hierarchy and allows to implement supervisorScope properly | 2018-09-28 09:29:21 | 88e72f9973810119f105f78768b59e19f6a49c26

Introduce SupervisorJob & supervisorScope

This change also fixes propagation of cancellation for Job() constructor.
When both Job() and SupervisorJob() are cancelled with exception (fail),
they cancel their parent, too. So we have similar behavior between:
* Job() and coroutineScope { ... }
* SupervisorJob() and supervisorScope { ... }

Fixes #576 | 2018-09-23 16:16:04 | 21f171c8cb09831e25acdeab5c667cf3c15a9692

Avoid OOM in thread-pool dispatchers, try to reflectively invoke setRemoveFutureOnCancel on executor instance and use default dispatcher if attempt failed

Fixes #571 | 2018-09-25 12:45:53 | e29f49799d118b5c3feb38886af3030d027e7b60

async and async-like builders cancel parent on failure

* Affects async, CompletableDeferred, and all Rx integration builders.
* This makes all coroutine builders totally consistent. They all
  cancel parent on failure, but they all consider "CancellationException"
  to be the case of "normal cancellation" that does not propagate to
  parent. The only missing case is Job() that should be fixed together
  with introduction of SupervisorJob().
* Note that "scoping" builders don't "cancel the parent", but rethrow
  the corresponding exception instead, so it that is how it gets
  propagated up the stack.
* This makes parallel decomposition exception-safe. You
  cannot loose an exception as along as default (child async)
  behavior is not overridden.

Fixes #552 | 2018-09-27 16:17:16 | 52bfdabfa1476f55c1b3880d43f49977fc8df943

Copy deprecated annotations on Job member to inheritors

* Makes them easier to find for cleanup
* Avoids bug with light classes | 2018-09-28 09:41:58 | ffda1da6aec27b51f0bc8640f0e48c8fcd1e8f59

Restore binary compatibility of Executor.asCoroutineDispatcher

Fixes #629 | 2018-09-27 18:19:38 | 18cc588106ff7f4c680831809e5af8d75063c689

fix broken links for kotlin web site (#628)

* fix broken links for Kotlin web site | 2018-09-27 15:42:04 | cbeef1039d7402939bac8ec4674e1a7b1adf993a

Merge pull request #588 from Kotlin/handle-exception-fix

Handle exceptions fix | 2018-09-25 21:00:29 | 25b4388ef2f94909acac51cf1e0206975cc4b84a

Add name parameter to Handler.asCoroutineDispatcher

Fixes #580 | 2018-09-25 13:40:30 | a180ff75e9f7c97189a2651e96f4212bff0b105e

Fix lost exception during cancellation in produce, fix integration with play services after rebase | 2018-09-25 16:16:02 | 1b22af7e462272cbc33fd019975ee3ec5dbf1b78

Merge branch 'develop' into handle-exception-fix | 2018-09-25 13:10:26 | 1e0a2f0ad358c49d97602ee01ecf76602721fa4f

fix compilation | 2018-09-24 17:29:00 | f30715955637d2006e17fda7f99d002877fedc1c

Docs for context/coroutineContext in AbstractCoroutine are fixed | 2018-09-24 17:29:42 | 2d8cad05755d47af7987f39385527d3bddb15377

Fix exception aggregation to ensure atomic handling of exceptions

* Removed legacy onFinishing handler support from JobSupport.
  - It is no longer needed, because handleJobException covers #208
* Fixed bugs that were masked by cancelling parent from onFinishing.
* Consistent "Finishing" state was introduced in internal machinery:
  - Job enters finishing state when it is failing or it is completing
    and has children
  - Finishing state cleanly aggregates all failures, tracks cancellation
    and completion status
* Job.isFailed is introduced as a consistent way to query the "failing"
  state of the job that was previously only implicitly available via
  invokeOnCompletion handler (cause != null means a failed job) and
  the documentation for both Job & Deferred is updated to reflect that.
* Source-incompatible change: Job.invokeOnCompletion boolean parameter is
  change to onFailing. Such handlers are now invoked as soon as the job
  starts failing and the root cause exception of the failure is consistently
  passed to all the handlers.
* The following internal methods were introduced to facilitate this:
  - Job.failParent(exception) is used by child to signal failure to parent
  - Job.cancelChild(parentJob) is used by parent to cancel child.
* Child never aggregates exception received from it parent, but uses
  it as it root cause if there is no other exception.
* JobSupport.handleJobException() logic for launch/actor is split into:
  - failParent - can be invoked multiple times on race;
  - handleJobException which is invoked exactly once.
* Exception materiazization is much lazier now, which should
  significantly improve performance when cancelling large hierarchies.
* Other minor perf improvements in JobSupport code.

Fixes #585 | 2018-09-14 09:52:50 | ecbc85cbdad134d868698e22c0fdd7220eaced0f

Typo fixed | 2018-09-22 13:28:37 | 63e3896d85f827f2e403ffd25593ac5d9af54715

Fix typo in deprecation message of JavaFx dispatcher | 2018-09-20 17:10:30 | 39a2c559b538b8681c0724d5ec3ee6058af4e1c3

Cosmetic fixes | 2018-09-20 08:25:56 | 2dd53204e7047e970f145281c11a9c834021b3a9

Improve HandlerDispatcherTest, check that jobs are actually executed | 2018-09-19 11:30:51 | 847eba7c935ed784e918d976c9c43464179a2df9

Reknit guide, fixed TOC in Knit with comma & verify mode in example-context-09 | 2018-09-19 11:49:42 | bca98f4e9ea3c485c8691209be32fee487f812fe

CoroutineScheduler: fixed race between createNewWorker & shutdown for tests | 2018-09-14 12:17:12 | 241e74e6a2cdadaa2753f40a326c732e95fac2d0

Fixed sporadic test crashes related to withTimeout and children

- The bug only manifested when withTimeout coroutine had children working
  in a different dispatcher
- A separate stress-test that reproduces this problem with much higher
  probability | 2018-09-16 12:31:13 | fa9586bc283d60427ad3e9162de7962da4b0ec1d

Updated dispatchers references in readmes and docs | 2018-09-11 16:16:49 | f189cec57d7d0751464a5939f1bbcbd32e15d7c0

Dispatchers are renamed and grouped in the Dispatchers object

* Dispatchers.Default — a default dispatcher for background asynchronous tasks
  (currently backed by FJP commonPool, a new dispatcher in the future).
* Dispatchers.IO — a dispatcher for blocking background operations (#79).
* Dispatchers.Main — a dispatcher for Android Main Thread (#533).
* Dispatchers.Swing — a dispatcher for Swing Event Dispatch Thread.
* Dispatchers.JavaFx — a dispatcher for JavaFx Application Thread.
* Old dispatchers are deprecated, CommonPool is deprecated, too.
* awaitPulse() in JavaFx and awaitFrame() in Android are top-level funs.
* Introduced HandlerDispatcher, SwingDispatcher, and JavaFxDispatcher types
  in the corresponding UI modules for type-safety and future extensions

Fixes #41
Fixes #533 | 2018-09-11 15:42:03 | dc29b071d4784e3739f89223ced2333ecd5408ad

Fixed hangs during thread termination in IO dispatcher

Fixes #524
Fixes #525 | 2018-09-11 12:38:14 | 750d468b3281570910d0cd4000d4e29702b25020

Invoke handler using invokeIt to avoid JS bugs | 2018-09-07 11:36:05 | c430e0797e87af77f812bbcfb8751e4a0e31ffc6

AtomicFU 0.11.5 to fix Windows compilation | 2018-09-04 14:58:45 | 61abcd224a13f674bffae096afa7250de262df87

typo fixed | 2018-08-24 12:24:02 | 1a1237083b14d5de8f13f66b7a4ba6d9e26183d7

Introduce IO dispatcher to offload blocking I/O-intensive tasks

Fixes #79 | 2018-08-23 14:27:19 | f5e67ba597acdfb90ef84d29e4d6028f3f17a6ba

Introduce ThreadContextElement API to integrate with thread-local sensitive code

* Debug thread name is redesigned using ThreadContextElement API
  where the name of thread reflects the name of currently coroutine.
* Intrinsics for startCoroutineUndispatched that correspond to
  CoroutineStart.UNDISPATCHED properly update coroutine context.
* New intrinsics named startCoroutineUnintercepted are introduced.
  They do not update thread context.
* withContext logic is fixed properly update context is various situations.
* DebugThreadNameTest is introduced.
* Reporting of unhandled errors in TestBase is improved.
  Its CoroutineExceptionHandler records but does not rethrow exception.
  This makes sure that failed tests actually fail and do not hang in
  recursive attempt to handle unhandled coroutine exception.

Fixes #119 | 2018-07-25 09:22:46 | 7587eba96a230f3f0ab0c04f52723e926f7a845d

AtomicFu version 0.11.3 (bug fix) | 2018-08-23 11:05:46 | be065fd2c566acf4f600de23d45d70cf9f2144bc

Introduce ExecutorCoroutineDispatcher instead of CloseableCoroutineDispatcher

Fixes #385 | 2018-08-15 10:03:23 | b517f0529fe4a2066ca8ac985c08206cd4587758

Add workaround for K/N bug | 2018-08-22 09:37:41 | bbe6d8a915b2be9c0a7ff9d92677c878718fa219

Implement withTimeoutOrNull via withTimeout to avoid timing bugs and races.
Remove deprecated API

Fixes #498 | 2018-08-21 16:45:29 | 988eb26469819f7cc8cb1ba26c3a76a6805e8387

Provide API to create limited view of experimental dispatcher

Fixes #475 | 2018-08-15 09:06:06 | cac1a0f13c5b81cdfa3c2d1020e8d86ac8cd0029

Additional debug output for CoroutineSchedulerStressTest | 2018-08-10 17:38:41 | 21ce9c066c752adf4db1e8388a9d38a390b5f08b

Execute EventLoop#invokeOnTimeout in DefaultDispatcher to allow busy-wait loops

Fixes #479 | 2018-08-08 15:04:59 | e90cdb031ffab87d9f7671cc9e856b2a9534d59e

Scheduler tests fixed:

[temporary] Ignore flaky tests
Fix benchmark compilation
Fix WorkQueueStressTest | 2018-07-26 17:02:03 | 9542f1ce4f84d08ef2b33d14ce3ae79a8a93fa86

Scheduler improvements:

Fix (one more) ABA problem in tryUnpark
Global TaskContext to speedup CPU tasks
Documentation improvements
Stress tests constants tuned to be more robust and faster on local machine (and when ran from IDEA)
Style fixes | 2018-07-26 10:57:04 | e50fb89c4e80d7accb9bdfff3ce54c59d2857c26

Scheduler tests infrastructure

Support "kotlinx.coroutines.scheduler" property to change DefaultDispatcher
Updated scheduler shrink test with custom idleWorkerKeepAliveNs config,
so that they execute faster
Fix submissions from another instance of CoroutineScheduler
Run JDK16 tests and tests under new scheduler tests only during nightly stress test | 2018-07-20 20:57:57 | 5c7454b8a872d925f206f418c16d9880bf23e25f

Removed wrapper from LimitingBlockingDispatcher by introducing TaskContext | 2018-07-23 09:38:06 | 216e4d30a2b225361a4f3e59465c079a0f116379

Fixed ABA problem in parkedWorkersStack and other stress improvements

* Workers are now numbered starting from 1, zero is used as sentinel
* Workers are lazily created (no threads initially)
* Close/shutdown of the scheduler also clears state so that subsequent
  rogue attempt to dispatch anything fails.
* Work stealing is more predictable. It starts at random index but
  then goes linearly via workers array. | 2018-07-20 20:25:58 | db22e4023442341d39d0c3797de73e74efb25882

Scheduler cosmetics

Stealing logic cleaned up a bit (mostly style)
Update worker thread names when worker threads are terminated to maintain
consistency between their index in array and name;
Improved debugging info (toString)
Merged yield and spin counters, parkTimeNs is in Int | 2018-07-19 11:12:31 | bba6e8918e32d521109583a9024b3d5e82da53f5

Improved management of parkedWorkersStack in terms of ABA/concurrency;
Also includes documentation, naming and packaging fixes | 2018-07-18 10:12:31 | 1d3b0191ecbf498965d81257c80ad6f87e583552

Improved tasks dispatching:

Merge blocking and created workers into single state variable
Replace j.u.c. queue of parked workers with intrusive stack to support shrinking and increase performance
Replace j.u.c. global queue with Michael & Scott queue which supports conditional polling
Poll for blocking tasks from global queue when CPU token is not available
Make last ditch effort before thread termination
Idle reset on requestCpuWorker | 2018-05-03 11:52:00 | 18a91347466560b63144d0097f248d9edb029780

Fix ordering bug in QuasarTest | 2018-07-25 16:16:23 | a608a335ff57e969f69985c43ee70c30da1dba8f

Get rid of compiler bugs workarounds | 2018-07-25 13:27:14 | 5f73827f3131332018c02650057eff4aa2886ae7

Channels concurrency improvement:

Make close, cancel, isClosedForSend, isClosedForReceive and offer linearizable with other operations
Fix bug when send operation can be stuck in channel forever
New concurrency tests

Fixes #359 | 2018-07-17 15:39:20 | ea651aa5badbc20f911c844db2a57ea4f68fc38b

Access to PlatformImpl in JavaFx dispatcher, on Java 9 it's an internal module which should be explicitly exported

Fixes #443 | 2018-07-20 12:07:28 | 5557245405f965ec5ca26083301559066a1be147

Minor grammatical changes to the Coroutines guide

Minor fixes for the English grammar in the coroutines guide to help ensure new readers understand coroutines properly. | 2018-07-19 20:01:40 | 977ada1e74e0ae9b011fb219891433a6d36e9ef3

Validate FJP.commonPool parallelism to avoid pathological bugs

Also always construct private FJP pool if
kotlinx.coroutines.default.parallelism is explicitly specified.

Fixes #432, #288 | 2018-07-11 10:36:07 | 1e12210cd2bccdfd866b1c9649cd19e40663fb5f

Change order of handlers in JobSupport and CancellableContinuation
1) Invoke handlers before dispatching in CancellableContinuation to make behaviour timing-independent and Unconfined doesn't produce unexpected results
2) Invoke onCancellation -> handlers -> onCompletion in Job to make behaviour timing-independent

Fixes #415 | 2018-07-03 08:11:21 | b10287ecb35463f471ac120367a0a4f56f6b5c49

Typo fixed | 2018-06-26 11:58:39 | 7981999a156918abced59de696b02d9bc731f808

IO: fix joining and continuous writing byte array interference | 2018-06-13 16:49:45 | 9faa0395afd26a3c29cd67de5dce635a7882cf5c

Update ThreadPoolDispatcher.kt

Fixed typos. | 2018-06-09 17:01:53 | 517a2592077b067032d6c0379226d0467d7662f1

IO: fix continuous writing session interfered with joining | 2018-06-01 14:23:47 | e15eae8e3537080a82078873d762ad9de61f50f4

Typo fix | 2018-06-03 23:34:22 | e185ed6f918a1df082832c9059a091505b9a5cf9

Introduce deprecated ReceiveChannel#use to preserve backward compatibility with SubscriptionReceiveChannel, fix reactive samples | 2018-06-01 12:30:34 | 313978cf6b3901b1d7fbfb5d1f688c068a072c09

LockFreeMPSCQueue optimized & fixed

* no need for REMOVE token to hurry up GC
* Placeholder logic is fixed to avoid potential data loss on wraparound
* Stress test for resize/copy added | 2018-05-30 18:58:02 | c22a1c748e93db6e7d4e73f9118e8435edbeb698

Leaking handles in awaitAll are fixed | 2018-04-28 16:22:29 | e0b6db04b3bd86e942bc7e40081a82aedd8fd200

Delay bug fixes:
Invoke clearTimeout on cancellation in JSDispatcher
Remove delayed task on cancellation from ThreadSafeHeap on cancellation to avoid memory leak | 2018-04-26 13:03:40 | cd00643b92c9698ca728f92a66f52b30b3811d05

Documentation for debug property values | 2018-04-11 19:21:23 | 590c8889c2bb5341f15ee20e440c5599342fe34b

typo fixed | 2018-04-04 06:59:33 | 905a512625ad96dcd45c789f983babd93dfde011

Add extension to ExecutorService to return closeable CoroutineDispatcher

Fixes #278 | 2018-03-20 19:28:52 | 26f4b9ecd1bdd03299b668541f7c7c9ecaf9ab7c

Debug toString for channels

Fixes #185 | 2018-03-06 10:37:42 | e4b6f09af7c0d0b6963fa8611e867ff3292fad0e

rx-example: Added application plugin & fixed to use runBlocking | 2018-03-05 14:58:59 | 00560e8b0add1628bd0a32202b6f3cc301b35af3

Use NodeDispatcher on ReactNative

Fixes #236 | 2018-03-05 09:01:07 | ecc68f13141d1353aa2bb1d027a077e0fd7be4fb

Check for undefined `window.addEventListener` when choosing default coroutine dispatcher.

Fixes #230 | 2018-02-10 19:35:58 | 54d57e0c1fff22fe1d72c762f2bdbf01995395ca

Update README.md

Minor typo and typography fixes. | 2018-02-04 00:30:58 | 7dd6b66eced47e4ddf0b2c76c974ac19612b827c

IO: fix error propagation in blocking adapter | 2018-02-02 14:18:47 | f0c1d99e2c5c5978da7ace9d58c61a5648ed7687

Update coroutines-guide.md

This tutorial suggests just Async suffix:
https://github.com/Kotlin/kotlin-coroutines/blob/master/kotlin-coroutines-informal.md#asynchronous-programming-styles
Also, there was "of" instead of "or" | 2018-01-29 17:39:02 | 7e94e70734f6e01b0522d11071e6825879a221e7

runBlocking is improved to properly support specified dispatchers,
so that `runBlocking(UI) { ... }` can be used outside of UI thread.

Fixes #209 | 2018-01-29 15:07:21 | cb78787638039096804bc1b97031bcb9801c0547

Workarounds for KT-21968 to fix JS tests | 2018-01-24 20:31:22 | dfeba242b9e328f7528507f9349623671a00333c

IO: fix joining sequence, avoid infinite joinTo suspension | 2018-01-23 20:16:54 | d1842c6301d8debca8509809d473ce7e889b1d7b

IO: make reusable cancellable continuation implement DispatchedTask | 2018-01-12 15:46:22 | 4d01f7ec3b33f7633f3737a5ab3a3fc90703f57f

JS: Introduce Window.asCoroutineDispatcher and use custom queue in
Window.awaitAnimationFrame to align all animations | 2018-01-13 08:20:32 | 1867f6de0fb39077d0cb13fdc0400dd4568f717b

Actually fixed startup/shutdown of DefaultExecutor for tests to prevent
thread leak. Includes test-case. | 2018-01-12 15:28:24 | 9483301695f4c0784d663238ecd0ef04bbfcbea3

MPP: Debug toString should not depend on kotlin-reflect | 2018-01-11 16:04:12 | b79277b4fab5353680445f36dd9b19a740828203

IO: Use TestBase in all tests and fix leaking threads in tests | 2018-01-11 10:48:19 | c45f5fa3b636d66b824351c8d8d9368b8ee4e37f

MPP: Ported DispatchedTask perf improvements to JS and more code is made common | 2018-01-11 09:39:36 | f29203c158a526f90ae8574abfc1ba6dd5249262

Performance: Remove DispatchTask, store value in DispatchedContinuation | 2018-01-10 13:25:25 | f2239e191f55883486d5ce04ffb0c6f75cdc3468

Update coroutines-guide.md

Correct `Dispatcher` spelling | 2018-01-08 13:56:54 | fa13beba79e6ebb68588ba2167b67a77196907d3

Optimize creation of DispatchTask for cancellable continuations (fixed) | 2017-12-28 09:21:14 | bdf23f28c425ea391baa7ddbc3ba012d15e6dfa5

Optimize creation of DispatchTask for cancellable continuations | 2017-12-27 22:09:43 | ac48070de5e20b727b6d9ffd5cc7c259426fb6fb

MPP: DefaultDispatcher internal impl class renamed to JSDispatcher | 2017-12-27 10:14:54 | a919827885289271a6c598ab47fdf4434a8e0da3

fix typos | 2017-12-24 19:55:06 | d2d42ea802b54d2ede23f3edf3c18521ae46a3e9

IO: fix accidentally used tryResumeWithException | 2017-12-06 14:09:01 | 9ef4e0c05168acdb2c955079e2ee857cfec9de06

IO: fix spuriously hanging pipe tests | 2017-12-05 12:41:42 | 4adac45480b33664d79b24f7a779e7d4c1da68b1

IO: fix joining with different write byte orders | 2017-12-05 09:35:56 | 8af8937a34e893661dfe15f9be598eac50b101df

IO: fix infinite writeSuspend loop caused by auto-resuming flush | 2017-12-05 09:27:09 | e6764086ef4a03ec610245740b379f5da617224c

Bug fix: start hangs on lazy coroutine with attached invokeOnCompletion | 2017-11-30 13:41:47 | 5610e1df2eb3f67be8b45633b5d6ffbf73ec6bb8

Add DefaultDispatcher on some reactive operators | 2017-11-29 21:12:35 | e19ee04ca72316f9d67a58d35b8be398b059f1f5

IO: fix too expensive joinTo fast-path | 2017-11-23 09:39:27 | 060f36a06d341f43c0f9e77fd6706bf71f94972c

IO: fix typo in test name | 2017-11-20 08:43:26 | 9a6ca1a006debfa08392027508d03a141ae53841

Introduced ReceiveChannel.cancel method;
all operators on ReceiveChannel fully consume the original channel
using a helper consume extension, which is reflected in docs;
removed `suspend` modifier from intermediate channel operators;
consistently renamed channel type param to <E>;
added two versions for xxxTo fun -- with MutableList & SendChannel;
added tests for all channel operators;
dropped/deprecated ActorJob/ProducerJob, fixes #127 | 2017-08-17 18:01:33 | b555d91193d9e76710062451cf94a94d14820e98

IO: fix race in closeWaitJob of JoiningState | 2017-11-17 16:30:22 | 47d92bafe90d899dfb53cd0f8bf7eae75504047e

IO: fix accidentally missed it | 2017-11-17 16:29:49 | d42bdadc8520ec490d5b37f5f160b54d4541d2f8

IO: fix race in ByteBufferChannel.write(lambda) | 2017-11-17 15:39:03 | 7bf4fa9e3b19a8200450fabe396a0ff854615596

IO: fix joining of already closed but not empty channel | 2017-11-14 11:52:32 | 9e9929d376d2b92cd5fda2f21f7cc1eb51f66ca8

IO: fix lincheck dependency | 2017-11-10 20:22:53 | b94ce42827dc5f9294f19b99da356ad585fb01ea

IO: fixed awaitClose and copyDirect | 2017-11-10 09:22:23 | 373d590e103f3203f61b2fb93b3b82bcce1de13e

IO: fix race in joined flush once again | 2017-11-09 18:18:05 | 8e9138ca4a297189f49bece8e739b6584f69e061

IO: fix joined close/flush | 2017-11-08 13:50:13 | 2fdb5aa4867b60f7c659cf4d950babfd2a43a67a

IO: fixed joined channel flush | 2017-11-08 03:15:39 | 625c1fefa57f95af2b723b7c7e3b1a5319c69faf

IO: fixed joined ByteChannel close | 2017-11-08 03:11:53 | ca8762b2f6a1043103a45153357a5f9e5dc010af

IO: fix writeByte BufferOverflowException

it is important to setup buffer's positions again after suspension
it is not the case if we don't hold writing state during suspension | 2017-11-07 16:42:15 | bab9f7927ca780b242c794578c02ddf63db40375

IO: fix race in readSuspend

consider state change:
writer: IDLE(empty) -> !do write -> IDLE(buffer) -> !close -> closed = C
reader:  !suspend -> resumed -> closed = C -> [here]

here reader can see that there is closed state however to see published
written state it should read state again rather than simply use already
readen state to get happens-before guarantee | 2017-11-07 16:18:16 | 32c90b169d05bd372317f90ae5ad511bbcb05bc5

IO: rewrite if/else/return code to identical

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 11:23:34 | fde1a646fe5a60c8aa211764d63527ec429672c3

IO: eliminate tail suspend calls in when blocks

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 10:54:47 | 4eccfba8d4cbe55ce49ac7b70c40eea1d0adf7c9

No Job in newSingleThreadContext and newFixedThreadPoolContext anymore

* This resolves the common issue of using `run(ctx)` where ctx comes from
either `newSingleThreadContext` or `newFixedThreadPoolContext`
invocation. They both used to return a combination of dispatcher + job,
and this job was overriding the parent job, thus preventing propagation
of cancellation. Not anymore.
* ThreadPoolDispatcher class is now public and is the result type for
both functions. It has the `close` method to release the thread pool.

Fixes #149
Fixes #151 | 2017-10-20 09:36:56 | d9ae2bcb88403e0854b895ba46c2417b4c0a4752

run uses cancelling state & propagates exceptions when cancelled

* When coroutine that was switched into a different dispatcher using
`run` is cancelled, the run invocation does not complete immediately,
but waits until the body completes.
* If the body completes with exception, then this exception is
propagated.

Fixes #147 | 2017-10-20 08:42:06 | bcdd8e17fed40097f9bb8fdb3e218f95ff8603a9

Exception propagation logic from cancelled coroutines is adjusted

* When cancelled coroutine crashes due to some other exception, this
other exception becomes the cancellation reason of the coroutine, while
the original cancellation reason is suppressed.
* UnexpectedCoroutineException is no longer used to report those cases
as is removed.
* This fixes a race between crash of CPU-consuming coroutine and
cancellation which resulted in an unhandled exception and lead to
crashes on Android.

Fixes #152 | 2017-10-20 06:00:50 | 6aed878a67e6f707e6c3afb0879beb8822a95d6f

Fixed Reactor docs (Scheduler.asCoroutineDispatcher) | 2017-10-07 19:58:40 | 8348b8c31d5b07541bd3d268ca2a186b0fe1ad6f

Failed parent Job cancels all children jobs, then waits them

Also improved debug output a little bit | 2017-10-07 12:44:48 | a36ab94253bb9945c6377eb43db0cb1071019c40

IO: eliminate race in close

I knew that I'll hit this bug anyway. Here we MUST flush twice as
flush at read suspend is not enough. If a writer closes then the first
flush does flush and it closes so all readers will see all pending data.
If a foreign thread does close then the first flush is makes no
difference however the second is required for proper cleanup and
to do tryTerminate | 2017-10-04 18:34:18 | ad68c06c1200f2038c26adeab2abf801a2a2114b

IO: fix verifying pool usage

buffer view doesn't hold original pool reference to make
pool chaining working | 2017-09-29 15:18:00 | ccf8dde980a4701b9cd30e1df23e5cbefdd93b53

IO: fix writing byte packet | 2017-09-28 07:58:15 | 754a19b188dc6d486d73b8e3a2f0c483c3f88f9b

Documentation for DefaultDispatcher in the guide | 2017-09-29 18:39:03 | 66f018c489c6b0ec0831fa9953db34da3edff5f3

DefaultDispatcher is introduced | 2017-09-28 11:27:05 | c0d559b594fce802f1d1be9a6feef49019d17160

IO: fix ByteWritePacket.writePacket size update | 2017-09-17 19:48:26 | 5ca0d12c1e8a9672d40fe83cd31d1b2426f397e7

IO: fix writer scope type | 2017-09-11 10:06:54 | ea3a418f84f3731e92658cedfa11878a8828500c

IO: fix byte channel readX operations return -1 during close+flush

Read operation should try flush before return -1 if closed because
the close operation setting close status first then do flush
so reader could see closed status but not-yet-flushed byte counters | 2017-09-11 07:31:08 | e4d3ce750ed8b864a435fb0926d0d77e9c02b208

IO: add more byte packet tests and fix few bugs | 2017-09-06 18:50:51 | 5feaf6973c23fae3c5a8df64748e2181c50dd0d6

IO: fix delimiter lookahead | 2017-09-06 15:52:04 | 1cc86083e7be17ce53f7c80cfa6ba67e8569e33e

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 99cdb380bf6391db7e7d08e8673c627c554074d8

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 776b370d58883e9bce0c309ebb4919ef4cdac13c

IO: fix byte packet write buffer leak | 2017-08-25 08:39:00 | 974cbb3b21b8d7613c41ee2221ce435e347b068f

IO: fix byte channel close with error buffer leak | 2017-08-25 08:06:59 | 24b040f1345db27b45589a975daab45bf9325494

IO: fix CR-only line endings processing + tests | 2017-08-23 11:39:41 | a9a936d1a325ee0baf36df444414e1e17ac539da

IO: rename writeStringUtf8, fix implementation + tests | 2017-08-23 09:26:18 | fbcba264a37580b5c47f3314395e5146afb38287

IO: fix copyAndClose + tests | 2017-08-23 09:11:55 | fc84a634ff9a1acca04e09fa5a031b904c5c8838

IO: byte packet readLine support + bugfixes | 2017-07-26 09:59:16 | 0b12ffc0178844e813223039adf5d7510703485d

Fixed bug in LockFreeLinkedList (invariant & lock-freedom violation)
Migrated atomic ops to AtomicFU library for ease of code maintenance
Implement lock-freedom testing in LockFreeLinkedListAtomicStressLFTest | 2017-08-10 18:09:26 | 7eb41efbacd498704f25465e2a58f4892c16aa32

Typo fixed | 2017-07-24 13:42:34 | a448903dcac25e450d87c49705e7a6693a300d29

Use CompletableDeferred in the guide section on coroutines;
fix (reknit) broken links to factory functions that are now top-level | 2017-07-21 22:00:30 | 256812a1c09511744575ed3d2c64fec27979f391

More documentation on CompletableDeferred states and style fixes | 2017-07-21 15:04:23 | 8e2ae9964614e35295a8d695114b00c35f5fc755

Better debug strings for continuations | 2017-07-12 12:22:21 | 69d9c852289f1a4a9ffe107dc75cc71871cfe34e

ObservableBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 10:16:30 | ed6985459318209be084ff807676cb722387fb6f

PublisherBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 09:58:44 | 58246ca7e7727632ba50c41d0314df47ba9e3fc0

Fixed IllegalStateException in select that concurrently selects, which
was due a problem with Job concurrent cancel and dispose of handle.
The bug was introduced by addition of Cancelling state for a Job.

Original stack trace in select was:
java.lang.IllegalStateException: Check failed.
	at kotlinx.coroutines.experimental.internal.LockFreeLinkedListNode.remove(LockFreeLinkedList.kt:236)
	at kotlinx.coroutines.experimental.JobSupport.removeNode$kotlinx_coroutines_core(Job.kt:734)
	at kotlinx.coroutines.experimental.JobNode.dispose(Job.kt:995)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.initCancellability(Select.kt:294)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.getResult(Select.kt:273) | 2017-07-11 09:50:00 | e9f64491787433b3d53ad5800456524820058d5f

typo fixed | 2017-07-10 10:46:13 | d28cc872fb7815b51ceb7c84a4e77117fce380c7

typo fixed | 2017-07-10 10:44:07 | 8b0b07ab81f12bc605462a6a1333b61abce547cb

typo fixed | 2017-07-10 10:43:20 | 93f7e8e22019643caaf14ae480c05ab0a349064d

Bug fixed on waitTimeoutOrNull (was flaky testOuterTimeoutTest) | 2017-07-10 10:38:54 | 769d48217f8787c7f64c07da6e53c27b2d703274

Refactor DispatchTask to reuse it for dispatchYield | 2017-07-10 10:16:20 | 2a93646a8054ce7819e9bdbff8d28849a19e874b

Fix SecurityException when trying to read "kotlinx.coroutines.debug" prop | 2017-07-10 07:15:40 | e824eaaab9d053ff0f2cc028c7413bb83adcacc0

A fix & optimization for select impl helping scheme | 2017-07-05 06:53:29 | 907074f1f63871ed29feab3173a2e38b30d8fbb6

Reactive tests fixed for cancellation logic change | 2017-06-26 11:25:56 | 7a7b00938934ef7d0855eb24ec93a06d0b0c97e7

Fix typo: debugging more -> debugging mode | 2017-06-24 21:03:35 | ed5ed49913498b4e880415d2f0fb9004e20e1b5a

Typo fixed | 2017-06-23 10:27:02 | 6c18dfd15f6e1703db57531422bc0df3cb7d08ff

fix typo.

somethine -> something | 2017-06-18 07:37:59 | 81a6f23ca68d7ed37f36dcb966fe74e3bc53de57

Typo fixed | 2017-06-09 17:25:03 | c3c2f3269220f5d7ae20e7592ca1253061b50a95

CoroutineExceptionHandlerTest fixed | 2017-06-09 15:59:25 | 866521b83ed0676d0203dec35de5fb797bc9a59d

SimpleSendReceiveTest is fixed to account for close conflation | 2017-06-06 11:36:38 | 9ff32644381bf1a692d9a935170a9f7b7023f244

Fixed lock-freedom of send/offer on closed channels and related bugs.
Conflated[Broadcast]Channel hang of concurrent offer/close is fixed. | 2017-06-05 14:04:39 | e6e8ce8d46cee273e00ee130334239880734dc2f

Integration readme title fixed | 2017-05-17 11:59:49 | 0c2e25d7c38f50bd3c9866ea1fc2c12d5d74251a

launched jobs and await can be cancelled while waiting in dispatch queue

* suspendAtomicCancellableCoroutine function is introduced for funs like
  send/receive/receiveOrNull that require atomic cancellation
  (they cannot be cancelled after decision was made)
* Coroutines started with default mode (CoroutineStart.ATOMIC) using
  async/launch/actor builders can be cancelled before execution starts.
* CoroutineStart.ATOMIC is introduced as a start mode to specify that
  coroutine cannot be cancelled before its execution start. | 2017-05-11 17:15:18 | a74eb5f8b08e84f904e75aa71da4547c9178da8d

Fix withTimeout/OrNull bug with spurious concurrency on cancellation | 2017-04-20 16:23:18 | ca9d5be31a30c5f6a20875438f9ae40db4183f4c

Refactored ThreadPoolDispatcher to reuse code of ExecutorCoroutineDispatcher | 2017-04-18 12:28:35 | f04f51d5b05a0aec7c97acc202d180096a095fbf

equals/hashCode for wrapper CoroutineDispatcher impls | 2017-04-11 10:50:03 | 30dd5c129c493ca7b1a3b2b80437e8a7ec68f3ec

Starting coroutine in UI event handlers without dispatch in UI guide | 2017-04-07 15:06:22 | f724f6e2fe7c20cb48b69cd7b19b2658313231e4

Nicer toString implementations for CommonPool & Unconfined dispatchers | 2017-04-07 07:35:28 | dc9fd1c2d18da2f23d9907148b4674cda6418e49

Few minor docs & build fixes for reactor support | 2017-04-06 19:15:35 | 523516abd2023f8d968d389b32dee713130a9f83

Merge pull request #53 from mkobit/patch-1

Correct typo in coroutines-guide-reactive.md | 2017-04-05 09:41:56 | 7676e2239947273c6cbb4cb77536042bd9f2ce43

Fix repository urls

need to be reverted once bintray will fix jcenter sync issue | 2017-03-23 14:45:39 | 78fd3cb8932410af9beab4effc04bdeea4343732

Merge pull request #42 from jakiejj/master

fix typos in comments to Nio functions | 2017-03-20 07:16:24 | 9ef792fec6775bb5cdb08c84511488f324db3322

fix typos in comments | 2017-03-17 20:48:39 | 4d927c76488b96abaae7ba003f8064ad84b8334e

Typo fixed | 2017-03-14 17:39:50 | 81a5b7144484dcc8ebc89cd98fd9bd8a2d45afbe

startUndispatchedCoroutine is renamed to startCoroutineUndispatched for consistency with coroutine intrinsics | 2017-03-14 16:39:26 | 4638d79097a3d5b0c1b32c1e468ad723cc4b2bd9

Fixed bug with sometimes missing `onComplete` in `publish`, `rxObservable`, and `rxFlowable` builders | 2017-03-13 09:03:35 | d14a3901f365f622d9a7ba96fc00900011c9c009

Scheduler.asCoroutineDispatcher extension for Rx 2.x | 2017-03-10 12:06:01 | a1fe3da17907024afa50a35cbfcc72639d62bf78

not -> no typo fixed | 2017-03-09 09:57:57 | 228d084bfb87f967e216b84029b58649fcbe7472

Executor.toCoroutineDispatcher is renamed to asCoroutineDispatcher | 2017-03-09 09:03:39 | 38b5ea18e36f1a53d4cde27bf3fd21522727cbbb

Fixed dispatching logic of `withTimeout` (removed extra dispatch) | 2017-03-02 21:15:21 | 43d831f61f33262dcb4621069451d1699898d1cb

More links and typos fixed | 2017-03-01 14:21:48 | cc63363ead9d82f4e246a319ca3e0cb9f15e3a14

top-level readme links fixed to produce & co | 2017-02-22 12:04:28 | 40e89f689f89ae643f68c68efc57aebd8f8284ed

Jon.onJoin select clause is implemented, lazy onAwait/onJoin & dispatch fixed | 2017-02-22 11:56:58 | d84dbc2d75927fe8446098a225a3fbb884683bde

startUndispatchedCoroutine utility functions | 2017-02-22 06:53:49 | ee88fbef2d78e4b25f741efffabf4756bff8e7f3

buildChannel deprecation template fixed | 2017-02-20 12:53:30 | de8b9e9b336491ff0dbf107fe35d9efa030d92d3

Merge pull request #31 from gildor/on-completion-deprecation-fix

Job.onCompletion deprecation template fixed | 2017-02-20 12:49:41 | 85923e2de75ed522903cc3d64aef2ad178c1cbf8

Job.onCompletion deprecation template fixed | 2017-02-19 13:26:29 | c8f9ca308abe963cafa5f676410402fc287cfa5a

Delay implementation in Swing, JavaFx, and scheduled executors is fixed to avoid an extra dispatch
CancellableContinuation.resumeUndispatched is introduced to make this efficient implementation possible
Additional documentation for CoroutineDispatcher implementors | 2017-02-10 10:30:38 | a198bad7365a508baf1041993e9a14007f9d5aa3

Doc fixed | 2017-02-10 10:14:35 | 8c8551e7dbea7c2467060c2d3c6aa1c54c721e68

Merge pull request #29 from cbeust/patch-1

Update coroutines-guide.md | 2017-02-07 17:52:01 | 4d821e3901d038f005850b38d1e4954506306383

Merge pull request #28 from erokhins/patch-1

Update 1.1.0-beta-37 to 1.1.0-beta-38 | 2017-02-02 19:24:36 | 40f69cf704e7b31cec9c8a935317d8c173e79623

Added deprecated (with error level) plus operators on Job and CoroutineDispatcher to catch potential problem with their incorrect use at compile time | 2017-02-01 15:43:32 | 79a2868295127b81056f66d644da72db5a40d772

Merge pull request #27 from tairrzayev/readme-fix

Fixes the typo in the coroutines-guide.md | 2017-02-02 06:15:26 | 9d844fa1733f83e5e1b85c3e762a69729d3c5ef2

Dispatchers default behaviour is changed to schedule new coroutine for execution later.
Job.getInactiveCancellationException is introduced.
yield is cancellable while it is waiting to executed.
core tutorial is expanded. | 2017-01-29 18:58:33 | 7cf452eab59cdca570227f071cba2da374f77110

Finer grained control on debugging facilities | 2017-01-24 07:29:53 | aecb9aa1606b79243c8e93221de9713c164ce015

Added context parameter to CoroutineDispatcher methods, implemented Executor.toCoroutineDispatcher | 2017-01-23 13:47:20 | 67891d867da022d608d4589859002f256d9a313e

Fixed initialization of Job with parent (initParentJob), fixed handling on uncaught exceptions in standalone coroutines | 2017-01-20 09:19:52 | 58a7add417403811e822a4f6f7689ae3fd0e2018

Minor: fix version of maven-deploy-plugin, fix pom warnings | 2016-12-21 17:21:30 | c4ad15fc6246b7496d610da7419441020dfe1c56

Merge pull request #6 from hhariri/patch-1

Fixed packaged names | 2016-07-27 07:04:12 | c6993089412fbc491ddeb0a71b57e67bf31e21d6

Fixed packaged names 

On the repo, the package names don't have the suffix -1. | 2016-07-27 06:03:41 | 1abe89716c093c9e010a45a5235da7f9b50eea17

Fixed style issue in ChannelIterator

* More idiomatic Kotlin code
* Star imports (also fixes KDoc references)
* Unnecessarily LowPriorityInOverloadResolution removed
* Explicit public visibility in interface | 2018-10-17 11:42:28 | 21a300722acc25d013736e23913211f6ef3129c6

Review fixes:
 * Make all public members `public` explicitly
 * Do not break binary compatibility | 2018-10-16 10:07:17 | 0588e7179536a937386febb9d945d07e869ab2e1

Make ReceiveChannel<E>.iterator() extension function and simplify the implementation.

This new implementation is a bit less efficient, what can be fixed after a function like "receiveOrClosed" is introduced. | 2018-10-15 23:21:18 | 96dd9b1da209c0ca8a4204b517fd7a5c1a41b06d

Dokka fixes

  * Provide module with Kotlin 1.3 API because Kotlin 1.2 from Dokka can't read classes marked as "from the future"
  * Add runConfiguration dokkaStubs which is included only during dokka task with some classpath magic for Kotlin 1.3
  * Add package.list for slf4j
  * Fix unresolved types/links in documentation
  * Suppress all internal/inherited API | 2018-10-13 12:40:32 | 706e39363b586127b29e28fd97d476129c22fe93

Make EventLoop internal, @JvmName("from") for ExecutorService.asCoroutineDispatcher | 2018-10-11 16:09:44 | b6eca2a62158b2dc8d9b41d86040924095dca662

Use toString implementation for continuations to leverage debug metadata

Fixes #679 | 2018-10-10 11:46:53 | 4220ca2106bea653f2831f19c2c93752ea0e468a

Cleanup: get rid of workarounds, cleanup guide, suppress/fix compilation warnings | 2018-10-10 08:56:41 | 1bdbb3ef364006515157b5884dc663d9c3172c6c

Experimental annotation revisit:

  * Mark our API annotation as experimental with corresponding warning or error
  * Get rid of workaround for new inference bug
  * Migrate to compiler arguments instead of annotations | 2018-10-09 16:06:29 | e6e82391c33716033996ef6718756feab641816c

Migrate to Kotlin 1.3 coroutines, drop experimental from package

* Features based on version 0.30.0
* Uses Kotlin version 1.3.0-rc-57
* Uses Kotlin/Native version 0.9.2
* Uses AtomicFu 0.11.9-eap13
* Replace SuccessOrFailure with Result
* Replace buildSequence and buildIterator with sequence and iterator
* Apply @BuilderInference on all builders (including extension methods to workaround inference bug) | 2018-07-13 07:33:25 | 0950dfa1fe114e3682a546e3e53ef34dec9dfd4a

Fix lost exception from dispatched withContext on cancelled job

Fixes #675 | 2018-10-08 13:13:01 | 0f94304c6ae46c8f0cec24dde29d2e7af9ae7e97

Mark newSingle/FixedThreadPoolContext as obsolete, document the reason

* The will be replaced by another mechanism in the future.
  See #261 for details.
* The proposed replacement is to use the standard java API:
  Executors.newSingleThreadExecutor/newFixedThreadPool
  and convert to dispatcher via asCoroutineDispatcher() extension. | 2018-10-06 13:36:13 | f5126d0a9263f0b73a57d17031c340f78e3a25bd

Lazily load Dispatchers.Main and provide a stub impl on failure

Also specified explicit public visibility for Dispatchers object.

Fixes #658
Fixes #665 | 2018-10-06 14:09:05 | 0ece3885d445b60d254dc0fb21c7c05c7ebfb1bf

fix grammar typo

removed repeated 'for' | 2018-10-05 13:16:33 | e7a0723e930d52c4cb4665c5a3918f883287c039

Short Dispatchers.Default.toString value ("DefaultDispatcher") | 2018-10-02 09:59:11 | ec8cbd252d20adcdc91149ae9129149b252d945c

Move UI dispatcher to common Dispatchers.Main (#641)

* Main thread dispatchers are grouped under Dispatchers object and are discoverable via ServiceLoader

  * Dispatchers.Main can be consistently used and easily discovered, its implementation is discovered with ServiceLoader
  * It allows us to add iOS Dispatchers.Main implementation in the future thus opening the door for multiplatform UI-dispatched code
  * Workaround for #626, now Android users can start migration to RC coroutines

Fixed #626 | 2018-10-01 16:01:16 | cfe699fb59d799ab22da23aae983cc34b1164f29

Never loose coroutines when CoroutineScheduler is closed

* CoroutineScheduler close/shutdown sequence now guaranteed that a
  submitted task is either executed by the scheduler that is being
  concurrently shutdown or RejectedExecutionException is thrown.
* RejectedExecutionException is caught by the coroutine dispatcher
  implementation and coroutines are rescheduled into DefaultExecutor
  if a (custom) instance  of CoroutineScheduler is being shutdown.
* Added stress test for coroutine scheduler closing. | 2018-10-01 07:52:56 | 4b0f4dec24b93db4e0e0abbfe59b115e886a30c1

Coroutine scheduler is used by default instead of deprecated CommonPool

* Documentation and guide are updated correspondingly
* "DefaultDispatcher" is used as a public name of the default impl
* Implementation is integrated with virtual time-source
* Shutdown sequence is reimplemented in a safe way for tests,
  makes "close" safe to use on custom instances.
* "close" on DefaultDispatcher throws exception just in case
* -Dkotlinx.coroutines.scheduler=off can be used to switch back to
  CommonPool

Fixes #198 | 2018-09-28 09:20:49 | 303708b27f8d997ae482e3106679a7d170bc16d7

Exception unwrapping logic rework, do not unwrap cancellation exception if parent can handle exceptions

It allows to properly handle only relevant exceptions by child without reporting the same exception multiple times, fixes suppressions hierarchy and allows to implement supervisorScope properly | 2018-09-28 09:29:21 | 88e72f9973810119f105f78768b59e19f6a49c26

Introduce SupervisorJob & supervisorScope

This change also fixes propagation of cancellation for Job() constructor.
When both Job() and SupervisorJob() are cancelled with exception (fail),
they cancel their parent, too. So we have similar behavior between:
* Job() and coroutineScope { ... }
* SupervisorJob() and supervisorScope { ... }

Fixes #576 | 2018-09-23 16:16:04 | 21f171c8cb09831e25acdeab5c667cf3c15a9692

Avoid OOM in thread-pool dispatchers, try to reflectively invoke setRemoveFutureOnCancel on executor instance and use default dispatcher if attempt failed

Fixes #571 | 2018-09-25 12:45:53 | e29f49799d118b5c3feb38886af3030d027e7b60

async and async-like builders cancel parent on failure

* Affects async, CompletableDeferred, and all Rx integration builders.
* This makes all coroutine builders totally consistent. They all
  cancel parent on failure, but they all consider "CancellationException"
  to be the case of "normal cancellation" that does not propagate to
  parent. The only missing case is Job() that should be fixed together
  with introduction of SupervisorJob().
* Note that "scoping" builders don't "cancel the parent", but rethrow
  the corresponding exception instead, so it that is how it gets
  propagated up the stack.
* This makes parallel decomposition exception-safe. You
  cannot loose an exception as along as default (child async)
  behavior is not overridden.

Fixes #552 | 2018-09-27 16:17:16 | 52bfdabfa1476f55c1b3880d43f49977fc8df943

Copy deprecated annotations on Job member to inheritors

* Makes them easier to find for cleanup
* Avoids bug with light classes | 2018-09-28 09:41:58 | ffda1da6aec27b51f0bc8640f0e48c8fcd1e8f59

Restore binary compatibility of Executor.asCoroutineDispatcher

Fixes #629 | 2018-09-27 18:19:38 | 18cc588106ff7f4c680831809e5af8d75063c689

fix broken links for kotlin web site (#628)

* fix broken links for Kotlin web site | 2018-09-27 15:42:04 | cbeef1039d7402939bac8ec4674e1a7b1adf993a

Merge pull request #588 from Kotlin/handle-exception-fix

Handle exceptions fix | 2018-09-25 21:00:29 | 25b4388ef2f94909acac51cf1e0206975cc4b84a

Add name parameter to Handler.asCoroutineDispatcher

Fixes #580 | 2018-09-25 13:40:30 | a180ff75e9f7c97189a2651e96f4212bff0b105e

Fix lost exception during cancellation in produce, fix integration with play services after rebase | 2018-09-25 16:16:02 | 1b22af7e462272cbc33fd019975ee3ec5dbf1b78

Merge branch 'develop' into handle-exception-fix | 2018-09-25 13:10:26 | 1e0a2f0ad358c49d97602ee01ecf76602721fa4f

fix compilation | 2018-09-24 17:29:00 | f30715955637d2006e17fda7f99d002877fedc1c

Docs for context/coroutineContext in AbstractCoroutine are fixed | 2018-09-24 17:29:42 | 2d8cad05755d47af7987f39385527d3bddb15377

Fix exception aggregation to ensure atomic handling of exceptions

* Removed legacy onFinishing handler support from JobSupport.
  - It is no longer needed, because handleJobException covers #208
* Fixed bugs that were masked by cancelling parent from onFinishing.
* Consistent "Finishing" state was introduced in internal machinery:
  - Job enters finishing state when it is failing or it is completing
    and has children
  - Finishing state cleanly aggregates all failures, tracks cancellation
    and completion status
* Job.isFailed is introduced as a consistent way to query the "failing"
  state of the job that was previously only implicitly available via
  invokeOnCompletion handler (cause != null means a failed job) and
  the documentation for both Job & Deferred is updated to reflect that.
* Source-incompatible change: Job.invokeOnCompletion boolean parameter is
  change to onFailing. Such handlers are now invoked as soon as the job
  starts failing and the root cause exception of the failure is consistently
  passed to all the handlers.
* The following internal methods were introduced to facilitate this:
  - Job.failParent(exception) is used by child to signal failure to parent
  - Job.cancelChild(parentJob) is used by parent to cancel child.
* Child never aggregates exception received from it parent, but uses
  it as it root cause if there is no other exception.
* JobSupport.handleJobException() logic for launch/actor is split into:
  - failParent - can be invoked multiple times on race;
  - handleJobException which is invoked exactly once.
* Exception materiazization is much lazier now, which should
  significantly improve performance when cancelling large hierarchies.
* Other minor perf improvements in JobSupport code.

Fixes #585 | 2018-09-14 09:52:50 | ecbc85cbdad134d868698e22c0fdd7220eaced0f

Typo fixed | 2018-09-22 13:28:37 | 63e3896d85f827f2e403ffd25593ac5d9af54715

Fix typo in deprecation message of JavaFx dispatcher | 2018-09-20 17:10:30 | 39a2c559b538b8681c0724d5ec3ee6058af4e1c3

Cosmetic fixes | 2018-09-20 08:25:56 | 2dd53204e7047e970f145281c11a9c834021b3a9

Improve HandlerDispatcherTest, check that jobs are actually executed | 2018-09-19 11:30:51 | 847eba7c935ed784e918d976c9c43464179a2df9

Reknit guide, fixed TOC in Knit with comma & verify mode in example-context-09 | 2018-09-19 11:49:42 | bca98f4e9ea3c485c8691209be32fee487f812fe

CoroutineScheduler: fixed race between createNewWorker & shutdown for tests | 2018-09-14 12:17:12 | 241e74e6a2cdadaa2753f40a326c732e95fac2d0

Fixed sporadic test crashes related to withTimeout and children

- The bug only manifested when withTimeout coroutine had children working
  in a different dispatcher
- A separate stress-test that reproduces this problem with much higher
  probability | 2018-09-16 12:31:13 | fa9586bc283d60427ad3e9162de7962da4b0ec1d

Updated dispatchers references in readmes and docs | 2018-09-11 16:16:49 | f189cec57d7d0751464a5939f1bbcbd32e15d7c0

Dispatchers are renamed and grouped in the Dispatchers object

* Dispatchers.Default — a default dispatcher for background asynchronous tasks
  (currently backed by FJP commonPool, a new dispatcher in the future).
* Dispatchers.IO — a dispatcher for blocking background operations (#79).
* Dispatchers.Main — a dispatcher for Android Main Thread (#533).
* Dispatchers.Swing — a dispatcher for Swing Event Dispatch Thread.
* Dispatchers.JavaFx — a dispatcher for JavaFx Application Thread.
* Old dispatchers are deprecated, CommonPool is deprecated, too.
* awaitPulse() in JavaFx and awaitFrame() in Android are top-level funs.
* Introduced HandlerDispatcher, SwingDispatcher, and JavaFxDispatcher types
  in the corresponding UI modules for type-safety and future extensions

Fixes #41
Fixes #533 | 2018-09-11 15:42:03 | dc29b071d4784e3739f89223ced2333ecd5408ad

Fixed hangs during thread termination in IO dispatcher

Fixes #524
Fixes #525 | 2018-09-11 12:38:14 | 750d468b3281570910d0cd4000d4e29702b25020

Invoke handler using invokeIt to avoid JS bugs | 2018-09-07 11:36:05 | c430e0797e87af77f812bbcfb8751e4a0e31ffc6

AtomicFU 0.11.5 to fix Windows compilation | 2018-09-04 14:58:45 | 61abcd224a13f674bffae096afa7250de262df87

typo fixed | 2018-08-24 12:24:02 | 1a1237083b14d5de8f13f66b7a4ba6d9e26183d7

Introduce IO dispatcher to offload blocking I/O-intensive tasks

Fixes #79 | 2018-08-23 14:27:19 | f5e67ba597acdfb90ef84d29e4d6028f3f17a6ba

Introduce ThreadContextElement API to integrate with thread-local sensitive code

* Debug thread name is redesigned using ThreadContextElement API
  where the name of thread reflects the name of currently coroutine.
* Intrinsics for startCoroutineUndispatched that correspond to
  CoroutineStart.UNDISPATCHED properly update coroutine context.
* New intrinsics named startCoroutineUnintercepted are introduced.
  They do not update thread context.
* withContext logic is fixed properly update context is various situations.
* DebugThreadNameTest is introduced.
* Reporting of unhandled errors in TestBase is improved.
  Its CoroutineExceptionHandler records but does not rethrow exception.
  This makes sure that failed tests actually fail and do not hang in
  recursive attempt to handle unhandled coroutine exception.

Fixes #119 | 2018-07-25 09:22:46 | 7587eba96a230f3f0ab0c04f52723e926f7a845d

AtomicFu version 0.11.3 (bug fix) | 2018-08-23 11:05:46 | be065fd2c566acf4f600de23d45d70cf9f2144bc

Introduce ExecutorCoroutineDispatcher instead of CloseableCoroutineDispatcher

Fixes #385 | 2018-08-15 10:03:23 | b517f0529fe4a2066ca8ac985c08206cd4587758

Add workaround for K/N bug | 2018-08-22 09:37:41 | bbe6d8a915b2be9c0a7ff9d92677c878718fa219

Implement withTimeoutOrNull via withTimeout to avoid timing bugs and races.
Remove deprecated API

Fixes #498 | 2018-08-21 16:45:29 | 988eb26469819f7cc8cb1ba26c3a76a6805e8387

Provide API to create limited view of experimental dispatcher

Fixes #475 | 2018-08-15 09:06:06 | cac1a0f13c5b81cdfa3c2d1020e8d86ac8cd0029

Additional debug output for CoroutineSchedulerStressTest | 2018-08-10 17:38:41 | 21ce9c066c752adf4db1e8388a9d38a390b5f08b

Execute EventLoop#invokeOnTimeout in DefaultDispatcher to allow busy-wait loops

Fixes #479 | 2018-08-08 15:04:59 | e90cdb031ffab87d9f7671cc9e856b2a9534d59e

Scheduler tests fixed:

[temporary] Ignore flaky tests
Fix benchmark compilation
Fix WorkQueueStressTest | 2018-07-26 17:02:03 | 9542f1ce4f84d08ef2b33d14ce3ae79a8a93fa86

Scheduler improvements:

Fix (one more) ABA problem in tryUnpark
Global TaskContext to speedup CPU tasks
Documentation improvements
Stress tests constants tuned to be more robust and faster on local machine (and when ran from IDEA)
Style fixes | 2018-07-26 10:57:04 | e50fb89c4e80d7accb9bdfff3ce54c59d2857c26

Scheduler tests infrastructure

Support "kotlinx.coroutines.scheduler" property to change DefaultDispatcher
Updated scheduler shrink test with custom idleWorkerKeepAliveNs config,
so that they execute faster
Fix submissions from another instance of CoroutineScheduler
Run JDK16 tests and tests under new scheduler tests only during nightly stress test | 2018-07-20 20:57:57 | 5c7454b8a872d925f206f418c16d9880bf23e25f

Removed wrapper from LimitingBlockingDispatcher by introducing TaskContext | 2018-07-23 09:38:06 | 216e4d30a2b225361a4f3e59465c079a0f116379

Fixed ABA problem in parkedWorkersStack and other stress improvements

* Workers are now numbered starting from 1, zero is used as sentinel
* Workers are lazily created (no threads initially)
* Close/shutdown of the scheduler also clears state so that subsequent
  rogue attempt to dispatch anything fails.
* Work stealing is more predictable. It starts at random index but
  then goes linearly via workers array. | 2018-07-20 20:25:58 | db22e4023442341d39d0c3797de73e74efb25882

Scheduler cosmetics

Stealing logic cleaned up a bit (mostly style)
Update worker thread names when worker threads are terminated to maintain
consistency between their index in array and name;
Improved debugging info (toString)
Merged yield and spin counters, parkTimeNs is in Int | 2018-07-19 11:12:31 | bba6e8918e32d521109583a9024b3d5e82da53f5

Improved management of parkedWorkersStack in terms of ABA/concurrency;
Also includes documentation, naming and packaging fixes | 2018-07-18 10:12:31 | 1d3b0191ecbf498965d81257c80ad6f87e583552

Improved tasks dispatching:

Merge blocking and created workers into single state variable
Replace j.u.c. queue of parked workers with intrusive stack to support shrinking and increase performance
Replace j.u.c. global queue with Michael & Scott queue which supports conditional polling
Poll for blocking tasks from global queue when CPU token is not available
Make last ditch effort before thread termination
Idle reset on requestCpuWorker | 2018-05-03 11:52:00 | 18a91347466560b63144d0097f248d9edb029780

Fix ordering bug in QuasarTest | 2018-07-25 16:16:23 | a608a335ff57e969f69985c43ee70c30da1dba8f

Get rid of compiler bugs workarounds | 2018-07-25 13:27:14 | 5f73827f3131332018c02650057eff4aa2886ae7

Channels concurrency improvement:

Make close, cancel, isClosedForSend, isClosedForReceive and offer linearizable with other operations
Fix bug when send operation can be stuck in channel forever
New concurrency tests

Fixes #359 | 2018-07-17 15:39:20 | ea651aa5badbc20f911c844db2a57ea4f68fc38b

Access to PlatformImpl in JavaFx dispatcher, on Java 9 it's an internal module which should be explicitly exported

Fixes #443 | 2018-07-20 12:07:28 | 5557245405f965ec5ca26083301559066a1be147

Minor grammatical changes to the Coroutines guide

Minor fixes for the English grammar in the coroutines guide to help ensure new readers understand coroutines properly. | 2018-07-19 20:01:40 | 977ada1e74e0ae9b011fb219891433a6d36e9ef3

Validate FJP.commonPool parallelism to avoid pathological bugs

Also always construct private FJP pool if
kotlinx.coroutines.default.parallelism is explicitly specified.

Fixes #432, #288 | 2018-07-11 10:36:07 | 1e12210cd2bccdfd866b1c9649cd19e40663fb5f

Change order of handlers in JobSupport and CancellableContinuation
1) Invoke handlers before dispatching in CancellableContinuation to make behaviour timing-independent and Unconfined doesn't produce unexpected results
2) Invoke onCancellation -> handlers -> onCompletion in Job to make behaviour timing-independent

Fixes #415 | 2018-07-03 08:11:21 | b10287ecb35463f471ac120367a0a4f56f6b5c49

Typo fixed | 2018-06-26 11:58:39 | 7981999a156918abced59de696b02d9bc731f808

IO: fix joining and continuous writing byte array interference | 2018-06-13 16:49:45 | 9faa0395afd26a3c29cd67de5dce635a7882cf5c

Update ThreadPoolDispatcher.kt

Fixed typos. | 2018-06-09 17:01:53 | 517a2592077b067032d6c0379226d0467d7662f1

IO: fix continuous writing session interfered with joining | 2018-06-01 14:23:47 | e15eae8e3537080a82078873d762ad9de61f50f4

Typo fix | 2018-06-03 23:34:22 | e185ed6f918a1df082832c9059a091505b9a5cf9

Introduce deprecated ReceiveChannel#use to preserve backward compatibility with SubscriptionReceiveChannel, fix reactive samples | 2018-06-01 12:30:34 | 313978cf6b3901b1d7fbfb5d1f688c068a072c09

LockFreeMPSCQueue optimized & fixed

* no need for REMOVE token to hurry up GC
* Placeholder logic is fixed to avoid potential data loss on wraparound
* Stress test for resize/copy added | 2018-05-30 18:58:02 | c22a1c748e93db6e7d4e73f9118e8435edbeb698

Leaking handles in awaitAll are fixed | 2018-04-28 16:22:29 | e0b6db04b3bd86e942bc7e40081a82aedd8fd200

Delay bug fixes:
Invoke clearTimeout on cancellation in JSDispatcher
Remove delayed task on cancellation from ThreadSafeHeap on cancellation to avoid memory leak | 2018-04-26 13:03:40 | cd00643b92c9698ca728f92a66f52b30b3811d05

Documentation for debug property values | 2018-04-11 19:21:23 | 590c8889c2bb5341f15ee20e440c5599342fe34b

typo fixed | 2018-04-04 06:59:33 | 905a512625ad96dcd45c789f983babd93dfde011

Add extension to ExecutorService to return closeable CoroutineDispatcher

Fixes #278 | 2018-03-20 19:28:52 | 26f4b9ecd1bdd03299b668541f7c7c9ecaf9ab7c

Debug toString for channels

Fixes #185 | 2018-03-06 10:37:42 | e4b6f09af7c0d0b6963fa8611e867ff3292fad0e

rx-example: Added application plugin & fixed to use runBlocking | 2018-03-05 14:58:59 | 00560e8b0add1628bd0a32202b6f3cc301b35af3

Use NodeDispatcher on ReactNative

Fixes #236 | 2018-03-05 09:01:07 | ecc68f13141d1353aa2bb1d027a077e0fd7be4fb

Check for undefined `window.addEventListener` when choosing default coroutine dispatcher.

Fixes #230 | 2018-02-10 19:35:58 | 54d57e0c1fff22fe1d72c762f2bdbf01995395ca

Update README.md

Minor typo and typography fixes. | 2018-02-04 00:30:58 | 7dd6b66eced47e4ddf0b2c76c974ac19612b827c

IO: fix error propagation in blocking adapter | 2018-02-02 14:18:47 | f0c1d99e2c5c5978da7ace9d58c61a5648ed7687

Update coroutines-guide.md

This tutorial suggests just Async suffix:
https://github.com/Kotlin/kotlin-coroutines/blob/master/kotlin-coroutines-informal.md#asynchronous-programming-styles
Also, there was "of" instead of "or" | 2018-01-29 17:39:02 | 7e94e70734f6e01b0522d11071e6825879a221e7

runBlocking is improved to properly support specified dispatchers,
so that `runBlocking(UI) { ... }` can be used outside of UI thread.

Fixes #209 | 2018-01-29 15:07:21 | cb78787638039096804bc1b97031bcb9801c0547

Workarounds for KT-21968 to fix JS tests | 2018-01-24 20:31:22 | dfeba242b9e328f7528507f9349623671a00333c

IO: fix joining sequence, avoid infinite joinTo suspension | 2018-01-23 20:16:54 | d1842c6301d8debca8509809d473ce7e889b1d7b

IO: make reusable cancellable continuation implement DispatchedTask | 2018-01-12 15:46:22 | 4d01f7ec3b33f7633f3737a5ab3a3fc90703f57f

JS: Introduce Window.asCoroutineDispatcher and use custom queue in
Window.awaitAnimationFrame to align all animations | 2018-01-13 08:20:32 | 1867f6de0fb39077d0cb13fdc0400dd4568f717b

Actually fixed startup/shutdown of DefaultExecutor for tests to prevent
thread leak. Includes test-case. | 2018-01-12 15:28:24 | 9483301695f4c0784d663238ecd0ef04bbfcbea3

MPP: Debug toString should not depend on kotlin-reflect | 2018-01-11 16:04:12 | b79277b4fab5353680445f36dd9b19a740828203

IO: Use TestBase in all tests and fix leaking threads in tests | 2018-01-11 10:48:19 | c45f5fa3b636d66b824351c8d8d9368b8ee4e37f

MPP: Ported DispatchedTask perf improvements to JS and more code is made common | 2018-01-11 09:39:36 | f29203c158a526f90ae8574abfc1ba6dd5249262

Performance: Remove DispatchTask, store value in DispatchedContinuation | 2018-01-10 13:25:25 | f2239e191f55883486d5ce04ffb0c6f75cdc3468

Update coroutines-guide.md

Correct `Dispatcher` spelling | 2018-01-08 13:56:54 | fa13beba79e6ebb68588ba2167b67a77196907d3

Optimize creation of DispatchTask for cancellable continuations (fixed) | 2017-12-28 09:21:14 | bdf23f28c425ea391baa7ddbc3ba012d15e6dfa5

Optimize creation of DispatchTask for cancellable continuations | 2017-12-27 22:09:43 | ac48070de5e20b727b6d9ffd5cc7c259426fb6fb

MPP: DefaultDispatcher internal impl class renamed to JSDispatcher | 2017-12-27 10:14:54 | a919827885289271a6c598ab47fdf4434a8e0da3

fix typos | 2017-12-24 19:55:06 | d2d42ea802b54d2ede23f3edf3c18521ae46a3e9

IO: fix accidentally used tryResumeWithException | 2017-12-06 14:09:01 | 9ef4e0c05168acdb2c955079e2ee857cfec9de06

IO: fix spuriously hanging pipe tests | 2017-12-05 12:41:42 | 4adac45480b33664d79b24f7a779e7d4c1da68b1

IO: fix joining with different write byte orders | 2017-12-05 09:35:56 | 8af8937a34e893661dfe15f9be598eac50b101df

IO: fix infinite writeSuspend loop caused by auto-resuming flush | 2017-12-05 09:27:09 | e6764086ef4a03ec610245740b379f5da617224c

Bug fix: start hangs on lazy coroutine with attached invokeOnCompletion | 2017-11-30 13:41:47 | 5610e1df2eb3f67be8b45633b5d6ffbf73ec6bb8

Add DefaultDispatcher on some reactive operators | 2017-11-29 21:12:35 | e19ee04ca72316f9d67a58d35b8be398b059f1f5

IO: fix too expensive joinTo fast-path | 2017-11-23 09:39:27 | 060f36a06d341f43c0f9e77fd6706bf71f94972c

IO: fix typo in test name | 2017-11-20 08:43:26 | 9a6ca1a006debfa08392027508d03a141ae53841

Introduced ReceiveChannel.cancel method;
all operators on ReceiveChannel fully consume the original channel
using a helper consume extension, which is reflected in docs;
removed `suspend` modifier from intermediate channel operators;
consistently renamed channel type param to <E>;
added two versions for xxxTo fun -- with MutableList & SendChannel;
added tests for all channel operators;
dropped/deprecated ActorJob/ProducerJob, fixes #127 | 2017-08-17 18:01:33 | b555d91193d9e76710062451cf94a94d14820e98

IO: fix race in closeWaitJob of JoiningState | 2017-11-17 16:30:22 | 47d92bafe90d899dfb53cd0f8bf7eae75504047e

IO: fix accidentally missed it | 2017-11-17 16:29:49 | d42bdadc8520ec490d5b37f5f160b54d4541d2f8

IO: fix race in ByteBufferChannel.write(lambda) | 2017-11-17 15:39:03 | 7bf4fa9e3b19a8200450fabe396a0ff854615596

IO: fix joining of already closed but not empty channel | 2017-11-14 11:52:32 | 9e9929d376d2b92cd5fda2f21f7cc1eb51f66ca8

IO: fix lincheck dependency | 2017-11-10 20:22:53 | b94ce42827dc5f9294f19b99da356ad585fb01ea

IO: fixed awaitClose and copyDirect | 2017-11-10 09:22:23 | 373d590e103f3203f61b2fb93b3b82bcce1de13e

IO: fix race in joined flush once again | 2017-11-09 18:18:05 | 8e9138ca4a297189f49bece8e739b6584f69e061

IO: fix joined close/flush | 2017-11-08 13:50:13 | 2fdb5aa4867b60f7c659cf4d950babfd2a43a67a

IO: fixed joined channel flush | 2017-11-08 03:15:39 | 625c1fefa57f95af2b723b7c7e3b1a5319c69faf

IO: fixed joined ByteChannel close | 2017-11-08 03:11:53 | ca8762b2f6a1043103a45153357a5f9e5dc010af

IO: fix writeByte BufferOverflowException

it is important to setup buffer's positions again after suspension
it is not the case if we don't hold writing state during suspension | 2017-11-07 16:42:15 | bab9f7927ca780b242c794578c02ddf63db40375

IO: fix race in readSuspend

consider state change:
writer: IDLE(empty) -> !do write -> IDLE(buffer) -> !close -> closed = C
reader:  !suspend -> resumed -> closed = C -> [here]

here reader can see that there is closed state however to see published
written state it should read state again rather than simply use already
readen state to get happens-before guarantee | 2017-11-07 16:18:16 | 32c90b169d05bd372317f90ae5ad511bbcb05bc5

IO: rewrite if/else/return code to identical

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 11:23:34 | fde1a646fe5a60c8aa211764d63527ec429672c3

IO: eliminate tail suspend calls in when blocks

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 10:54:47 | 4eccfba8d4cbe55ce49ac7b70c40eea1d0adf7c9

No Job in newSingleThreadContext and newFixedThreadPoolContext anymore

* This resolves the common issue of using `run(ctx)` where ctx comes from
either `newSingleThreadContext` or `newFixedThreadPoolContext`
invocation. They both used to return a combination of dispatcher + job,
and this job was overriding the parent job, thus preventing propagation
of cancellation. Not anymore.
* ThreadPoolDispatcher class is now public and is the result type for
both functions. It has the `close` method to release the thread pool.

Fixes #149
Fixes #151 | 2017-10-20 09:36:56 | d9ae2bcb88403e0854b895ba46c2417b4c0a4752

run uses cancelling state & propagates exceptions when cancelled

* When coroutine that was switched into a different dispatcher using
`run` is cancelled, the run invocation does not complete immediately,
but waits until the body completes.
* If the body completes with exception, then this exception is
propagated.

Fixes #147 | 2017-10-20 08:42:06 | bcdd8e17fed40097f9bb8fdb3e218f95ff8603a9

Exception propagation logic from cancelled coroutines is adjusted

* When cancelled coroutine crashes due to some other exception, this
other exception becomes the cancellation reason of the coroutine, while
the original cancellation reason is suppressed.
* UnexpectedCoroutineException is no longer used to report those cases
as is removed.
* This fixes a race between crash of CPU-consuming coroutine and
cancellation which resulted in an unhandled exception and lead to
crashes on Android.

Fixes #152 | 2017-10-20 06:00:50 | 6aed878a67e6f707e6c3afb0879beb8822a95d6f

Fixed Reactor docs (Scheduler.asCoroutineDispatcher) | 2017-10-07 19:58:40 | 8348b8c31d5b07541bd3d268ca2a186b0fe1ad6f

Failed parent Job cancels all children jobs, then waits them

Also improved debug output a little bit | 2017-10-07 12:44:48 | a36ab94253bb9945c6377eb43db0cb1071019c40

IO: eliminate race in close

I knew that I'll hit this bug anyway. Here we MUST flush twice as
flush at read suspend is not enough. If a writer closes then the first
flush does flush and it closes so all readers will see all pending data.
If a foreign thread does close then the first flush is makes no
difference however the second is required for proper cleanup and
to do tryTerminate | 2017-10-04 18:34:18 | ad68c06c1200f2038c26adeab2abf801a2a2114b

IO: fix verifying pool usage

buffer view doesn't hold original pool reference to make
pool chaining working | 2017-09-29 15:18:00 | ccf8dde980a4701b9cd30e1df23e5cbefdd93b53

IO: fix writing byte packet | 2017-09-28 07:58:15 | 754a19b188dc6d486d73b8e3a2f0c483c3f88f9b

Documentation for DefaultDispatcher in the guide | 2017-09-29 18:39:03 | 66f018c489c6b0ec0831fa9953db34da3edff5f3

DefaultDispatcher is introduced | 2017-09-28 11:27:05 | c0d559b594fce802f1d1be9a6feef49019d17160

IO: fix ByteWritePacket.writePacket size update | 2017-09-17 19:48:26 | 5ca0d12c1e8a9672d40fe83cd31d1b2426f397e7

IO: fix writer scope type | 2017-09-11 10:06:54 | ea3a418f84f3731e92658cedfa11878a8828500c

IO: fix byte channel readX operations return -1 during close+flush

Read operation should try flush before return -1 if closed because
the close operation setting close status first then do flush
so reader could see closed status but not-yet-flushed byte counters | 2017-09-11 07:31:08 | e4d3ce750ed8b864a435fb0926d0d77e9c02b208

IO: add more byte packet tests and fix few bugs | 2017-09-06 18:50:51 | 5feaf6973c23fae3c5a8df64748e2181c50dd0d6

IO: fix delimiter lookahead | 2017-09-06 15:52:04 | 1cc86083e7be17ce53f7c80cfa6ba67e8569e33e

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 99cdb380bf6391db7e7d08e8673c627c554074d8

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 776b370d58883e9bce0c309ebb4919ef4cdac13c

IO: fix byte packet write buffer leak | 2017-08-25 08:39:00 | 974cbb3b21b8d7613c41ee2221ce435e347b068f

IO: fix byte channel close with error buffer leak | 2017-08-25 08:06:59 | 24b040f1345db27b45589a975daab45bf9325494

IO: fix CR-only line endings processing + tests | 2017-08-23 11:39:41 | a9a936d1a325ee0baf36df444414e1e17ac539da

IO: rename writeStringUtf8, fix implementation + tests | 2017-08-23 09:26:18 | fbcba264a37580b5c47f3314395e5146afb38287

IO: fix copyAndClose + tests | 2017-08-23 09:11:55 | fc84a634ff9a1acca04e09fa5a031b904c5c8838

IO: byte packet readLine support + bugfixes | 2017-07-26 09:59:16 | 0b12ffc0178844e813223039adf5d7510703485d

Fixed bug in LockFreeLinkedList (invariant & lock-freedom violation)
Migrated atomic ops to AtomicFU library for ease of code maintenance
Implement lock-freedom testing in LockFreeLinkedListAtomicStressLFTest | 2017-08-10 18:09:26 | 7eb41efbacd498704f25465e2a58f4892c16aa32

Typo fixed | 2017-07-24 13:42:34 | a448903dcac25e450d87c49705e7a6693a300d29

Use CompletableDeferred in the guide section on coroutines;
fix (reknit) broken links to factory functions that are now top-level | 2017-07-21 22:00:30 | 256812a1c09511744575ed3d2c64fec27979f391

More documentation on CompletableDeferred states and style fixes | 2017-07-21 15:04:23 | 8e2ae9964614e35295a8d695114b00c35f5fc755

Better debug strings for continuations | 2017-07-12 12:22:21 | 69d9c852289f1a4a9ffe107dc75cc71871cfe34e

ObservableBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 10:16:30 | ed6985459318209be084ff807676cb722387fb6f

PublisherBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 09:58:44 | 58246ca7e7727632ba50c41d0314df47ba9e3fc0

Fixed IllegalStateException in select that concurrently selects, which
was due a problem with Job concurrent cancel and dispose of handle.
The bug was introduced by addition of Cancelling state for a Job.

Original stack trace in select was:
java.lang.IllegalStateException: Check failed.
	at kotlinx.coroutines.experimental.internal.LockFreeLinkedListNode.remove(LockFreeLinkedList.kt:236)
	at kotlinx.coroutines.experimental.JobSupport.removeNode$kotlinx_coroutines_core(Job.kt:734)
	at kotlinx.coroutines.experimental.JobNode.dispose(Job.kt:995)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.initCancellability(Select.kt:294)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.getResult(Select.kt:273) | 2017-07-11 09:50:00 | e9f64491787433b3d53ad5800456524820058d5f

typo fixed | 2017-07-10 10:46:13 | d28cc872fb7815b51ceb7c84a4e77117fce380c7

typo fixed | 2017-07-10 10:44:07 | 8b0b07ab81f12bc605462a6a1333b61abce547cb

typo fixed | 2017-07-10 10:43:20 | 93f7e8e22019643caaf14ae480c05ab0a349064d

Bug fixed on waitTimeoutOrNull (was flaky testOuterTimeoutTest) | 2017-07-10 10:38:54 | 769d48217f8787c7f64c07da6e53c27b2d703274

Refactor DispatchTask to reuse it for dispatchYield | 2017-07-10 10:16:20 | 2a93646a8054ce7819e9bdbff8d28849a19e874b

Fix SecurityException when trying to read "kotlinx.coroutines.debug" prop | 2017-07-10 07:15:40 | e824eaaab9d053ff0f2cc028c7413bb83adcacc0

A fix & optimization for select impl helping scheme | 2017-07-05 06:53:29 | 907074f1f63871ed29feab3173a2e38b30d8fbb6

Reactive tests fixed for cancellation logic change | 2017-06-26 11:25:56 | 7a7b00938934ef7d0855eb24ec93a06d0b0c97e7

Fix typo: debugging more -> debugging mode | 2017-06-24 21:03:35 | ed5ed49913498b4e880415d2f0fb9004e20e1b5a

Typo fixed | 2017-06-23 10:27:02 | 6c18dfd15f6e1703db57531422bc0df3cb7d08ff

fix typo.

somethine -> something | 2017-06-18 07:37:59 | 81a6f23ca68d7ed37f36dcb966fe74e3bc53de57

Typo fixed | 2017-06-09 17:25:03 | c3c2f3269220f5d7ae20e7592ca1253061b50a95

CoroutineExceptionHandlerTest fixed | 2017-06-09 15:59:25 | 866521b83ed0676d0203dec35de5fb797bc9a59d

SimpleSendReceiveTest is fixed to account for close conflation | 2017-06-06 11:36:38 | 9ff32644381bf1a692d9a935170a9f7b7023f244

Fixed lock-freedom of send/offer on closed channels and related bugs.
Conflated[Broadcast]Channel hang of concurrent offer/close is fixed. | 2017-06-05 14:04:39 | e6e8ce8d46cee273e00ee130334239880734dc2f

Integration readme title fixed | 2017-05-17 11:59:49 | 0c2e25d7c38f50bd3c9866ea1fc2c12d5d74251a

launched jobs and await can be cancelled while waiting in dispatch queue

* suspendAtomicCancellableCoroutine function is introduced for funs like
  send/receive/receiveOrNull that require atomic cancellation
  (they cannot be cancelled after decision was made)
* Coroutines started with default mode (CoroutineStart.ATOMIC) using
  async/launch/actor builders can be cancelled before execution starts.
* CoroutineStart.ATOMIC is introduced as a start mode to specify that
  coroutine cannot be cancelled before its execution start. | 2017-05-11 17:15:18 | a74eb5f8b08e84f904e75aa71da4547c9178da8d

Fix withTimeout/OrNull bug with spurious concurrency on cancellation | 2017-04-20 16:23:18 | ca9d5be31a30c5f6a20875438f9ae40db4183f4c

Refactored ThreadPoolDispatcher to reuse code of ExecutorCoroutineDispatcher | 2017-04-18 12:28:35 | f04f51d5b05a0aec7c97acc202d180096a095fbf

equals/hashCode for wrapper CoroutineDispatcher impls | 2017-04-11 10:50:03 | 30dd5c129c493ca7b1a3b2b80437e8a7ec68f3ec

Starting coroutine in UI event handlers without dispatch in UI guide | 2017-04-07 15:06:22 | f724f6e2fe7c20cb48b69cd7b19b2658313231e4

Nicer toString implementations for CommonPool & Unconfined dispatchers | 2017-04-07 07:35:28 | dc9fd1c2d18da2f23d9907148b4674cda6418e49

Few minor docs & build fixes for reactor support | 2017-04-06 19:15:35 | 523516abd2023f8d968d389b32dee713130a9f83

Merge pull request #53 from mkobit/patch-1

Correct typo in coroutines-guide-reactive.md | 2017-04-05 09:41:56 | 7676e2239947273c6cbb4cb77536042bd9f2ce43

Fix repository urls

need to be reverted once bintray will fix jcenter sync issue | 2017-03-23 14:45:39 | 78fd3cb8932410af9beab4effc04bdeea4343732

Merge pull request #42 from jakiejj/master

fix typos in comments to Nio functions | 2017-03-20 07:16:24 | 9ef792fec6775bb5cdb08c84511488f324db3322

fix typos in comments | 2017-03-17 20:48:39 | 4d927c76488b96abaae7ba003f8064ad84b8334e

Typo fixed | 2017-03-14 17:39:50 | 81a5b7144484dcc8ebc89cd98fd9bd8a2d45afbe

startUndispatchedCoroutine is renamed to startCoroutineUndispatched for consistency with coroutine intrinsics | 2017-03-14 16:39:26 | 4638d79097a3d5b0c1b32c1e468ad723cc4b2bd9

Fixed bug with sometimes missing `onComplete` in `publish`, `rxObservable`, and `rxFlowable` builders | 2017-03-13 09:03:35 | d14a3901f365f622d9a7ba96fc00900011c9c009

Scheduler.asCoroutineDispatcher extension for Rx 2.x | 2017-03-10 12:06:01 | a1fe3da17907024afa50a35cbfcc72639d62bf78

not -> no typo fixed | 2017-03-09 09:57:57 | 228d084bfb87f967e216b84029b58649fcbe7472

Executor.toCoroutineDispatcher is renamed to asCoroutineDispatcher | 2017-03-09 09:03:39 | 38b5ea18e36f1a53d4cde27bf3fd21522727cbbb

Fixed dispatching logic of `withTimeout` (removed extra dispatch) | 2017-03-02 21:15:21 | 43d831f61f33262dcb4621069451d1699898d1cb

More links and typos fixed | 2017-03-01 14:21:48 | cc63363ead9d82f4e246a319ca3e0cb9f15e3a14

top-level readme links fixed to produce & co | 2017-02-22 12:04:28 | 40e89f689f89ae643f68c68efc57aebd8f8284ed

Jon.onJoin select clause is implemented, lazy onAwait/onJoin & dispatch fixed | 2017-02-22 11:56:58 | d84dbc2d75927fe8446098a225a3fbb884683bde

startUndispatchedCoroutine utility functions | 2017-02-22 06:53:49 | ee88fbef2d78e4b25f741efffabf4756bff8e7f3

buildChannel deprecation template fixed | 2017-02-20 12:53:30 | de8b9e9b336491ff0dbf107fe35d9efa030d92d3

Merge pull request #31 from gildor/on-completion-deprecation-fix

Job.onCompletion deprecation template fixed | 2017-02-20 12:49:41 | 85923e2de75ed522903cc3d64aef2ad178c1cbf8

Job.onCompletion deprecation template fixed | 2017-02-19 13:26:29 | c8f9ca308abe963cafa5f676410402fc287cfa5a

Delay implementation in Swing, JavaFx, and scheduled executors is fixed to avoid an extra dispatch
CancellableContinuation.resumeUndispatched is introduced to make this efficient implementation possible
Additional documentation for CoroutineDispatcher implementors | 2017-02-10 10:30:38 | a198bad7365a508baf1041993e9a14007f9d5aa3

Doc fixed | 2017-02-10 10:14:35 | 8c8551e7dbea7c2467060c2d3c6aa1c54c721e68

Merge pull request #29 from cbeust/patch-1

Update coroutines-guide.md | 2017-02-07 17:52:01 | 4d821e3901d038f005850b38d1e4954506306383

Merge pull request #28 from erokhins/patch-1

Update 1.1.0-beta-37 to 1.1.0-beta-38 | 2017-02-02 19:24:36 | 40f69cf704e7b31cec9c8a935317d8c173e79623

Added deprecated (with error level) plus operators on Job and CoroutineDispatcher to catch potential problem with their incorrect use at compile time | 2017-02-01 15:43:32 | 79a2868295127b81056f66d644da72db5a40d772

Merge pull request #27 from tairrzayev/readme-fix

Fixes the typo in the coroutines-guide.md | 2017-02-02 06:15:26 | 9d844fa1733f83e5e1b85c3e762a69729d3c5ef2

Dispatchers default behaviour is changed to schedule new coroutine for execution later.
Job.getInactiveCancellationException is introduced.
yield is cancellable while it is waiting to executed.
core tutorial is expanded. | 2017-01-29 18:58:33 | 7cf452eab59cdca570227f071cba2da374f77110

Finer grained control on debugging facilities | 2017-01-24 07:29:53 | aecb9aa1606b79243c8e93221de9713c164ce015

Added context parameter to CoroutineDispatcher methods, implemented Executor.toCoroutineDispatcher | 2017-01-23 13:47:20 | 67891d867da022d608d4589859002f256d9a313e

Fixed initialization of Job with parent (initParentJob), fixed handling on uncaught exceptions in standalone coroutines | 2017-01-20 09:19:52 | 58a7add417403811e822a4f6f7689ae3fd0e2018

Minor: fix version of maven-deploy-plugin, fix pom warnings | 2016-12-21 17:21:30 | c4ad15fc6246b7496d610da7419441020dfe1c56

Merge pull request #6 from hhariri/patch-1

Fixed packaged names | 2016-07-27 07:04:12 | c6993089412fbc491ddeb0a71b57e67bf31e21d6

Fixed packaged names 

On the repo, the package names don't have the suffix -1. | 2016-07-27 06:03:41 | 1abe89716c093c9e010a45a5235da7f9b50eea17

Merge pull request #791 from Kotlin/undispatched-cancellation

Use final Job state in undispatched coroutine completion | 2018-11-06 12:55:53 | 666ea6e554fa52ea03504ab618543ca26e20ce3b

Add ExperimentalCoroutineDispatcher to binary compatibility check, restore binary compatibility in Ktor | 2018-11-06 11:03:39 | e3ab2a692a6da18ee9213a124a4c111235046c75

Add scheduler name to ExperimentalCoroutineDispatcher

Fixes #661 | 2018-10-31 13:15:35 | 92327322442d4c8be225067ff6e16c6827f8b38e

fix link | 2018-11-05 16:56:31 | 64f2b2006b5a7cf2a760ec976dd28e988ce122d0

fixed typo | 2018-11-05 14:28:47 | ace91872cc56113fa10e844069f46eb3bbec9c95

Use final Job state in undispatched coroutine completion

  * When using in-place coroutine builders, startUndispatchedOrReturn will return block's final value on fast-path. This is not correct because if any of the children had failed, whether or not exception is thrown depend only on child timings. Moreover, in the face of such race exception may be ignored if scope owner wasn't cancelled or is missing.
  * Introduce special hack for withTimeout and withTimeoutOrNull to ignore TimeoutCancellationException on the fast path
  * withContext, coroutineScope, supervisorScope, withTimeout and withTimeoutOrNull are affected and now check cancellation on fast-path | 2018-11-04 12:32:34 | 78832e3bb38560f4c4d55cdba436bf7bc9b761ca

SchedulerTask is now an abstract class with optimizations for jvm

* It removes the need for a separate SchedulerTaskBase
* submissionTime and taskContext are marked as @JvmField
* DispatchedTask is also an abstract class
* resumeMode is marked as @JvmField | 2018-11-01 21:10:39 | aa374a95dc7e6df4fd6458fe6d8abe95e2953fce

Scheduler: capture TaskContext for afterTask before running it

This is not strictly needed, since the reusable Task instances
(DispatchedTask) should be always reused in the same context, but
this makes the code more resilient to future changes. | 2018-10-22 02:31:23 | e64d9b706cb5180260e4d95fa3a990449163da51

Avoid allocation of CoroutineScheduler task object

* DispatchedContinuation and CancellableContinuationImpl have all
  the necessarily field to be scheduled | 2018-10-21 17:08:49 | 16e20347dc5557063742ea8a06dbe5162a211c25

Publish: Comments style fixed | 2018-10-26 20:02:08 | f18b9f580faff47af054cb6c0942cd15ccc7675d

Fixed exception handling for publish builder

* Test that ensures proper parent cancellation
* Stress test to ensure that exception in publisher always handled
  by parent
* Also fixed race between request & signal completion that did not
  reproduce before | 2018-10-23 05:28:12 | ac848e872da94e01ed60a6bfecbfe3926229f44f

Reactive streams integration conformance to TCK verified & fixed

* Throw NPE on null subscriber
* Throw IAE when requested n <= 0 elements
* Do not sent any notification after cancel() | 2018-10-20 16:50:05 | 8cced247b1d83f7885f21be8c9b0354dab0fd1f3

fix minor typo | 2018-10-30 19:14:20 | a223f351c1dac80443b02ab905d46acbf4a66720

Implement yield for unconfined dispatchers, documentation improvements

Fixes #737 | 2018-10-23 09:29:56 | c33ef61d4502b71e0cdc354337f261917102d1c6

fix: make snippet as non-runnable | 2018-10-23 12:33:12 | 0661d477332205c23defe65d51e4063cd009e023

Prevent temporary leaks in HandlerDispatcher by properly handling
cancellations in scheduleResumeAfterDelay() implementation | 2018-10-16 22:30:40 | e321394c359758659a07ad1c98429ec2acd8ea59

fixed typo | 2018-10-19 21:16:57 | d981966acf780078119493c1f64e30dc9fa6e02e

Merge branch 'release-candidate' into develop

# Conflicts:
#	core/kotlinx-coroutines-core/test/RunBlockingTest.kt
#	docs/coroutine-context-and-dispatchers.md | 2018-10-18 14:40:10 | a7e10146781744f6df3865a1a33fa4e7cbc2c0b6

Merge branch 'context-elements-opto' into release-candidate

# Conflicts:
#	common/kotlinx-coroutines-core-common/src/Dispatched.kt | 2018-10-18 13:59:46 | cd37d8e8b30656a92a883b646fe050ff479bafdd

Minor optimizations of UndispatchedEventLoop | 2018-10-18 12:17:25 | 23d435b17a1aaaba86cc71656a4080547c4c727e

Do not step into thread-local event-loop on CancellableContinuation#dispatch fast-path | 2018-10-18 08:54:56 | faa477496bc2c05dad4034847a3f7d3f6aae3818

Use FIFO queue in undispatched event loop | 2018-10-17 16:51:50 | 09b9d6c157c9d7c6ec84052c16e64d3eebd0bc8e

Move undispatched thread-local event loop to dispatched continuation, execute all undispatched tasks in that loop to avoid SOE in user-supplied unconfined dispatchers and 'immediate' main dispatchers. | 2018-10-17 15:37:36 | fd54bc4882357771d0bec29abbd6e99dfccab725

Rework Dispatchers.Unconfined to use thread-local event loop

Fixes #704 | 2018-10-17 07:57:30 | 7ee722a595b416023c69d987fb7e4682ac0ffe91

Cache result of ThreadContext#foldAll in the field of DispatchedCoroutine to avoid context fold in tight loops

Fixes #537 | 2018-10-16 12:47:26 | ae85797805f93f98bfad64f5f91ba97e4f2c1fbc

Dokka fixes

  * Provide module with Kotlin 1.3 API because Kotlin 1.2 from Dokka can't read classes marked as "from the future"
  * Add runConfiguration dokkaStubs which is included only during dokka task with some classpath magic for Kotlin 1.3
  * Add package.list for slf4j
  * Fix unresolved types/links in documentation
  * Suppress all internal/inherited API | 2018-10-13 12:40:32 | 706e39363b586127b29e28fd97d476129c22fe93

Make EventLoop internal, @JvmName("from") for ExecutorService.asCoroutineDispatcher | 2018-10-11 16:09:44 | b6eca2a62158b2dc8d9b41d86040924095dca662

Use toString implementation for continuations to leverage debug metadata

Fixes #679 | 2018-10-10 11:46:53 | 4220ca2106bea653f2831f19c2c93752ea0e468a

Cleanup: get rid of workarounds, cleanup guide, suppress/fix compilation warnings | 2018-10-10 08:56:41 | 1bdbb3ef364006515157b5884dc663d9c3172c6c

Experimental annotation revisit:

  * Mark our API annotation as experimental with corresponding warning or error
  * Get rid of workaround for new inference bug
  * Migrate to compiler arguments instead of annotations | 2018-10-09 16:06:29 | e6e82391c33716033996ef6718756feab641816c

Restore TOC in the root coroutines-guide.md file with links to individual files

* Knit supports new TOC_REF directive for that.
* Reknit docs (also fixed out-of-date sample file). | 2018-10-08 17:20:12 | 715acd33e564dbff128a12b10ec2c6e24240d330

Migrate to Kotlin 1.3 coroutines, drop experimental from package

* Features based on version 0.30.0
* Uses Kotlin version 1.3.0-rc-57
* Uses Kotlin/Native version 0.9.2
* Uses AtomicFu 0.11.9-eap13
* Replace SuccessOrFailure with Result
* Replace buildSequence and buildIterator with sequence and iterator
* Apply @BuilderInference on all builders (including extension methods to workaround inference bug) | 2018-07-13 07:33:25 | 0950dfa1fe114e3682a546e3e53ef34dec9dfd4a

Fix lost exception from dispatched withContext on cancelled job

Fixes #675 | 2018-10-08 13:13:01 | 0f94304c6ae46c8f0cec24dde29d2e7af9ae7e97

Mark newSingle/FixedThreadPoolContext as obsolete, document the reason

* The will be replaced by another mechanism in the future.
  See #261 for details.
* The proposed replacement is to use the standard java API:
  Executors.newSingleThreadExecutor/newFixedThreadPool
  and convert to dispatcher via asCoroutineDispatcher() extension. | 2018-10-06 13:36:13 | f5126d0a9263f0b73a57d17031c340f78e3a25bd

Lazily load Dispatchers.Main and provide a stub impl on failure

Also specified explicit public visibility for Dispatchers object.

Fixes #658
Fixes #665 | 2018-10-06 14:09:05 | 0ece3885d445b60d254dc0fb21c7c05c7ebfb1bf

fix grammar typo

removed repeated 'for' | 2018-10-05 13:16:33 | e7a0723e930d52c4cb4665c5a3918f883287c039

Short Dispatchers.Default.toString value ("DefaultDispatcher") | 2018-10-02 09:59:11 | ec8cbd252d20adcdc91149ae9129149b252d945c

Move UI dispatcher to common Dispatchers.Main (#641)

* Main thread dispatchers are grouped under Dispatchers object and are discoverable via ServiceLoader

  * Dispatchers.Main can be consistently used and easily discovered, its implementation is discovered with ServiceLoader
  * It allows us to add iOS Dispatchers.Main implementation in the future thus opening the door for multiplatform UI-dispatched code
  * Workaround for #626, now Android users can start migration to RC coroutines

Fixed #626 | 2018-10-01 16:01:16 | cfe699fb59d799ab22da23aae983cc34b1164f29

Never loose coroutines when CoroutineScheduler is closed

* CoroutineScheduler close/shutdown sequence now guaranteed that a
  submitted task is either executed by the scheduler that is being
  concurrently shutdown or RejectedExecutionException is thrown.
* RejectedExecutionException is caught by the coroutine dispatcher
  implementation and coroutines are rescheduled into DefaultExecutor
  if a (custom) instance  of CoroutineScheduler is being shutdown.
* Added stress test for coroutine scheduler closing. | 2018-10-01 07:52:56 | 4b0f4dec24b93db4e0e0abbfe59b115e886a30c1

Coroutine scheduler is used by default instead of deprecated CommonPool

* Documentation and guide are updated correspondingly
* "DefaultDispatcher" is used as a public name of the default impl
* Implementation is integrated with virtual time-source
* Shutdown sequence is reimplemented in a safe way for tests,
  makes "close" safe to use on custom instances.
* "close" on DefaultDispatcher throws exception just in case
* -Dkotlinx.coroutines.scheduler=off can be used to switch back to
  CommonPool

Fixes #198 | 2018-09-28 09:20:49 | 303708b27f8d997ae482e3106679a7d170bc16d7

Exception unwrapping logic rework, do not unwrap cancellation exception if parent can handle exceptions

It allows to properly handle only relevant exceptions by child without reporting the same exception multiple times, fixes suppressions hierarchy and allows to implement supervisorScope properly | 2018-09-28 09:29:21 | 88e72f9973810119f105f78768b59e19f6a49c26

Introduce SupervisorJob & supervisorScope

This change also fixes propagation of cancellation for Job() constructor.
When both Job() and SupervisorJob() are cancelled with exception (fail),
they cancel their parent, too. So we have similar behavior between:
* Job() and coroutineScope { ... }
* SupervisorJob() and supervisorScope { ... }

Fixes #576 | 2018-09-23 16:16:04 | 21f171c8cb09831e25acdeab5c667cf3c15a9692

Avoid OOM in thread-pool dispatchers, try to reflectively invoke setRemoveFutureOnCancel on executor instance and use default dispatcher if attempt failed

Fixes #571 | 2018-09-25 12:45:53 | e29f49799d118b5c3feb38886af3030d027e7b60

async and async-like builders cancel parent on failure

* Affects async, CompletableDeferred, and all Rx integration builders.
* This makes all coroutine builders totally consistent. They all
  cancel parent on failure, but they all consider "CancellationException"
  to be the case of "normal cancellation" that does not propagate to
  parent. The only missing case is Job() that should be fixed together
  with introduction of SupervisorJob().
* Note that "scoping" builders don't "cancel the parent", but rethrow
  the corresponding exception instead, so it that is how it gets
  propagated up the stack.
* This makes parallel decomposition exception-safe. You
  cannot loose an exception as along as default (child async)
  behavior is not overridden.

Fixes #552 | 2018-09-27 16:17:16 | 52bfdabfa1476f55c1b3880d43f49977fc8df943

Copy deprecated annotations on Job member to inheritors

* Makes them easier to find for cleanup
* Avoids bug with light classes | 2018-09-28 09:41:58 | ffda1da6aec27b51f0bc8640f0e48c8fcd1e8f59

Restore binary compatibility of Executor.asCoroutineDispatcher

Fixes #629 | 2018-09-27 18:19:38 | 18cc588106ff7f4c680831809e5af8d75063c689

fix broken links for kotlin web site (#628)

* fix broken links for Kotlin web site | 2018-09-27 15:42:04 | cbeef1039d7402939bac8ec4674e1a7b1adf993a

Merge pull request #588 from Kotlin/handle-exception-fix

Handle exceptions fix | 2018-09-25 21:00:29 | 25b4388ef2f94909acac51cf1e0206975cc4b84a

Add name parameter to Handler.asCoroutineDispatcher

Fixes #580 | 2018-09-25 13:40:30 | a180ff75e9f7c97189a2651e96f4212bff0b105e

Fix lost exception during cancellation in produce, fix integration with play services after rebase | 2018-09-25 16:16:02 | 1b22af7e462272cbc33fd019975ee3ec5dbf1b78

Merge branch 'develop' into handle-exception-fix | 2018-09-25 13:10:26 | 1e0a2f0ad358c49d97602ee01ecf76602721fa4f

fix compilation | 2018-09-24 17:29:00 | f30715955637d2006e17fda7f99d002877fedc1c

Docs for context/coroutineContext in AbstractCoroutine are fixed | 2018-09-24 17:29:42 | 2d8cad05755d47af7987f39385527d3bddb15377

Fix exception aggregation to ensure atomic handling of exceptions

* Removed legacy onFinishing handler support from JobSupport.
  - It is no longer needed, because handleJobException covers #208
* Fixed bugs that were masked by cancelling parent from onFinishing.
* Consistent "Finishing" state was introduced in internal machinery:
  - Job enters finishing state when it is failing or it is completing
    and has children
  - Finishing state cleanly aggregates all failures, tracks cancellation
    and completion status
* Job.isFailed is introduced as a consistent way to query the "failing"
  state of the job that was previously only implicitly available via
  invokeOnCompletion handler (cause != null means a failed job) and
  the documentation for both Job & Deferred is updated to reflect that.
* Source-incompatible change: Job.invokeOnCompletion boolean parameter is
  change to onFailing. Such handlers are now invoked as soon as the job
  starts failing and the root cause exception of the failure is consistently
  passed to all the handlers.
* The following internal methods were introduced to facilitate this:
  - Job.failParent(exception) is used by child to signal failure to parent
  - Job.cancelChild(parentJob) is used by parent to cancel child.
* Child never aggregates exception received from it parent, but uses
  it as it root cause if there is no other exception.
* JobSupport.handleJobException() logic for launch/actor is split into:
  - failParent - can be invoked multiple times on race;
  - handleJobException which is invoked exactly once.
* Exception materiazization is much lazier now, which should
  significantly improve performance when cancelling large hierarchies.
* Other minor perf improvements in JobSupport code.

Fixes #585 | 2018-09-14 09:52:50 | ecbc85cbdad134d868698e22c0fdd7220eaced0f

Typo fixed | 2018-09-22 13:28:37 | 63e3896d85f827f2e403ffd25593ac5d9af54715

Fix typo in deprecation message of JavaFx dispatcher | 2018-09-20 17:10:30 | 39a2c559b538b8681c0724d5ec3ee6058af4e1c3

Cosmetic fixes | 2018-09-20 08:25:56 | 2dd53204e7047e970f145281c11a9c834021b3a9

Improve HandlerDispatcherTest, check that jobs are actually executed | 2018-09-19 11:30:51 | 847eba7c935ed784e918d976c9c43464179a2df9

Reknit guide, fixed TOC in Knit with comma & verify mode in example-context-09 | 2018-09-19 11:49:42 | bca98f4e9ea3c485c8691209be32fee487f812fe

CoroutineScheduler: fixed race between createNewWorker & shutdown for tests | 2018-09-14 12:17:12 | 241e74e6a2cdadaa2753f40a326c732e95fac2d0

Fixed sporadic test crashes related to withTimeout and children

- The bug only manifested when withTimeout coroutine had children working
  in a different dispatcher
- A separate stress-test that reproduces this problem with much higher
  probability | 2018-09-16 12:31:13 | fa9586bc283d60427ad3e9162de7962da4b0ec1d

Updated dispatchers references in readmes and docs | 2018-09-11 16:16:49 | f189cec57d7d0751464a5939f1bbcbd32e15d7c0

Dispatchers are renamed and grouped in the Dispatchers object

* Dispatchers.Default — a default dispatcher for background asynchronous tasks
  (currently backed by FJP commonPool, a new dispatcher in the future).
* Dispatchers.IO — a dispatcher for blocking background operations (#79).
* Dispatchers.Main — a dispatcher for Android Main Thread (#533).
* Dispatchers.Swing — a dispatcher for Swing Event Dispatch Thread.
* Dispatchers.JavaFx — a dispatcher for JavaFx Application Thread.
* Old dispatchers are deprecated, CommonPool is deprecated, too.
* awaitPulse() in JavaFx and awaitFrame() in Android are top-level funs.
* Introduced HandlerDispatcher, SwingDispatcher, and JavaFxDispatcher types
  in the corresponding UI modules for type-safety and future extensions

Fixes #41
Fixes #533 | 2018-09-11 15:42:03 | dc29b071d4784e3739f89223ced2333ecd5408ad

Fixed hangs during thread termination in IO dispatcher

Fixes #524
Fixes #525 | 2018-09-11 12:38:14 | 750d468b3281570910d0cd4000d4e29702b25020

Invoke handler using invokeIt to avoid JS bugs | 2018-09-07 11:36:05 | c430e0797e87af77f812bbcfb8751e4a0e31ffc6

AtomicFU 0.11.5 to fix Windows compilation | 2018-09-04 14:58:45 | 61abcd224a13f674bffae096afa7250de262df87

typo fixed | 2018-08-24 12:24:02 | 1a1237083b14d5de8f13f66b7a4ba6d9e26183d7

Introduce IO dispatcher to offload blocking I/O-intensive tasks

Fixes #79 | 2018-08-23 14:27:19 | f5e67ba597acdfb90ef84d29e4d6028f3f17a6ba

Introduce ThreadContextElement API to integrate with thread-local sensitive code

* Debug thread name is redesigned using ThreadContextElement API
  where the name of thread reflects the name of currently coroutine.
* Intrinsics for startCoroutineUndispatched that correspond to
  CoroutineStart.UNDISPATCHED properly update coroutine context.
* New intrinsics named startCoroutineUnintercepted are introduced.
  They do not update thread context.
* withContext logic is fixed properly update context is various situations.
* DebugThreadNameTest is introduced.
* Reporting of unhandled errors in TestBase is improved.
  Its CoroutineExceptionHandler records but does not rethrow exception.
  This makes sure that failed tests actually fail and do not hang in
  recursive attempt to handle unhandled coroutine exception.

Fixes #119 | 2018-07-25 09:22:46 | 7587eba96a230f3f0ab0c04f52723e926f7a845d

AtomicFu version 0.11.3 (bug fix) | 2018-08-23 11:05:46 | be065fd2c566acf4f600de23d45d70cf9f2144bc

Introduce ExecutorCoroutineDispatcher instead of CloseableCoroutineDispatcher

Fixes #385 | 2018-08-15 10:03:23 | b517f0529fe4a2066ca8ac985c08206cd4587758

Add workaround for K/N bug | 2018-08-22 09:37:41 | bbe6d8a915b2be9c0a7ff9d92677c878718fa219

Implement withTimeoutOrNull via withTimeout to avoid timing bugs and races.
Remove deprecated API

Fixes #498 | 2018-08-21 16:45:29 | 988eb26469819f7cc8cb1ba26c3a76a6805e8387

Provide API to create limited view of experimental dispatcher

Fixes #475 | 2018-08-15 09:06:06 | cac1a0f13c5b81cdfa3c2d1020e8d86ac8cd0029

Additional debug output for CoroutineSchedulerStressTest | 2018-08-10 17:38:41 | 21ce9c066c752adf4db1e8388a9d38a390b5f08b

Execute EventLoop#invokeOnTimeout in DefaultDispatcher to allow busy-wait loops

Fixes #479 | 2018-08-08 15:04:59 | e90cdb031ffab87d9f7671cc9e856b2a9534d59e

Scheduler tests fixed:

[temporary] Ignore flaky tests
Fix benchmark compilation
Fix WorkQueueStressTest | 2018-07-26 17:02:03 | 9542f1ce4f84d08ef2b33d14ce3ae79a8a93fa86

Scheduler improvements:

Fix (one more) ABA problem in tryUnpark
Global TaskContext to speedup CPU tasks
Documentation improvements
Stress tests constants tuned to be more robust and faster on local machine (and when ran from IDEA)
Style fixes | 2018-07-26 10:57:04 | e50fb89c4e80d7accb9bdfff3ce54c59d2857c26

Scheduler tests infrastructure

Support "kotlinx.coroutines.scheduler" property to change DefaultDispatcher
Updated scheduler shrink test with custom idleWorkerKeepAliveNs config,
so that they execute faster
Fix submissions from another instance of CoroutineScheduler
Run JDK16 tests and tests under new scheduler tests only during nightly stress test | 2018-07-20 20:57:57 | 5c7454b8a872d925f206f418c16d9880bf23e25f

Removed wrapper from LimitingBlockingDispatcher by introducing TaskContext | 2018-07-23 09:38:06 | 216e4d30a2b225361a4f3e59465c079a0f116379

Fixed ABA problem in parkedWorkersStack and other stress improvements

* Workers are now numbered starting from 1, zero is used as sentinel
* Workers are lazily created (no threads initially)
* Close/shutdown of the scheduler also clears state so that subsequent
  rogue attempt to dispatch anything fails.
* Work stealing is more predictable. It starts at random index but
  then goes linearly via workers array. | 2018-07-20 20:25:58 | db22e4023442341d39d0c3797de73e74efb25882

Scheduler cosmetics

Stealing logic cleaned up a bit (mostly style)
Update worker thread names when worker threads are terminated to maintain
consistency between their index in array and name;
Improved debugging info (toString)
Merged yield and spin counters, parkTimeNs is in Int | 2018-07-19 11:12:31 | bba6e8918e32d521109583a9024b3d5e82da53f5

Improved management of parkedWorkersStack in terms of ABA/concurrency;
Also includes documentation, naming and packaging fixes | 2018-07-18 10:12:31 | 1d3b0191ecbf498965d81257c80ad6f87e583552

Improved tasks dispatching:

Merge blocking and created workers into single state variable
Replace j.u.c. queue of parked workers with intrusive stack to support shrinking and increase performance
Replace j.u.c. global queue with Michael & Scott queue which supports conditional polling
Poll for blocking tasks from global queue when CPU token is not available
Make last ditch effort before thread termination
Idle reset on requestCpuWorker | 2018-05-03 11:52:00 | 18a91347466560b63144d0097f248d9edb029780

Fix ordering bug in QuasarTest | 2018-07-25 16:16:23 | a608a335ff57e969f69985c43ee70c30da1dba8f

Get rid of compiler bugs workarounds | 2018-07-25 13:27:14 | 5f73827f3131332018c02650057eff4aa2886ae7

Channels concurrency improvement:

Make close, cancel, isClosedForSend, isClosedForReceive and offer linearizable with other operations
Fix bug when send operation can be stuck in channel forever
New concurrency tests

Fixes #359 | 2018-07-17 15:39:20 | ea651aa5badbc20f911c844db2a57ea4f68fc38b

Access to PlatformImpl in JavaFx dispatcher, on Java 9 it's an internal module which should be explicitly exported

Fixes #443 | 2018-07-20 12:07:28 | 5557245405f965ec5ca26083301559066a1be147

Minor grammatical changes to the Coroutines guide

Minor fixes for the English grammar in the coroutines guide to help ensure new readers understand coroutines properly. | 2018-07-19 20:01:40 | 977ada1e74e0ae9b011fb219891433a6d36e9ef3

Validate FJP.commonPool parallelism to avoid pathological bugs

Also always construct private FJP pool if
kotlinx.coroutines.default.parallelism is explicitly specified.

Fixes #432, #288 | 2018-07-11 10:36:07 | 1e12210cd2bccdfd866b1c9649cd19e40663fb5f

Change order of handlers in JobSupport and CancellableContinuation
1) Invoke handlers before dispatching in CancellableContinuation to make behaviour timing-independent and Unconfined doesn't produce unexpected results
2) Invoke onCancellation -> handlers -> onCompletion in Job to make behaviour timing-independent

Fixes #415 | 2018-07-03 08:11:21 | b10287ecb35463f471ac120367a0a4f56f6b5c49

Typo fixed | 2018-06-26 11:58:39 | 7981999a156918abced59de696b02d9bc731f808

IO: fix joining and continuous writing byte array interference | 2018-06-13 16:49:45 | 9faa0395afd26a3c29cd67de5dce635a7882cf5c

Update ThreadPoolDispatcher.kt

Fixed typos. | 2018-06-09 17:01:53 | 517a2592077b067032d6c0379226d0467d7662f1

IO: fix continuous writing session interfered with joining | 2018-06-01 14:23:47 | e15eae8e3537080a82078873d762ad9de61f50f4

Typo fix | 2018-06-03 23:34:22 | e185ed6f918a1df082832c9059a091505b9a5cf9

Introduce deprecated ReceiveChannel#use to preserve backward compatibility with SubscriptionReceiveChannel, fix reactive samples | 2018-06-01 12:30:34 | 313978cf6b3901b1d7fbfb5d1f688c068a072c09

LockFreeMPSCQueue optimized & fixed

* no need for REMOVE token to hurry up GC
* Placeholder logic is fixed to avoid potential data loss on wraparound
* Stress test for resize/copy added | 2018-05-30 18:58:02 | c22a1c748e93db6e7d4e73f9118e8435edbeb698

Leaking handles in awaitAll are fixed | 2018-04-28 16:22:29 | e0b6db04b3bd86e942bc7e40081a82aedd8fd200

Delay bug fixes:
Invoke clearTimeout on cancellation in JSDispatcher
Remove delayed task on cancellation from ThreadSafeHeap on cancellation to avoid memory leak | 2018-04-26 13:03:40 | cd00643b92c9698ca728f92a66f52b30b3811d05

Documentation for debug property values | 2018-04-11 19:21:23 | 590c8889c2bb5341f15ee20e440c5599342fe34b

typo fixed | 2018-04-04 06:59:33 | 905a512625ad96dcd45c789f983babd93dfde011

Add extension to ExecutorService to return closeable CoroutineDispatcher

Fixes #278 | 2018-03-20 19:28:52 | 26f4b9ecd1bdd03299b668541f7c7c9ecaf9ab7c

Debug toString for channels

Fixes #185 | 2018-03-06 10:37:42 | e4b6f09af7c0d0b6963fa8611e867ff3292fad0e

rx-example: Added application plugin & fixed to use runBlocking | 2018-03-05 14:58:59 | 00560e8b0add1628bd0a32202b6f3cc301b35af3

Use NodeDispatcher on ReactNative

Fixes #236 | 2018-03-05 09:01:07 | ecc68f13141d1353aa2bb1d027a077e0fd7be4fb

Check for undefined `window.addEventListener` when choosing default coroutine dispatcher.

Fixes #230 | 2018-02-10 19:35:58 | 54d57e0c1fff22fe1d72c762f2bdbf01995395ca

Update README.md

Minor typo and typography fixes. | 2018-02-04 00:30:58 | 7dd6b66eced47e4ddf0b2c76c974ac19612b827c

IO: fix error propagation in blocking adapter | 2018-02-02 14:18:47 | f0c1d99e2c5c5978da7ace9d58c61a5648ed7687

Update coroutines-guide.md

This tutorial suggests just Async suffix:
https://github.com/Kotlin/kotlin-coroutines/blob/master/kotlin-coroutines-informal.md#asynchronous-programming-styles
Also, there was "of" instead of "or" | 2018-01-29 17:39:02 | 7e94e70734f6e01b0522d11071e6825879a221e7

runBlocking is improved to properly support specified dispatchers,
so that `runBlocking(UI) { ... }` can be used outside of UI thread.

Fixes #209 | 2018-01-29 15:07:21 | cb78787638039096804bc1b97031bcb9801c0547

Workarounds for KT-21968 to fix JS tests | 2018-01-24 20:31:22 | dfeba242b9e328f7528507f9349623671a00333c

IO: fix joining sequence, avoid infinite joinTo suspension | 2018-01-23 20:16:54 | d1842c6301d8debca8509809d473ce7e889b1d7b

IO: make reusable cancellable continuation implement DispatchedTask | 2018-01-12 15:46:22 | 4d01f7ec3b33f7633f3737a5ab3a3fc90703f57f

JS: Introduce Window.asCoroutineDispatcher and use custom queue in
Window.awaitAnimationFrame to align all animations | 2018-01-13 08:20:32 | 1867f6de0fb39077d0cb13fdc0400dd4568f717b

Actually fixed startup/shutdown of DefaultExecutor for tests to prevent
thread leak. Includes test-case. | 2018-01-12 15:28:24 | 9483301695f4c0784d663238ecd0ef04bbfcbea3

MPP: Debug toString should not depend on kotlin-reflect | 2018-01-11 16:04:12 | b79277b4fab5353680445f36dd9b19a740828203

IO: Use TestBase in all tests and fix leaking threads in tests | 2018-01-11 10:48:19 | c45f5fa3b636d66b824351c8d8d9368b8ee4e37f

MPP: Ported DispatchedTask perf improvements to JS and more code is made common | 2018-01-11 09:39:36 | f29203c158a526f90ae8574abfc1ba6dd5249262

Performance: Remove DispatchTask, store value in DispatchedContinuation | 2018-01-10 13:25:25 | f2239e191f55883486d5ce04ffb0c6f75cdc3468

Update coroutines-guide.md

Correct `Dispatcher` spelling | 2018-01-08 13:56:54 | fa13beba79e6ebb68588ba2167b67a77196907d3

Optimize creation of DispatchTask for cancellable continuations (fixed) | 2017-12-28 09:21:14 | bdf23f28c425ea391baa7ddbc3ba012d15e6dfa5

Optimize creation of DispatchTask for cancellable continuations | 2017-12-27 22:09:43 | ac48070de5e20b727b6d9ffd5cc7c259426fb6fb

MPP: DefaultDispatcher internal impl class renamed to JSDispatcher | 2017-12-27 10:14:54 | a919827885289271a6c598ab47fdf4434a8e0da3

fix typos | 2017-12-24 19:55:06 | d2d42ea802b54d2ede23f3edf3c18521ae46a3e9

IO: fix accidentally used tryResumeWithException | 2017-12-06 14:09:01 | 9ef4e0c05168acdb2c955079e2ee857cfec9de06

IO: fix spuriously hanging pipe tests | 2017-12-05 12:41:42 | 4adac45480b33664d79b24f7a779e7d4c1da68b1

IO: fix joining with different write byte orders | 2017-12-05 09:35:56 | 8af8937a34e893661dfe15f9be598eac50b101df

IO: fix infinite writeSuspend loop caused by auto-resuming flush | 2017-12-05 09:27:09 | e6764086ef4a03ec610245740b379f5da617224c

Bug fix: start hangs on lazy coroutine with attached invokeOnCompletion | 2017-11-30 13:41:47 | 5610e1df2eb3f67be8b45633b5d6ffbf73ec6bb8

Add DefaultDispatcher on some reactive operators | 2017-11-29 21:12:35 | e19ee04ca72316f9d67a58d35b8be398b059f1f5

IO: fix too expensive joinTo fast-path | 2017-11-23 09:39:27 | 060f36a06d341f43c0f9e77fd6706bf71f94972c

IO: fix typo in test name | 2017-11-20 08:43:26 | 9a6ca1a006debfa08392027508d03a141ae53841

Introduced ReceiveChannel.cancel method;
all operators on ReceiveChannel fully consume the original channel
using a helper consume extension, which is reflected in docs;
removed `suspend` modifier from intermediate channel operators;
consistently renamed channel type param to <E>;
added two versions for xxxTo fun -- with MutableList & SendChannel;
added tests for all channel operators;
dropped/deprecated ActorJob/ProducerJob, fixes #127 | 2017-08-17 18:01:33 | b555d91193d9e76710062451cf94a94d14820e98

IO: fix race in closeWaitJob of JoiningState | 2017-11-17 16:30:22 | 47d92bafe90d899dfb53cd0f8bf7eae75504047e

IO: fix accidentally missed it | 2017-11-17 16:29:49 | d42bdadc8520ec490d5b37f5f160b54d4541d2f8

IO: fix race in ByteBufferChannel.write(lambda) | 2017-11-17 15:39:03 | 7bf4fa9e3b19a8200450fabe396a0ff854615596

IO: fix joining of already closed but not empty channel | 2017-11-14 11:52:32 | 9e9929d376d2b92cd5fda2f21f7cc1eb51f66ca8

IO: fix lincheck dependency | 2017-11-10 20:22:53 | b94ce42827dc5f9294f19b99da356ad585fb01ea

IO: fixed awaitClose and copyDirect | 2017-11-10 09:22:23 | 373d590e103f3203f61b2fb93b3b82bcce1de13e

IO: fix race in joined flush once again | 2017-11-09 18:18:05 | 8e9138ca4a297189f49bece8e739b6584f69e061

IO: fix joined close/flush | 2017-11-08 13:50:13 | 2fdb5aa4867b60f7c659cf4d950babfd2a43a67a

IO: fixed joined channel flush | 2017-11-08 03:15:39 | 625c1fefa57f95af2b723b7c7e3b1a5319c69faf

IO: fixed joined ByteChannel close | 2017-11-08 03:11:53 | ca8762b2f6a1043103a45153357a5f9e5dc010af

IO: fix writeByte BufferOverflowException

it is important to setup buffer's positions again after suspension
it is not the case if we don't hold writing state during suspension | 2017-11-07 16:42:15 | bab9f7927ca780b242c794578c02ddf63db40375

IO: fix race in readSuspend

consider state change:
writer: IDLE(empty) -> !do write -> IDLE(buffer) -> !close -> closed = C
reader:  !suspend -> resumed -> closed = C -> [here]

here reader can see that there is closed state however to see published
written state it should read state again rather than simply use already
readen state to get happens-before guarantee | 2017-11-07 16:18:16 | 32c90b169d05bd372317f90ae5ad511bbcb05bc5

IO: rewrite if/else/return code to identical

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 11:23:34 | fde1a646fe5a60c8aa211764d63527ec429672c3

IO: eliminate tail suspend calls in when blocks

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 10:54:47 | 4eccfba8d4cbe55ce49ac7b70c40eea1d0adf7c9

No Job in newSingleThreadContext and newFixedThreadPoolContext anymore

* This resolves the common issue of using `run(ctx)` where ctx comes from
either `newSingleThreadContext` or `newFixedThreadPoolContext`
invocation. They both used to return a combination of dispatcher + job,
and this job was overriding the parent job, thus preventing propagation
of cancellation. Not anymore.
* ThreadPoolDispatcher class is now public and is the result type for
both functions. It has the `close` method to release the thread pool.

Fixes #149
Fixes #151 | 2017-10-20 09:36:56 | d9ae2bcb88403e0854b895ba46c2417b4c0a4752

run uses cancelling state & propagates exceptions when cancelled

* When coroutine that was switched into a different dispatcher using
`run` is cancelled, the run invocation does not complete immediately,
but waits until the body completes.
* If the body completes with exception, then this exception is
propagated.

Fixes #147 | 2017-10-20 08:42:06 | bcdd8e17fed40097f9bb8fdb3e218f95ff8603a9

Exception propagation logic from cancelled coroutines is adjusted

* When cancelled coroutine crashes due to some other exception, this
other exception becomes the cancellation reason of the coroutine, while
the original cancellation reason is suppressed.
* UnexpectedCoroutineException is no longer used to report those cases
as is removed.
* This fixes a race between crash of CPU-consuming coroutine and
cancellation which resulted in an unhandled exception and lead to
crashes on Android.

Fixes #152 | 2017-10-20 06:00:50 | 6aed878a67e6f707e6c3afb0879beb8822a95d6f

Fixed Reactor docs (Scheduler.asCoroutineDispatcher) | 2017-10-07 19:58:40 | 8348b8c31d5b07541bd3d268ca2a186b0fe1ad6f

Failed parent Job cancels all children jobs, then waits them

Also improved debug output a little bit | 2017-10-07 12:44:48 | a36ab94253bb9945c6377eb43db0cb1071019c40

IO: eliminate race in close

I knew that I'll hit this bug anyway. Here we MUST flush twice as
flush at read suspend is not enough. If a writer closes then the first
flush does flush and it closes so all readers will see all pending data.
If a foreign thread does close then the first flush is makes no
difference however the second is required for proper cleanup and
to do tryTerminate | 2017-10-04 18:34:18 | ad68c06c1200f2038c26adeab2abf801a2a2114b

IO: fix verifying pool usage

buffer view doesn't hold original pool reference to make
pool chaining working | 2017-09-29 15:18:00 | ccf8dde980a4701b9cd30e1df23e5cbefdd93b53

IO: fix writing byte packet | 2017-09-28 07:58:15 | 754a19b188dc6d486d73b8e3a2f0c483c3f88f9b

Documentation for DefaultDispatcher in the guide | 2017-09-29 18:39:03 | 66f018c489c6b0ec0831fa9953db34da3edff5f3

DefaultDispatcher is introduced | 2017-09-28 11:27:05 | c0d559b594fce802f1d1be9a6feef49019d17160

IO: fix ByteWritePacket.writePacket size update | 2017-09-17 19:48:26 | 5ca0d12c1e8a9672d40fe83cd31d1b2426f397e7

IO: fix writer scope type | 2017-09-11 10:06:54 | ea3a418f84f3731e92658cedfa11878a8828500c

IO: fix byte channel readX operations return -1 during close+flush

Read operation should try flush before return -1 if closed because
the close operation setting close status first then do flush
so reader could see closed status but not-yet-flushed byte counters | 2017-09-11 07:31:08 | e4d3ce750ed8b864a435fb0926d0d77e9c02b208

IO: add more byte packet tests and fix few bugs | 2017-09-06 18:50:51 | 5feaf6973c23fae3c5a8df64748e2181c50dd0d6

IO: fix delimiter lookahead | 2017-09-06 15:52:04 | 1cc86083e7be17ce53f7c80cfa6ba67e8569e33e

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 99cdb380bf6391db7e7d08e8673c627c554074d8

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 776b370d58883e9bce0c309ebb4919ef4cdac13c

IO: fix byte packet write buffer leak | 2017-08-25 08:39:00 | 974cbb3b21b8d7613c41ee2221ce435e347b068f

IO: fix byte channel close with error buffer leak | 2017-08-25 08:06:59 | 24b040f1345db27b45589a975daab45bf9325494

IO: fix CR-only line endings processing + tests | 2017-08-23 11:39:41 | a9a936d1a325ee0baf36df444414e1e17ac539da

IO: rename writeStringUtf8, fix implementation + tests | 2017-08-23 09:26:18 | fbcba264a37580b5c47f3314395e5146afb38287

IO: fix copyAndClose + tests | 2017-08-23 09:11:55 | fc84a634ff9a1acca04e09fa5a031b904c5c8838

IO: byte packet readLine support + bugfixes | 2017-07-26 09:59:16 | 0b12ffc0178844e813223039adf5d7510703485d

Fixed bug in LockFreeLinkedList (invariant & lock-freedom violation)
Migrated atomic ops to AtomicFU library for ease of code maintenance
Implement lock-freedom testing in LockFreeLinkedListAtomicStressLFTest | 2017-08-10 18:09:26 | 7eb41efbacd498704f25465e2a58f4892c16aa32

Typo fixed | 2017-07-24 13:42:34 | a448903dcac25e450d87c49705e7a6693a300d29

Use CompletableDeferred in the guide section on coroutines;
fix (reknit) broken links to factory functions that are now top-level | 2017-07-21 22:00:30 | 256812a1c09511744575ed3d2c64fec27979f391

More documentation on CompletableDeferred states and style fixes | 2017-07-21 15:04:23 | 8e2ae9964614e35295a8d695114b00c35f5fc755

Better debug strings for continuations | 2017-07-12 12:22:21 | 69d9c852289f1a4a9ffe107dc75cc71871cfe34e

ObservableBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 10:16:30 | ed6985459318209be084ff807676cb722387fb6f

PublisherBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 09:58:44 | 58246ca7e7727632ba50c41d0314df47ba9e3fc0

Fixed IllegalStateException in select that concurrently selects, which
was due a problem with Job concurrent cancel and dispose of handle.
The bug was introduced by addition of Cancelling state for a Job.

Original stack trace in select was:
java.lang.IllegalStateException: Check failed.
	at kotlinx.coroutines.experimental.internal.LockFreeLinkedListNode.remove(LockFreeLinkedList.kt:236)
	at kotlinx.coroutines.experimental.JobSupport.removeNode$kotlinx_coroutines_core(Job.kt:734)
	at kotlinx.coroutines.experimental.JobNode.dispose(Job.kt:995)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.initCancellability(Select.kt:294)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.getResult(Select.kt:273) | 2017-07-11 09:50:00 | e9f64491787433b3d53ad5800456524820058d5f

typo fixed | 2017-07-10 10:46:13 | d28cc872fb7815b51ceb7c84a4e77117fce380c7

typo fixed | 2017-07-10 10:44:07 | 8b0b07ab81f12bc605462a6a1333b61abce547cb

typo fixed | 2017-07-10 10:43:20 | 93f7e8e22019643caaf14ae480c05ab0a349064d

Bug fixed on waitTimeoutOrNull (was flaky testOuterTimeoutTest) | 2017-07-10 10:38:54 | 769d48217f8787c7f64c07da6e53c27b2d703274

Refactor DispatchTask to reuse it for dispatchYield | 2017-07-10 10:16:20 | 2a93646a8054ce7819e9bdbff8d28849a19e874b

Fix SecurityException when trying to read "kotlinx.coroutines.debug" prop | 2017-07-10 07:15:40 | e824eaaab9d053ff0f2cc028c7413bb83adcacc0

A fix & optimization for select impl helping scheme | 2017-07-05 06:53:29 | 907074f1f63871ed29feab3173a2e38b30d8fbb6

Reactive tests fixed for cancellation logic change | 2017-06-26 11:25:56 | 7a7b00938934ef7d0855eb24ec93a06d0b0c97e7

Fix typo: debugging more -> debugging mode | 2017-06-24 21:03:35 | ed5ed49913498b4e880415d2f0fb9004e20e1b5a

Typo fixed | 2017-06-23 10:27:02 | 6c18dfd15f6e1703db57531422bc0df3cb7d08ff

fix typo.

somethine -> something | 2017-06-18 07:37:59 | 81a6f23ca68d7ed37f36dcb966fe74e3bc53de57

Typo fixed | 2017-06-09 17:25:03 | c3c2f3269220f5d7ae20e7592ca1253061b50a95

CoroutineExceptionHandlerTest fixed | 2017-06-09 15:59:25 | 866521b83ed0676d0203dec35de5fb797bc9a59d

SimpleSendReceiveTest is fixed to account for close conflation | 2017-06-06 11:36:38 | 9ff32644381bf1a692d9a935170a9f7b7023f244

Fixed lock-freedom of send/offer on closed channels and related bugs.
Conflated[Broadcast]Channel hang of concurrent offer/close is fixed. | 2017-06-05 14:04:39 | e6e8ce8d46cee273e00ee130334239880734dc2f

Integration readme title fixed | 2017-05-17 11:59:49 | 0c2e25d7c38f50bd3c9866ea1fc2c12d5d74251a

launched jobs and await can be cancelled while waiting in dispatch queue

* suspendAtomicCancellableCoroutine function is introduced for funs like
  send/receive/receiveOrNull that require atomic cancellation
  (they cannot be cancelled after decision was made)
* Coroutines started with default mode (CoroutineStart.ATOMIC) using
  async/launch/actor builders can be cancelled before execution starts.
* CoroutineStart.ATOMIC is introduced as a start mode to specify that
  coroutine cannot be cancelled before its execution start. | 2017-05-11 17:15:18 | a74eb5f8b08e84f904e75aa71da4547c9178da8d

Fix withTimeout/OrNull bug with spurious concurrency on cancellation | 2017-04-20 16:23:18 | ca9d5be31a30c5f6a20875438f9ae40db4183f4c

Refactored ThreadPoolDispatcher to reuse code of ExecutorCoroutineDispatcher | 2017-04-18 12:28:35 | f04f51d5b05a0aec7c97acc202d180096a095fbf

equals/hashCode for wrapper CoroutineDispatcher impls | 2017-04-11 10:50:03 | 30dd5c129c493ca7b1a3b2b80437e8a7ec68f3ec

Starting coroutine in UI event handlers without dispatch in UI guide | 2017-04-07 15:06:22 | f724f6e2fe7c20cb48b69cd7b19b2658313231e4

Nicer toString implementations for CommonPool & Unconfined dispatchers | 2017-04-07 07:35:28 | dc9fd1c2d18da2f23d9907148b4674cda6418e49

Few minor docs & build fixes for reactor support | 2017-04-06 19:15:35 | 523516abd2023f8d968d389b32dee713130a9f83

Merge pull request #53 from mkobit/patch-1

Correct typo in coroutines-guide-reactive.md | 2017-04-05 09:41:56 | 7676e2239947273c6cbb4cb77536042bd9f2ce43

Fix repository urls

need to be reverted once bintray will fix jcenter sync issue | 2017-03-23 14:45:39 | 78fd3cb8932410af9beab4effc04bdeea4343732

Merge pull request #42 from jakiejj/master

fix typos in comments to Nio functions | 2017-03-20 07:16:24 | 9ef792fec6775bb5cdb08c84511488f324db3322

fix typos in comments | 2017-03-17 20:48:39 | 4d927c76488b96abaae7ba003f8064ad84b8334e

Typo fixed | 2017-03-14 17:39:50 | 81a5b7144484dcc8ebc89cd98fd9bd8a2d45afbe

startUndispatchedCoroutine is renamed to startCoroutineUndispatched for consistency with coroutine intrinsics | 2017-03-14 16:39:26 | 4638d79097a3d5b0c1b32c1e468ad723cc4b2bd9

Fixed bug with sometimes missing `onComplete` in `publish`, `rxObservable`, and `rxFlowable` builders | 2017-03-13 09:03:35 | d14a3901f365f622d9a7ba96fc00900011c9c009

Scheduler.asCoroutineDispatcher extension for Rx 2.x | 2017-03-10 12:06:01 | a1fe3da17907024afa50a35cbfcc72639d62bf78

not -> no typo fixed | 2017-03-09 09:57:57 | 228d084bfb87f967e216b84029b58649fcbe7472

Executor.toCoroutineDispatcher is renamed to asCoroutineDispatcher | 2017-03-09 09:03:39 | 38b5ea18e36f1a53d4cde27bf3fd21522727cbbb

Fixed dispatching logic of `withTimeout` (removed extra dispatch) | 2017-03-02 21:15:21 | 43d831f61f33262dcb4621069451d1699898d1cb

More links and typos fixed | 2017-03-01 14:21:48 | cc63363ead9d82f4e246a319ca3e0cb9f15e3a14

top-level readme links fixed to produce & co | 2017-02-22 12:04:28 | 40e89f689f89ae643f68c68efc57aebd8f8284ed

Jon.onJoin select clause is implemented, lazy onAwait/onJoin & dispatch fixed | 2017-02-22 11:56:58 | d84dbc2d75927fe8446098a225a3fbb884683bde

startUndispatchedCoroutine utility functions | 2017-02-22 06:53:49 | ee88fbef2d78e4b25f741efffabf4756bff8e7f3

buildChannel deprecation template fixed | 2017-02-20 12:53:30 | de8b9e9b336491ff0dbf107fe35d9efa030d92d3

Merge pull request #31 from gildor/on-completion-deprecation-fix

Job.onCompletion deprecation template fixed | 2017-02-20 12:49:41 | 85923e2de75ed522903cc3d64aef2ad178c1cbf8

Job.onCompletion deprecation template fixed | 2017-02-19 13:26:29 | c8f9ca308abe963cafa5f676410402fc287cfa5a

Delay implementation in Swing, JavaFx, and scheduled executors is fixed to avoid an extra dispatch
CancellableContinuation.resumeUndispatched is introduced to make this efficient implementation possible
Additional documentation for CoroutineDispatcher implementors | 2017-02-10 10:30:38 | a198bad7365a508baf1041993e9a14007f9d5aa3

Doc fixed | 2017-02-10 10:14:35 | 8c8551e7dbea7c2467060c2d3c6aa1c54c721e68

Merge pull request #29 from cbeust/patch-1

Update coroutines-guide.md | 2017-02-07 17:52:01 | 4d821e3901d038f005850b38d1e4954506306383

Merge pull request #28 from erokhins/patch-1

Update 1.1.0-beta-37 to 1.1.0-beta-38 | 2017-02-02 19:24:36 | 40f69cf704e7b31cec9c8a935317d8c173e79623

Added deprecated (with error level) plus operators on Job and CoroutineDispatcher to catch potential problem with their incorrect use at compile time | 2017-02-01 15:43:32 | 79a2868295127b81056f66d644da72db5a40d772

Merge pull request #27 from tairrzayev/readme-fix

Fixes the typo in the coroutines-guide.md | 2017-02-02 06:15:26 | 9d844fa1733f83e5e1b85c3e762a69729d3c5ef2

Dispatchers default behaviour is changed to schedule new coroutine for execution later.
Job.getInactiveCancellationException is introduced.
yield is cancellable while it is waiting to executed.
core tutorial is expanded. | 2017-01-29 18:58:33 | 7cf452eab59cdca570227f071cba2da374f77110

Finer grained control on debugging facilities | 2017-01-24 07:29:53 | aecb9aa1606b79243c8e93221de9713c164ce015

Added context parameter to CoroutineDispatcher methods, implemented Executor.toCoroutineDispatcher | 2017-01-23 13:47:20 | 67891d867da022d608d4589859002f256d9a313e

Fixed initialization of Job with parent (initParentJob), fixed handling on uncaught exceptions in standalone coroutines | 2017-01-20 09:19:52 | 58a7add417403811e822a4f6f7689ae3fd0e2018

Minor: fix version of maven-deploy-plugin, fix pom warnings | 2016-12-21 17:21:30 | c4ad15fc6246b7496d610da7419441020dfe1c56

Merge pull request #6 from hhariri/patch-1

Fixed packaged names | 2016-07-27 07:04:12 | c6993089412fbc491ddeb0a71b57e67bf31e21d6

Fixed packaged names 

On the repo, the package names don't have the suffix -1. | 2016-07-27 06:03:41 | 1abe89716c093c9e010a45a5235da7f9b50eea17

Rewrite assertions so that they are checked only in debug mode

* Make sure assertions are absent on native and JS
* Only print full toString for Job in debug mode | 2019-07-02 13:21:22 | 583d39dd4fe1d8f488df3e384901aa19f95166e2

Decouple asFlow from batchSize and move it to buffer instead, promote… (#1279)

* Optimize Publisher.asFlow and fix conflation
* Use channel.receiveOrNull instead of for loop iteration
  (it is more efficient)
* Calling Publisher.asFlow().produceIn(...) uses a single channel
  and is implemented via Publisher.openSubscription() | 2019-06-26 09:09:32 | 502610e7af760a73ea974f9c7cb75ec26a14d167

Unmute debugger test that were broken in 1.3.31, increase debug test timeout (slow CI), make shutdown more graceful by reducing timeout per thread (slow CI + unfortunate timings) | 2019-06-24 17:53:53 | bb97ffbb069774f2ba6ceb8e7dc4c6a2263ef9ff

Update "Shared mutable state and concurrency" guide with best practices

* Properly use structured concurrency in the example code.
* Also remove a special not on <= 2 core CPU, which is no longer needed
because default dispatcher has always at least two CPUs.

Fixed #1241 | 2019-06-01 11:18:42 | d94652feec64040c2c77af630fc4df30032e0efc

Enable R8 optimization of Dispatchers.Main loading

The developer still has to disable the FastServiceLoader manually
if they're using R8.

R8 is then able to optimize away the ServiceLoader and reflection
entirely, resulting in direct class instantiation and no extra I/O
on calling thread.

Fixes #1231 | 2019-05-30 12:17:51 | b9b7d828b18b2462817b6ed0c1a56233a4b6fcf4

Use identity hash code on K/N for debug strings

Fixes #1237 | 2019-05-31 11:39:08 | a3f150e66f7c47e0a0cefed4d9aa03199dff9e7f

Amortize the cost of coroutine dispatch using message queue in all JS dispatchers.
Use Promise.resolve and process.nextTick as dispatch mechanism for cold starts | 2019-03-01 11:25:23 | b7e1499b966175782cf2a5045c5bd3bb95a63b8c

Documentation improvements (#1229)

* Improve MainCoroutineDispatcher.immediate documentation
* Remove obsolete readme and package descriptions
* Clarify possible replacement of onCompletion parameter in produce
* Add paragraph about parent cancellation to async (Mention structured concurrency, but do not explain it there as the term should be easily googlable).

Fixes #1219
Fixes #994 
Fixes #787 | 2019-05-31 10:16:19 | c81dc91159dd1e33060ead8eeccc78df94c4649d

New flow builder: channelFlow (and its alias callbackFlow) and supple… (#1214)

New flow builder: channelFlow (and its alias callbackFlow) and supplementary ProducerScope.await method

Rationale:

    * Can be used in different context without breaking context preservation
    * Can be used to build concurrent operators such as merge
    * Can be used to integrate with callbacks
    * Is less error-prone than flowViaChannel because requires explicit await() call

Partially fixes #1210 | 2019-05-27 21:37:46 | b08d61c6c25d1a030ef37b6788b9ed3922520c85

Improve coroutine exception handling logic

  * Wrap exceptions into CE if parent cancels its child. This is possible because now we can be sure that no one is invoking `cancel(Throwable)`, thus if parent cancels its children, an exception is definitely handled.
  * Now exception is handled only once

First part of fix for #689 | 2019-05-17 08:55:17 | b0f6e05822f225afba43ed6e728669fe320146d8

Fix overflow bug in Flow.drop | 2019-05-20 07:45:03 | e35637a9faabb021d7a5efdc5509910cb499cd7a

Fixed Dispatcher docs

* Fixed typos
* Added reference to kotlinx-coroutines-test for testing `Main` dispatcher | 2019-04-27 19:32:57 | a2499a3ffe7522b8881a41ada45ce1779494be51

Ensure that there are no references to atomicfu in classes

* Updated to 0.12.7 version of atmoicfu with fixes.
* Added test that that is no references to atomicfu in any of the
  resulting class files.

Fixes #1155 | 2019-05-02 23:56:40 | 485eab1611433e49bd1d7c4a302b4825daf0d2e9

Knit: fix handling of backquote when making anchor reference | 2019-05-06 23:46:46 | 80039323d7ef284c3c4b851a6f3a91c46b3d7971

Knit: fix handling of backquote when making anchor reference | 2019-05-06 23:46:46 | b81f5f0ad73bc163a01a2ec88e2cb2e3d61927e1

Fixes kotlin-coroutines-test TestCoroutineDispatcher docs

Fixes #1163 | 2019-04-30 21:27:20 | 9614536ff093c99fc7febd5e31547ede8c8ceb5d

fix: broken anchors | 2019-05-06 07:26:16 | e3030e36945d79d7e54f0decaeef099a1720efcd

kotlinx-coroutines-test cleanup

    * Yield support in test dispatcher
    * Allow partial override of coroutine context
    * Code style fixes | 2019-04-25 21:07:56 | 9e5f9ab46506369f759d72e1195d9d7eb3ef1116

Flow operators: (#1132)

Flow operators:

    * switchMap
    * debounce
    * sample
    * Update RxJava version to 2.2.8

Partially fixes #1107 | 2019-04-24 14:14:03 | fe820bad2dc0743281f6ad130824114507a0a00a

AtomicFu version 0.12.5

This should really fix processing of class files

Fixes #1116
Fixes #1064 | 2019-04-22 18:05:50 | 26a14eef3c6fdf9480719dc1bc25b249b58bcb87

Fix atomicfu post-processing and dependencies

* Update to atomicfu 0.12.4, which fixes plugin operation with
  kotlin-multiplatform
* Remove explicit dependencies (plugins adds them automatically)

Fixes #1116
Fixes #1064 | 2019-04-19 15:51:05 | e1ac2e5c193654469468a04e4cadced3e3040e63

Add a period in the "You can get full code here" blocks and other small fixes | 2019-04-21 07:51:25 | 69c26dfbcefc24c66aadc586f9b5129894516bee

Knitted links and fixed minor style issues in test docs readme | 2019-04-21 08:21:59 | 445e798c3406c182337636026188fefd9f1cc950

Add README.md description of runBlockingTest, TestCoroutineContext, TestCoroutineDispatcher, TestCoroutineExceptionHandler. | 2019-04-21 01:10:09 | c0a8d1c078b6c3de49e3f6a4f77f2c713f47c7ac

TestCoroutineDispatcher code style cleanup and todos

* Kotlin libraries code style: explicit visibility and other style-issues
* DelayController.currentTime() is val
* Using atomicfu in place of AtomicXxx classes
* Added version to ExperimentCoroutineApi annotations
* Some todos are added for future consideration
* Fixed long overflows on delay (clamp) and added test
* License headers added to files
* Tests moved to an appropriate package
* Additional ordering tests using TestBase "expect" infrastructure | 2019-04-20 15:12:08 | d76456f1b6a92868e9f2f01309167003c94c66ca

fix typo: Coroutine"s"Context | 2019-04-17 08:58:42 | 43983505033a67719b0621572b868fc55f492016

Rework purity concept:

   * Purity is a way too polluted word and it is hard to tell what it means in Flow
   * Rename "purity" to "context preservation"
   * Prohibit changing the context, ignore only Job and CoroutineId (for debug mode) in SafeCollector
   * Reword documentation, add more samples
   * Add explanation for deprecated Rx-like methods | 2019-04-09 16:43:11 | d3cc25ff32a80de93ad5eaa912c8b54036c0f978

These tests had to be fixed | 2019-04-03 23:59:37 | da435fdb6dad35278b428b9407a22f4aa58c2f25

Unmute test that was failing due to JS BE bug | 2019-03-25 16:21:40 | 0d69e1353d9fcd5867fe74e0912d3f36dc7d8ea8

Merge pull request #1023 from Kotlin/debugger-sm-bypass

Improve stacktrace merge heuristic: skip state machine meaningless fr… | 2019-03-22 15:02:32 | 4ebc1306dd6e0a5929a9044bd65ff92edfeac8e0

Merge branch 'develop' into debugger-sm-bypass

# Conflicts:
#	kotlinx-coroutines-core/common/src/Timeout.kt | 2019-03-22 14:36:33 | 1ea4da4e510f68cb9311b140d2c2e13e8acefe6b

Rename CoroutineState to CoroutineInfo and improve its API

  * Rename jobOrNull to job
  * Replace coroutine with its context
  * Add check-and-act on isInstalled flag into synchronized blocks in order to avoid spurious memory leaks during uninstall
  * Replace WeakHashMap with Set to simplify debug probes | 2019-03-05 15:43:13 | 2496dc256712eb3bb282d3291cedc1497a09cdc8

fix documentation typo | 2019-03-14 13:49:36 | 325b0ad1ee98450e2598e2c0738a398e7b23d959

Add test about threading for immediate dispatch. | 2019-03-14 23:47:26 | a69f73613977bda2c25523cfcae93d6f74bd9cc0

Rename DispatchException to CoroutinesInternalError and make it an Error to better reflect its semantics | 2019-03-07 12:15:40 | 132c1e3f029610208607dcac4d55ed05f62d0642

Get rid of quadratic complexity during stack unrolling in debug agent in 1.3.30 | 2019-03-05 15:26:09 | e35baa43d379e9a7ee3eadc392665dc011268525

Make JobCancellationException copyable in debug mode

This simplifies trouble-shooting of "what caused cancellation", as you
can print out exception and see its recovered stack trace. | 2019-03-04 19:20:25 | d293639980d7a6141394dc8174180f221daa4787

Add operator invoke for CoroutineDispatcher | 2019-02-11 13:21:44 | 57540d452ef82207f14c4235ee690a4323a343fa

Hide cancel(Throwable), introduce cancel(CancellationException)

Job/ReceiveChannel/BroadcastChannel.cancel(Throwable) is now hidden and
cannot be invoked from a newly compiled code. This function had broken
semantics when used with an arbitrary exception. A safe replacement
is available in the form of cancel(CancellationException) where
CancellationException can be used to supply additional information
for debugging purposes.

Fixes #975 | 2019-03-01 09:08:43 | 0aad8f1274c4be7f02ac8f361eb0685d4b438243

Improve CoroutineDispatcher documentation | 2019-02-27 11:19:21 | 08f8214ddbcdbf0becc2b5264caf29080f04576f

Promote Dispatchers.Unconfined to stable API | 2019-02-27 10:16:00 | 9863de1401a90de61307c1ade952ebd7ac65a88a

Promote MainCoroutineDispatcher.immediate to stable API | 2019-02-27 10:02:03 | 4fc4fd555f784775360c464e178d7662291f5fba

Cancellation in consumeEach should dispose Rx Observable

Fixed bugs in MaybeSource/ObservableSource.consumeEach implementation
so that observable is disposed on cancellation.

Also optimized implementation of bridge function to avoid extra dispose
calls if possible (this is permissible by specification, though)

Fixes #1008 | 2019-02-26 16:03:24 | ae8a8743dd37a442c7882a04d1da0de367671ccd

Replace UI with Dispatchers.Main in CoroutineScope documentation

Fixes #803 | 2019-02-27 14:22:29 | b37c296f03ee38cd5cdf5091fa67a010c6a3f6d3

API Cleanup based on review

- removed asyncTest
- added pauseDispatcher(), pausDispatcher(block), and resumeDispatcher() API to delayController
- removed dispatchImmediately (the name was fairly opaque in an actual test case)
- added exception handling to runBlockingTest | 2019-02-12 02:46:06 | 8328a39b39d60fe4e44b6e1e5796d37ab02cbbae

Update coroutine test dispatcher to use structured concurrency. | 2019-02-11 23:40:52 | 9a8842956015a018ee4fa37631052fac82553d36

Make SupervisorCoroutine implement ScopeCoroutine

* Implement ScopeCoroutine in SupervisorCoroutine
* Do not indent scoped coroutines in debug strings

Fixes #915
Fixes #916 | 2019-02-20 15:31:02 | 8d506b3757777664e007b1287ce3c4cb943f4ae5

CoroutinesTimeout debug rule for JUnit 4 (#991)


Fixes #938 | 2019-02-20 14:00:57 | 2bdd4605e797a88019565938cf4a4daca92593a5

Reknit after fixing indentation in code samples | 2019-02-20 10:31:38 | 3785348e32e7180efe86862bc84da14d3631a98d

Update named arguments referenced issue

The issue previously reference was marked as fixed for one of the two problems it was about,
and a new one has been created for the remaining issue that is relevant here. | 2019-02-19 15:17:56 | 919284b159fec82ef2b6f4da9af5f88248e0713a

Obtain real stacktrace of running coroutines in debug agent

  * Capture thread of coroutine when it's transited to running state
  * During dump retrieve the stacktrace of captured thread for running coroutines and merge it with metadata-based stacktrace

Fixes #997 | 2019-02-20 08:43:23 | f18878f632dd28ad8ff847eb4f95e9ed50f373bb

Check that worker thread belongs to the same scheduler in dispatchers.shutdown

Fixes #990 | 2019-02-19 16:01:48 | 703a286e8b55d353b4ebc84320710562d627c96b

Add section about Android in debug agent readme | 2019-02-01 15:13:39 | a68376ceea89bc3599203a4c36e81cd177fc37cd

Additional documentation section about debug mode and stacktrace recovery.

Not included in a guide intentionally | 2019-02-01 11:54:06 | 418ba80a7bb0b8661823fbb325b7edac526ab7db

Call initCause during reflective exception copy in runCatching block to avoid DispatchException when initCause throws

Fixes #933 | 2019-01-15 12:18:43 | 3e4d808200e990e4b5c7e4755b23a5314fdb662a

Move debug example to a proper package | 2019-01-29 09:41:02 | c055f025f4fd3d3dc6a4ceecb798091b31f986e9

Migration to new multiplatorm plugin (#947)

Migration to a new multiplatform plugin
  
  * kotlinx-coroutines-core-[common|js|native] are merged into one core module with multiple source sets
  * Folder structure and readme are restructured
  * Publication process is patched to preserve backward compatibility with artifact names | 2019-01-28 08:34:24 | e50a0fa78aae052e128e8b17666e081e4dfc78be

Update CHM in test to containsKey for KT-18053 fix in 1.3.20 | 2019-01-23 14:49:17 | a672d5f58040f9a14661b157e085c63a7c8b2ff7

Replace old UI dispatcher name with Dispatchers.Main | 2018-12-31 13:52:33 | 8c071247dbe5928ebf5138471c1ac905c5de4018

Update coroutines-guide-ui.md

[Update]
- typo: what you might want to express here is `JavaScript event dispatch thread ` | 2019-01-08 16:01:55 | 66f0123b5fe98f861b46ef1400c8b11bc40c2ace

More idiomatic and readable example for coroutines debug module readme

* Idiomatically use suspend functions
* Idiomatic parallal decomposition with coroutineContext/async
* No GlobalScope
* Use less vertical space & more concise code to aid readability
* Link to full code file (in tests) | 2018-12-22 15:40:39 | b65dc7fe0f75b7dc76e84205c3b57c0aff09c269

Update CHM in test to containsKey for KT-18053 fix in 1.3.20 | 2018-12-22 13:38:36 | 4b60d013508c865dd8430f334e89481d93893ab1

EventLoop integration and reuse for runBlocking and Unconfined dispatchers (#889)

EventLoop integration and reuse for runBlocking and Unconfined dispatchers

* Event loop that is created by runBlocking or by Unconfined dispatcher
  is reused across the same thread to prevent blocking of the loop
* Semantics of runBlocking and Unconfined are fully retained
* DefaultExecutor also registers itself as running event loop and thus
  cannot be blocked by runBlocking
* Consolidates thread-local handling for native
* Also fixes thread-local memory leak on JVM (does not use custom class)
* Restore BlockingEventLoop class name for runBlocking event loop impl
* Internal API for custom waiting loops to be used by kotlinx-io

Fixes #860
Fixes #850 | 2018-12-21 13:41:39 | 51738243c980165ad4fb426105baf6e00d02f87b

Dokka links fixed | 2018-12-18 13:26:58 | 89d43afab3f1090a25697c1e8cebd7faac6612c1

Debug improvements (#900)

Debug improvements

* Rename printHierarchy to printJob and hierarchyToString to jobToString, introduce corresponding methods for scope to simplify scopes debugging
* Remove CoroutineState.job in favor of CoroutineState.jobOrNull
* Use runCatching in Continuation.toDebugString to avoid crashes on some Androids with R8 issue

Addresses #858 | 2018-12-18 09:47:50 | 115a13933adbce880a72c1653b7be94eba566202

Ignore exception on cancel/fail race in CancellableContinuation

There seems to be no other way to satisfactory fix the problem of
a race between cancellation on CancellationContinuation and
concurrent failure of the corresponding background process in a
way the distinguishes "failure from cancellation attempt" from
a "true failure" without placing undue burden on anyone who is
implementing `await()` extension function for various future types.

- Added testTimeoutCancellationFailRace that works as a perfect litmus
  test; being allowed to run for a while it reliably detects various
  problems in alternative approaches.
- Optimized CancellableContinuationImpl; merged its code with
  AbstractContinuation class that is not needed as a separate
  class and removed.
- Deprecated and hidden CancellableContinuation.initCancellability();
  it is now always invoked after the end of the block that was
  passed to suspendCancellableCoroutine.
- Deprecated `holdCancellability` parameter to an internal
  suspendAtomicCancellableCoroutine function.

Fixes #892
Fixes #830 | 2018-12-15 11:12:47 | 876e9bab95d34f311be030a0706497564f96d95a

Introduce test module with testable main dispatcher (#749)

Introduce kotlinx-coroutines-test module with API to set Dispatchers.Main 

  * Dispatchers.setMain and Dispatchers.resetMain extensions
  * Use real factory in HandlerDispatcher instead of using initialized-once statics (prevent ExceptionInInitializerError)
  * Improve MissingCoroutineDispatcher diagnostic
  * Do not cache failed results in test dispatcher to allow reusing it between tests 
  * Deprecate HandlerDispatcher.Main (was accessible only fom Java API)

Fixes #746
Fixed #810 | 2018-12-17 16:49:12 | 4327b2120558c0e232b522b32b3427dc2ad02bf5

fix small typo of async method | 2018-12-16 07:09:02 | 054fcc2b68f9d9933981d65c485af88dba8f89d6

After merge fix: resolve clashes between type alias CoroutineStackFrame and jvm.internal.CoroutineStackFrame | 2018-12-13 09:57:37 | cd162d356e7dbb8a6ed8e02ceae0133af2df95b5

Merge pull request #876 from Kotlin/debug-agent

Coroutines debug agent

Fixes #772 | 2018-12-13 09:39:45 | a5a7cdb86a10d6fcda61c2b9fc55963b86ca8947

Repackage byte-buddy along with debug agent (so it shouldn't be a dependency of target process), use shadow plugin for that to avoid clashes with other byte-buddy versions and publish shadow jar instead of regular one for debug module | 2018-12-13 08:58:29 | 3781a821a11a64670b5a3ffa3c276f1533332ad7

Reknit after docs fix | 2018-12-13 08:58:24 | 75f634c56e3655d475bd93c4d7a5fc7242744d69

Speedup linerizability tests, make conflation part of helpClose (fixes nightly stress failure) | 2018-11-19 16:31:51 | b733f7d0cfd3c8fcca234d7d49f4350dfeb36264

Debug agent cleanup

  * Readme
  * Do not fail on Windows during signal handler installation
  * Do not warn about missing artificial stackframe | 2018-12-12 16:08:32 | 7a6fd89c04b3ee972136c0648700f8500dfb0f23

Rephrase default dispatcher documentation | 2018-12-12 10:36:54 | e06585a482f0f94d2819c24af8ac42582d38af6a

Get rid of top level 'debug' folder | 2018-12-11 16:49:07 | 7520c978464e2f3b1cc075dea36a9f11088e2d85

Unreachable code fix | 2018-12-11 16:44:49 | f64bcde03b4c5e46d63f19d5dcb3b1738c59eefa

Debug agent code style | 2018-12-11 16:20:39 | 12695b763715338149e0bcaa3633a6e0296fc361

Code style in test code fixed | 2018-12-10 13:11:06 | 8e9e4d1706083dd5fb6fcc4c89d2a65caa33914c

Debug agent optimizations

  * Do not store creation stacktrace of the coroutine, recover it from ArtificialStackFrame
  * Reduce lock window where possible to avoid contention
  * Avoid stacktrace copying where possible | 2018-12-10 17:19:35 | 5a80d2a0b0c52121a0788acc036030812fea9f59

Debug agent to track alive coroutines

  * Can be installed dynamically or from command line
  * Captures coroutine creation stacktrace and stores it in completion, automatically enhancing stacktrace recovery mechanism
  * Allows to dump and introspect all active coroutines
  * Allows to dump Job hierarchy
  * When installed from command line, dumps all coroutines on kill -5
  * Probe support in undispatched coroutines | 2018-12-10 08:41:00 | c7239ac4915df344add7386c8aa19038499f5e4b

Scoped builders and exception stacktraces synergy

  * Recover stacktraces via both fast and slow paths in scoped builders
  * Merge stracktraces of nested scoped builders, eliminate common prefix so it looks like a flat profile
  * Optimize stacktrace-related machinery
  * Copy meaningful part of original exception into recovered one, rename "Current coroutine stacktrace" to "Coroutien boundary"
  * Rename Exception.kt to StackTraceRecovery.kt to avoid name clash with another Exception.kt | 2018-11-27 15:13:47 | 1032f5801a9719fbe67325daec944104eff793a9

Initialize JavaFx more accurately, do not leave dispatcher in uninitialized state in case of unexpected failure

Fixes #816 | 2018-11-27 12:57:16 | 69a2d9273288dec1e29a81f2c314ccf23ae99093

Fix: default dispatcher doesn't work with jsdom | 2018-11-06 16:46:00 | bb0ad4ae2772c9c4af0e3b44b129423cf5ae0c58

Sanitize class names received from Kotlin debug metadata | 2018-11-12 17:04:35 | 25a886e9ee0047f755e8d32f496ced3760e7ec64

Debug optimizations:

  * Extract call to suspendCoroutineUninterceptedOrReturn behind recoverability check
  * Cache exceptions constructors into WeakHashMap in order to avoid expensive ctor lookup | 2018-11-02 17:06:14 | e3b80d9c7198728a5566cb2c74da61ee115e61d6

Basic exception stacktrace recovery mechanism

  * Implement CoroutineStackFrame in CancellableContinuationImpl, DispatchedContinuation and ScopeCoroutine
  * On coroutine resumption try to reflectively instantiate exception instance of the same type, but with augmented stacktrace
  * Recover stacktrace by walking over CoroutineStackFrame
  * Recover stacktrace on fast-path exceptions without CoroutineStackFrame walking to provide more context to an exception
  * Unwrap exceptions when doing aggregation in JobSupport
  * Add kill-switch to disable stacktrace recovery, introduce method to recover stacktrace on the exceptional fast-path
  * Add `suspendCoroutineOrReturn` on exceptional fast-path in await in order to provide "real" stacktrace

Design rationale:
All recovery of *suspended* continuations takes place in Dispatched.kt file, the only place where all calls to "resume*" ends up, so we don't have to remember about stacktrace recovery in every primitive we are implementing. But to provide more accurate stacktraces we *have to* recover it on every fast-path for better debuggability.

Fixes #493 | 2018-11-02 12:55:20 | 675c30c4b96533a374ae36b144dbe6b26634b97b

Merge pull request #791 from Kotlin/undispatched-cancellation

Use final Job state in undispatched coroutine completion | 2018-11-06 12:55:53 | 666ea6e554fa52ea03504ab618543ca26e20ce3b

Add ExperimentalCoroutineDispatcher to binary compatibility check, restore binary compatibility in Ktor | 2018-11-06 11:03:39 | e3ab2a692a6da18ee9213a124a4c111235046c75

Add scheduler name to ExperimentalCoroutineDispatcher

Fixes #661 | 2018-10-31 13:15:35 | 92327322442d4c8be225067ff6e16c6827f8b38e

fix link | 2018-11-05 16:56:31 | 64f2b2006b5a7cf2a760ec976dd28e988ce122d0

fixed typo | 2018-11-05 14:28:47 | ace91872cc56113fa10e844069f46eb3bbec9c95

Use final Job state in undispatched coroutine completion

  * When using in-place coroutine builders, startUndispatchedOrReturn will return block's final value on fast-path. This is not correct because if any of the children had failed, whether or not exception is thrown depend only on child timings. Moreover, in the face of such race exception may be ignored if scope owner wasn't cancelled or is missing.
  * Introduce special hack for withTimeout and withTimeoutOrNull to ignore TimeoutCancellationException on the fast path
  * withContext, coroutineScope, supervisorScope, withTimeout and withTimeoutOrNull are affected and now check cancellation on fast-path | 2018-11-04 12:32:34 | 78832e3bb38560f4c4d55cdba436bf7bc9b761ca

SchedulerTask is now an abstract class with optimizations for jvm

* It removes the need for a separate SchedulerTaskBase
* submissionTime and taskContext are marked as @JvmField
* DispatchedTask is also an abstract class
* resumeMode is marked as @JvmField | 2018-11-01 21:10:39 | aa374a95dc7e6df4fd6458fe6d8abe95e2953fce

Scheduler: capture TaskContext for afterTask before running it

This is not strictly needed, since the reusable Task instances
(DispatchedTask) should be always reused in the same context, but
this makes the code more resilient to future changes. | 2018-10-22 02:31:23 | e64d9b706cb5180260e4d95fa3a990449163da51

Avoid allocation of CoroutineScheduler task object

* DispatchedContinuation and CancellableContinuationImpl have all
  the necessarily field to be scheduled | 2018-10-21 17:08:49 | 16e20347dc5557063742ea8a06dbe5162a211c25

Publish: Comments style fixed | 2018-10-26 20:02:08 | f18b9f580faff47af054cb6c0942cd15ccc7675d

Fixed exception handling for publish builder

* Test that ensures proper parent cancellation
* Stress test to ensure that exception in publisher always handled
  by parent
* Also fixed race between request & signal completion that did not
  reproduce before | 2018-10-23 05:28:12 | ac848e872da94e01ed60a6bfecbfe3926229f44f

Reactive streams integration conformance to TCK verified & fixed

* Throw NPE on null subscriber
* Throw IAE when requested n <= 0 elements
* Do not sent any notification after cancel() | 2018-10-20 16:50:05 | 8cced247b1d83f7885f21be8c9b0354dab0fd1f3

fix minor typo | 2018-10-30 19:14:20 | a223f351c1dac80443b02ab905d46acbf4a66720

Implement yield for unconfined dispatchers, documentation improvements

Fixes #737 | 2018-10-23 09:29:56 | c33ef61d4502b71e0cdc354337f261917102d1c6

fix: make snippet as non-runnable | 2018-10-23 12:33:12 | 0661d477332205c23defe65d51e4063cd009e023

Prevent temporary leaks in HandlerDispatcher by properly handling
cancellations in scheduleResumeAfterDelay() implementation | 2018-10-16 22:30:40 | e321394c359758659a07ad1c98429ec2acd8ea59

fixed typo | 2018-10-19 21:16:57 | d981966acf780078119493c1f64e30dc9fa6e02e

Merge branch 'release-candidate' into develop

# Conflicts:
#	core/kotlinx-coroutines-core/test/RunBlockingTest.kt
#	docs/coroutine-context-and-dispatchers.md | 2018-10-18 14:40:10 | a7e10146781744f6df3865a1a33fa4e7cbc2c0b6

Merge branch 'context-elements-opto' into release-candidate

# Conflicts:
#	common/kotlinx-coroutines-core-common/src/Dispatched.kt | 2018-10-18 13:59:46 | cd37d8e8b30656a92a883b646fe050ff479bafdd

Minor optimizations of UndispatchedEventLoop | 2018-10-18 12:17:25 | 23d435b17a1aaaba86cc71656a4080547c4c727e

Do not step into thread-local event-loop on CancellableContinuation#dispatch fast-path | 2018-10-18 08:54:56 | faa477496bc2c05dad4034847a3f7d3f6aae3818

Use FIFO queue in undispatched event loop | 2018-10-17 16:51:50 | 09b9d6c157c9d7c6ec84052c16e64d3eebd0bc8e

Move undispatched thread-local event loop to dispatched continuation, execute all undispatched tasks in that loop to avoid SOE in user-supplied unconfined dispatchers and 'immediate' main dispatchers. | 2018-10-17 15:37:36 | fd54bc4882357771d0bec29abbd6e99dfccab725

Rework Dispatchers.Unconfined to use thread-local event loop

Fixes #704 | 2018-10-17 07:57:30 | 7ee722a595b416023c69d987fb7e4682ac0ffe91

Cache result of ThreadContext#foldAll in the field of DispatchedCoroutine to avoid context fold in tight loops

Fixes #537 | 2018-10-16 12:47:26 | ae85797805f93f98bfad64f5f91ba97e4f2c1fbc

Dokka fixes

  * Provide module with Kotlin 1.3 API because Kotlin 1.2 from Dokka can't read classes marked as "from the future"
  * Add runConfiguration dokkaStubs which is included only during dokka task with some classpath magic for Kotlin 1.3
  * Add package.list for slf4j
  * Fix unresolved types/links in documentation
  * Suppress all internal/inherited API | 2018-10-13 12:40:32 | 706e39363b586127b29e28fd97d476129c22fe93

Make EventLoop internal, @JvmName("from") for ExecutorService.asCoroutineDispatcher | 2018-10-11 16:09:44 | b6eca2a62158b2dc8d9b41d86040924095dca662

Use toString implementation for continuations to leverage debug metadata

Fixes #679 | 2018-10-10 11:46:53 | 4220ca2106bea653f2831f19c2c93752ea0e468a

Cleanup: get rid of workarounds, cleanup guide, suppress/fix compilation warnings | 2018-10-10 08:56:41 | 1bdbb3ef364006515157b5884dc663d9c3172c6c

Experimental annotation revisit:

  * Mark our API annotation as experimental with corresponding warning or error
  * Get rid of workaround for new inference bug
  * Migrate to compiler arguments instead of annotations | 2018-10-09 16:06:29 | e6e82391c33716033996ef6718756feab641816c

Restore TOC in the root coroutines-guide.md file with links to individual files

* Knit supports new TOC_REF directive for that.
* Reknit docs (also fixed out-of-date sample file). | 2018-10-08 17:20:12 | 715acd33e564dbff128a12b10ec2c6e24240d330

Migrate to Kotlin 1.3 coroutines, drop experimental from package

* Features based on version 0.30.0
* Uses Kotlin version 1.3.0-rc-57
* Uses Kotlin/Native version 0.9.2
* Uses AtomicFu 0.11.9-eap13
* Replace SuccessOrFailure with Result
* Replace buildSequence and buildIterator with sequence and iterator
* Apply @BuilderInference on all builders (including extension methods to workaround inference bug) | 2018-07-13 07:33:25 | 0950dfa1fe114e3682a546e3e53ef34dec9dfd4a

Fix lost exception from dispatched withContext on cancelled job

Fixes #675 | 2018-10-08 13:13:01 | 0f94304c6ae46c8f0cec24dde29d2e7af9ae7e97

Mark newSingle/FixedThreadPoolContext as obsolete, document the reason

* The will be replaced by another mechanism in the future.
  See #261 for details.
* The proposed replacement is to use the standard java API:
  Executors.newSingleThreadExecutor/newFixedThreadPool
  and convert to dispatcher via asCoroutineDispatcher() extension. | 2018-10-06 13:36:13 | f5126d0a9263f0b73a57d17031c340f78e3a25bd

Lazily load Dispatchers.Main and provide a stub impl on failure

Also specified explicit public visibility for Dispatchers object.

Fixes #658
Fixes #665 | 2018-10-06 14:09:05 | 0ece3885d445b60d254dc0fb21c7c05c7ebfb1bf

fix grammar typo

removed repeated 'for' | 2018-10-05 13:16:33 | e7a0723e930d52c4cb4665c5a3918f883287c039

Short Dispatchers.Default.toString value ("DefaultDispatcher") | 2018-10-02 09:59:11 | ec8cbd252d20adcdc91149ae9129149b252d945c

Move UI dispatcher to common Dispatchers.Main (#641)

* Main thread dispatchers are grouped under Dispatchers object and are discoverable via ServiceLoader

  * Dispatchers.Main can be consistently used and easily discovered, its implementation is discovered with ServiceLoader
  * It allows us to add iOS Dispatchers.Main implementation in the future thus opening the door for multiplatform UI-dispatched code
  * Workaround for #626, now Android users can start migration to RC coroutines

Fixed #626 | 2018-10-01 16:01:16 | cfe699fb59d799ab22da23aae983cc34b1164f29

Never loose coroutines when CoroutineScheduler is closed

* CoroutineScheduler close/shutdown sequence now guaranteed that a
  submitted task is either executed by the scheduler that is being
  concurrently shutdown or RejectedExecutionException is thrown.
* RejectedExecutionException is caught by the coroutine dispatcher
  implementation and coroutines are rescheduled into DefaultExecutor
  if a (custom) instance  of CoroutineScheduler is being shutdown.
* Added stress test for coroutine scheduler closing. | 2018-10-01 07:52:56 | 4b0f4dec24b93db4e0e0abbfe59b115e886a30c1

Coroutine scheduler is used by default instead of deprecated CommonPool

* Documentation and guide are updated correspondingly
* "DefaultDispatcher" is used as a public name of the default impl
* Implementation is integrated with virtual time-source
* Shutdown sequence is reimplemented in a safe way for tests,
  makes "close" safe to use on custom instances.
* "close" on DefaultDispatcher throws exception just in case
* -Dkotlinx.coroutines.scheduler=off can be used to switch back to
  CommonPool

Fixes #198 | 2018-09-28 09:20:49 | 303708b27f8d997ae482e3106679a7d170bc16d7

Exception unwrapping logic rework, do not unwrap cancellation exception if parent can handle exceptions

It allows to properly handle only relevant exceptions by child without reporting the same exception multiple times, fixes suppressions hierarchy and allows to implement supervisorScope properly | 2018-09-28 09:29:21 | 88e72f9973810119f105f78768b59e19f6a49c26

Introduce SupervisorJob & supervisorScope

This change also fixes propagation of cancellation for Job() constructor.
When both Job() and SupervisorJob() are cancelled with exception (fail),
they cancel their parent, too. So we have similar behavior between:
* Job() and coroutineScope { ... }
* SupervisorJob() and supervisorScope { ... }

Fixes #576 | 2018-09-23 16:16:04 | 21f171c8cb09831e25acdeab5c667cf3c15a9692

Avoid OOM in thread-pool dispatchers, try to reflectively invoke setRemoveFutureOnCancel on executor instance and use default dispatcher if attempt failed

Fixes #571 | 2018-09-25 12:45:53 | e29f49799d118b5c3feb38886af3030d027e7b60

async and async-like builders cancel parent on failure

* Affects async, CompletableDeferred, and all Rx integration builders.
* This makes all coroutine builders totally consistent. They all
  cancel parent on failure, but they all consider "CancellationException"
  to be the case of "normal cancellation" that does not propagate to
  parent. The only missing case is Job() that should be fixed together
  with introduction of SupervisorJob().
* Note that "scoping" builders don't "cancel the parent", but rethrow
  the corresponding exception instead, so it that is how it gets
  propagated up the stack.
* This makes parallel decomposition exception-safe. You
  cannot loose an exception as along as default (child async)
  behavior is not overridden.

Fixes #552 | 2018-09-27 16:17:16 | 52bfdabfa1476f55c1b3880d43f49977fc8df943

Copy deprecated annotations on Job member to inheritors

* Makes them easier to find for cleanup
* Avoids bug with light classes | 2018-09-28 09:41:58 | ffda1da6aec27b51f0bc8640f0e48c8fcd1e8f59

Restore binary compatibility of Executor.asCoroutineDispatcher

Fixes #629 | 2018-09-27 18:19:38 | 18cc588106ff7f4c680831809e5af8d75063c689

fix broken links for kotlin web site (#628)

* fix broken links for Kotlin web site | 2018-09-27 15:42:04 | cbeef1039d7402939bac8ec4674e1a7b1adf993a

Merge pull request #588 from Kotlin/handle-exception-fix

Handle exceptions fix | 2018-09-25 21:00:29 | 25b4388ef2f94909acac51cf1e0206975cc4b84a

Add name parameter to Handler.asCoroutineDispatcher

Fixes #580 | 2018-09-25 13:40:30 | a180ff75e9f7c97189a2651e96f4212bff0b105e

Fix lost exception during cancellation in produce, fix integration with play services after rebase | 2018-09-25 16:16:02 | 1b22af7e462272cbc33fd019975ee3ec5dbf1b78

Merge branch 'develop' into handle-exception-fix | 2018-09-25 13:10:26 | 1e0a2f0ad358c49d97602ee01ecf76602721fa4f

fix compilation | 2018-09-24 17:29:00 | f30715955637d2006e17fda7f99d002877fedc1c

Docs for context/coroutineContext in AbstractCoroutine are fixed | 2018-09-24 17:29:42 | 2d8cad05755d47af7987f39385527d3bddb15377

Fix exception aggregation to ensure atomic handling of exceptions

* Removed legacy onFinishing handler support from JobSupport.
  - It is no longer needed, because handleJobException covers #208
* Fixed bugs that were masked by cancelling parent from onFinishing.
* Consistent "Finishing" state was introduced in internal machinery:
  - Job enters finishing state when it is failing or it is completing
    and has children
  - Finishing state cleanly aggregates all failures, tracks cancellation
    and completion status
* Job.isFailed is introduced as a consistent way to query the "failing"
  state of the job that was previously only implicitly available via
  invokeOnCompletion handler (cause != null means a failed job) and
  the documentation for both Job & Deferred is updated to reflect that.
* Source-incompatible change: Job.invokeOnCompletion boolean parameter is
  change to onFailing. Such handlers are now invoked as soon as the job
  starts failing and the root cause exception of the failure is consistently
  passed to all the handlers.
* The following internal methods were introduced to facilitate this:
  - Job.failParent(exception) is used by child to signal failure to parent
  - Job.cancelChild(parentJob) is used by parent to cancel child.
* Child never aggregates exception received from it parent, but uses
  it as it root cause if there is no other exception.
* JobSupport.handleJobException() logic for launch/actor is split into:
  - failParent - can be invoked multiple times on race;
  - handleJobException which is invoked exactly once.
* Exception materiazization is much lazier now, which should
  significantly improve performance when cancelling large hierarchies.
* Other minor perf improvements in JobSupport code.

Fixes #585 | 2018-09-14 09:52:50 | ecbc85cbdad134d868698e22c0fdd7220eaced0f

Typo fixed | 2018-09-22 13:28:37 | 63e3896d85f827f2e403ffd25593ac5d9af54715

Fix typo in deprecation message of JavaFx dispatcher | 2018-09-20 17:10:30 | 39a2c559b538b8681c0724d5ec3ee6058af4e1c3

Cosmetic fixes | 2018-09-20 08:25:56 | 2dd53204e7047e970f145281c11a9c834021b3a9

Improve HandlerDispatcherTest, check that jobs are actually executed | 2018-09-19 11:30:51 | 847eba7c935ed784e918d976c9c43464179a2df9

Reknit guide, fixed TOC in Knit with comma & verify mode in example-context-09 | 2018-09-19 11:49:42 | bca98f4e9ea3c485c8691209be32fee487f812fe

CoroutineScheduler: fixed race between createNewWorker & shutdown for tests | 2018-09-14 12:17:12 | 241e74e6a2cdadaa2753f40a326c732e95fac2d0

Fixed sporadic test crashes related to withTimeout and children

- The bug only manifested when withTimeout coroutine had children working
  in a different dispatcher
- A separate stress-test that reproduces this problem with much higher
  probability | 2018-09-16 12:31:13 | fa9586bc283d60427ad3e9162de7962da4b0ec1d

Updated dispatchers references in readmes and docs | 2018-09-11 16:16:49 | f189cec57d7d0751464a5939f1bbcbd32e15d7c0

Dispatchers are renamed and grouped in the Dispatchers object

* Dispatchers.Default — a default dispatcher for background asynchronous tasks
  (currently backed by FJP commonPool, a new dispatcher in the future).
* Dispatchers.IO — a dispatcher for blocking background operations (#79).
* Dispatchers.Main — a dispatcher for Android Main Thread (#533).
* Dispatchers.Swing — a dispatcher for Swing Event Dispatch Thread.
* Dispatchers.JavaFx — a dispatcher for JavaFx Application Thread.
* Old dispatchers are deprecated, CommonPool is deprecated, too.
* awaitPulse() in JavaFx and awaitFrame() in Android are top-level funs.
* Introduced HandlerDispatcher, SwingDispatcher, and JavaFxDispatcher types
  in the corresponding UI modules for type-safety and future extensions

Fixes #41
Fixes #533 | 2018-09-11 15:42:03 | dc29b071d4784e3739f89223ced2333ecd5408ad

Fixed hangs during thread termination in IO dispatcher

Fixes #524
Fixes #525 | 2018-09-11 12:38:14 | 750d468b3281570910d0cd4000d4e29702b25020

Invoke handler using invokeIt to avoid JS bugs | 2018-09-07 11:36:05 | c430e0797e87af77f812bbcfb8751e4a0e31ffc6

AtomicFU 0.11.5 to fix Windows compilation | 2018-09-04 14:58:45 | 61abcd224a13f674bffae096afa7250de262df87

typo fixed | 2018-08-24 12:24:02 | 1a1237083b14d5de8f13f66b7a4ba6d9e26183d7

Introduce IO dispatcher to offload blocking I/O-intensive tasks

Fixes #79 | 2018-08-23 14:27:19 | f5e67ba597acdfb90ef84d29e4d6028f3f17a6ba

Introduce ThreadContextElement API to integrate with thread-local sensitive code

* Debug thread name is redesigned using ThreadContextElement API
  where the name of thread reflects the name of currently coroutine.
* Intrinsics for startCoroutineUndispatched that correspond to
  CoroutineStart.UNDISPATCHED properly update coroutine context.
* New intrinsics named startCoroutineUnintercepted are introduced.
  They do not update thread context.
* withContext logic is fixed properly update context is various situations.
* DebugThreadNameTest is introduced.
* Reporting of unhandled errors in TestBase is improved.
  Its CoroutineExceptionHandler records but does not rethrow exception.
  This makes sure that failed tests actually fail and do not hang in
  recursive attempt to handle unhandled coroutine exception.

Fixes #119 | 2018-07-25 09:22:46 | 7587eba96a230f3f0ab0c04f52723e926f7a845d

AtomicFu version 0.11.3 (bug fix) | 2018-08-23 11:05:46 | be065fd2c566acf4f600de23d45d70cf9f2144bc

Introduce ExecutorCoroutineDispatcher instead of CloseableCoroutineDispatcher

Fixes #385 | 2018-08-15 10:03:23 | b517f0529fe4a2066ca8ac985c08206cd4587758

Add workaround for K/N bug | 2018-08-22 09:37:41 | bbe6d8a915b2be9c0a7ff9d92677c878718fa219

Implement withTimeoutOrNull via withTimeout to avoid timing bugs and races.
Remove deprecated API

Fixes #498 | 2018-08-21 16:45:29 | 988eb26469819f7cc8cb1ba26c3a76a6805e8387

Provide API to create limited view of experimental dispatcher

Fixes #475 | 2018-08-15 09:06:06 | cac1a0f13c5b81cdfa3c2d1020e8d86ac8cd0029

Additional debug output for CoroutineSchedulerStressTest | 2018-08-10 17:38:41 | 21ce9c066c752adf4db1e8388a9d38a390b5f08b

Execute EventLoop#invokeOnTimeout in DefaultDispatcher to allow busy-wait loops

Fixes #479 | 2018-08-08 15:04:59 | e90cdb031ffab87d9f7671cc9e856b2a9534d59e

Scheduler tests fixed:

[temporary] Ignore flaky tests
Fix benchmark compilation
Fix WorkQueueStressTest | 2018-07-26 17:02:03 | 9542f1ce4f84d08ef2b33d14ce3ae79a8a93fa86

Scheduler improvements:

Fix (one more) ABA problem in tryUnpark
Global TaskContext to speedup CPU tasks
Documentation improvements
Stress tests constants tuned to be more robust and faster on local machine (and when ran from IDEA)
Style fixes | 2018-07-26 10:57:04 | e50fb89c4e80d7accb9bdfff3ce54c59d2857c26

Scheduler tests infrastructure

Support "kotlinx.coroutines.scheduler" property to change DefaultDispatcher
Updated scheduler shrink test with custom idleWorkerKeepAliveNs config,
so that they execute faster
Fix submissions from another instance of CoroutineScheduler
Run JDK16 tests and tests under new scheduler tests only during nightly stress test | 2018-07-20 20:57:57 | 5c7454b8a872d925f206f418c16d9880bf23e25f

Removed wrapper from LimitingBlockingDispatcher by introducing TaskContext | 2018-07-23 09:38:06 | 216e4d30a2b225361a4f3e59465c079a0f116379

Fixed ABA problem in parkedWorkersStack and other stress improvements

* Workers are now numbered starting from 1, zero is used as sentinel
* Workers are lazily created (no threads initially)
* Close/shutdown of the scheduler also clears state so that subsequent
  rogue attempt to dispatch anything fails.
* Work stealing is more predictable. It starts at random index but
  then goes linearly via workers array. | 2018-07-20 20:25:58 | db22e4023442341d39d0c3797de73e74efb25882

Scheduler cosmetics

Stealing logic cleaned up a bit (mostly style)
Update worker thread names when worker threads are terminated to maintain
consistency between their index in array and name;
Improved debugging info (toString)
Merged yield and spin counters, parkTimeNs is in Int | 2018-07-19 11:12:31 | bba6e8918e32d521109583a9024b3d5e82da53f5

Improved management of parkedWorkersStack in terms of ABA/concurrency;
Also includes documentation, naming and packaging fixes | 2018-07-18 10:12:31 | 1d3b0191ecbf498965d81257c80ad6f87e583552

Improved tasks dispatching:

Merge blocking and created workers into single state variable
Replace j.u.c. queue of parked workers with intrusive stack to support shrinking and increase performance
Replace j.u.c. global queue with Michael & Scott queue which supports conditional polling
Poll for blocking tasks from global queue when CPU token is not available
Make last ditch effort before thread termination
Idle reset on requestCpuWorker | 2018-05-03 11:52:00 | 18a91347466560b63144d0097f248d9edb029780

Fix ordering bug in QuasarTest | 2018-07-25 16:16:23 | a608a335ff57e969f69985c43ee70c30da1dba8f

Get rid of compiler bugs workarounds | 2018-07-25 13:27:14 | 5f73827f3131332018c02650057eff4aa2886ae7

Channels concurrency improvement:

Make close, cancel, isClosedForSend, isClosedForReceive and offer linearizable with other operations
Fix bug when send operation can be stuck in channel forever
New concurrency tests

Fixes #359 | 2018-07-17 15:39:20 | ea651aa5badbc20f911c844db2a57ea4f68fc38b

Access to PlatformImpl in JavaFx dispatcher, on Java 9 it's an internal module which should be explicitly exported

Fixes #443 | 2018-07-20 12:07:28 | 5557245405f965ec5ca26083301559066a1be147

Minor grammatical changes to the Coroutines guide

Minor fixes for the English grammar in the coroutines guide to help ensure new readers understand coroutines properly. | 2018-07-19 20:01:40 | 977ada1e74e0ae9b011fb219891433a6d36e9ef3

Validate FJP.commonPool parallelism to avoid pathological bugs

Also always construct private FJP pool if
kotlinx.coroutines.default.parallelism is explicitly specified.

Fixes #432, #288 | 2018-07-11 10:36:07 | 1e12210cd2bccdfd866b1c9649cd19e40663fb5f

Change order of handlers in JobSupport and CancellableContinuation
1) Invoke handlers before dispatching in CancellableContinuation to make behaviour timing-independent and Unconfined doesn't produce unexpected results
2) Invoke onCancellation -> handlers -> onCompletion in Job to make behaviour timing-independent

Fixes #415 | 2018-07-03 08:11:21 | b10287ecb35463f471ac120367a0a4f56f6b5c49

Typo fixed | 2018-06-26 11:58:39 | 7981999a156918abced59de696b02d9bc731f808

IO: fix joining and continuous writing byte array interference | 2018-06-13 16:49:45 | 9faa0395afd26a3c29cd67de5dce635a7882cf5c

Update ThreadPoolDispatcher.kt

Fixed typos. | 2018-06-09 17:01:53 | 517a2592077b067032d6c0379226d0467d7662f1

IO: fix continuous writing session interfered with joining | 2018-06-01 14:23:47 | e15eae8e3537080a82078873d762ad9de61f50f4

Typo fix | 2018-06-03 23:34:22 | e185ed6f918a1df082832c9059a091505b9a5cf9

Introduce deprecated ReceiveChannel#use to preserve backward compatibility with SubscriptionReceiveChannel, fix reactive samples | 2018-06-01 12:30:34 | 313978cf6b3901b1d7fbfb5d1f688c068a072c09

LockFreeMPSCQueue optimized & fixed

* no need for REMOVE token to hurry up GC
* Placeholder logic is fixed to avoid potential data loss on wraparound
* Stress test for resize/copy added | 2018-05-30 18:58:02 | c22a1c748e93db6e7d4e73f9118e8435edbeb698

Leaking handles in awaitAll are fixed | 2018-04-28 16:22:29 | e0b6db04b3bd86e942bc7e40081a82aedd8fd200

Delay bug fixes:
Invoke clearTimeout on cancellation in JSDispatcher
Remove delayed task on cancellation from ThreadSafeHeap on cancellation to avoid memory leak | 2018-04-26 13:03:40 | cd00643b92c9698ca728f92a66f52b30b3811d05

Documentation for debug property values | 2018-04-11 19:21:23 | 590c8889c2bb5341f15ee20e440c5599342fe34b

typo fixed | 2018-04-04 06:59:33 | 905a512625ad96dcd45c789f983babd93dfde011

Add extension to ExecutorService to return closeable CoroutineDispatcher

Fixes #278 | 2018-03-20 19:28:52 | 26f4b9ecd1bdd03299b668541f7c7c9ecaf9ab7c

Debug toString for channels

Fixes #185 | 2018-03-06 10:37:42 | e4b6f09af7c0d0b6963fa8611e867ff3292fad0e

rx-example: Added application plugin & fixed to use runBlocking | 2018-03-05 14:58:59 | 00560e8b0add1628bd0a32202b6f3cc301b35af3

Use NodeDispatcher on ReactNative

Fixes #236 | 2018-03-05 09:01:07 | ecc68f13141d1353aa2bb1d027a077e0fd7be4fb

Check for undefined `window.addEventListener` when choosing default coroutine dispatcher.

Fixes #230 | 2018-02-10 19:35:58 | 54d57e0c1fff22fe1d72c762f2bdbf01995395ca

Update README.md

Minor typo and typography fixes. | 2018-02-04 00:30:58 | 7dd6b66eced47e4ddf0b2c76c974ac19612b827c

IO: fix error propagation in blocking adapter | 2018-02-02 14:18:47 | f0c1d99e2c5c5978da7ace9d58c61a5648ed7687

Update coroutines-guide.md

This tutorial suggests just Async suffix:
https://github.com/Kotlin/kotlin-coroutines/blob/master/kotlin-coroutines-informal.md#asynchronous-programming-styles
Also, there was "of" instead of "or" | 2018-01-29 17:39:02 | 7e94e70734f6e01b0522d11071e6825879a221e7

runBlocking is improved to properly support specified dispatchers,
so that `runBlocking(UI) { ... }` can be used outside of UI thread.

Fixes #209 | 2018-01-29 15:07:21 | cb78787638039096804bc1b97031bcb9801c0547

Workarounds for KT-21968 to fix JS tests | 2018-01-24 20:31:22 | dfeba242b9e328f7528507f9349623671a00333c

IO: fix joining sequence, avoid infinite joinTo suspension | 2018-01-23 20:16:54 | d1842c6301d8debca8509809d473ce7e889b1d7b

IO: make reusable cancellable continuation implement DispatchedTask | 2018-01-12 15:46:22 | 4d01f7ec3b33f7633f3737a5ab3a3fc90703f57f

JS: Introduce Window.asCoroutineDispatcher and use custom queue in
Window.awaitAnimationFrame to align all animations | 2018-01-13 08:20:32 | 1867f6de0fb39077d0cb13fdc0400dd4568f717b

Actually fixed startup/shutdown of DefaultExecutor for tests to prevent
thread leak. Includes test-case. | 2018-01-12 15:28:24 | 9483301695f4c0784d663238ecd0ef04bbfcbea3

MPP: Debug toString should not depend on kotlin-reflect | 2018-01-11 16:04:12 | b79277b4fab5353680445f36dd9b19a740828203

IO: Use TestBase in all tests and fix leaking threads in tests | 2018-01-11 10:48:19 | c45f5fa3b636d66b824351c8d8d9368b8ee4e37f

MPP: Ported DispatchedTask perf improvements to JS and more code is made common | 2018-01-11 09:39:36 | f29203c158a526f90ae8574abfc1ba6dd5249262

Performance: Remove DispatchTask, store value in DispatchedContinuation | 2018-01-10 13:25:25 | f2239e191f55883486d5ce04ffb0c6f75cdc3468

Update coroutines-guide.md

Correct `Dispatcher` spelling | 2018-01-08 13:56:54 | fa13beba79e6ebb68588ba2167b67a77196907d3

Optimize creation of DispatchTask for cancellable continuations (fixed) | 2017-12-28 09:21:14 | bdf23f28c425ea391baa7ddbc3ba012d15e6dfa5

Optimize creation of DispatchTask for cancellable continuations | 2017-12-27 22:09:43 | ac48070de5e20b727b6d9ffd5cc7c259426fb6fb

MPP: DefaultDispatcher internal impl class renamed to JSDispatcher | 2017-12-27 10:14:54 | a919827885289271a6c598ab47fdf4434a8e0da3

fix typos | 2017-12-24 19:55:06 | d2d42ea802b54d2ede23f3edf3c18521ae46a3e9

IO: fix accidentally used tryResumeWithException | 2017-12-06 14:09:01 | 9ef4e0c05168acdb2c955079e2ee857cfec9de06

IO: fix spuriously hanging pipe tests | 2017-12-05 12:41:42 | 4adac45480b33664d79b24f7a779e7d4c1da68b1

IO: fix joining with different write byte orders | 2017-12-05 09:35:56 | 8af8937a34e893661dfe15f9be598eac50b101df

IO: fix infinite writeSuspend loop caused by auto-resuming flush | 2017-12-05 09:27:09 | e6764086ef4a03ec610245740b379f5da617224c

Bug fix: start hangs on lazy coroutine with attached invokeOnCompletion | 2017-11-30 13:41:47 | 5610e1df2eb3f67be8b45633b5d6ffbf73ec6bb8

Add DefaultDispatcher on some reactive operators | 2017-11-29 21:12:35 | e19ee04ca72316f9d67a58d35b8be398b059f1f5

IO: fix too expensive joinTo fast-path | 2017-11-23 09:39:27 | 060f36a06d341f43c0f9e77fd6706bf71f94972c

IO: fix typo in test name | 2017-11-20 08:43:26 | 9a6ca1a006debfa08392027508d03a141ae53841

Introduced ReceiveChannel.cancel method;
all operators on ReceiveChannel fully consume the original channel
using a helper consume extension, which is reflected in docs;
removed `suspend` modifier from intermediate channel operators;
consistently renamed channel type param to <E>;
added two versions for xxxTo fun -- with MutableList & SendChannel;
added tests for all channel operators;
dropped/deprecated ActorJob/ProducerJob, fixes #127 | 2017-08-17 18:01:33 | b555d91193d9e76710062451cf94a94d14820e98

IO: fix race in closeWaitJob of JoiningState | 2017-11-17 16:30:22 | 47d92bafe90d899dfb53cd0f8bf7eae75504047e

IO: fix accidentally missed it | 2017-11-17 16:29:49 | d42bdadc8520ec490d5b37f5f160b54d4541d2f8

IO: fix race in ByteBufferChannel.write(lambda) | 2017-11-17 15:39:03 | 7bf4fa9e3b19a8200450fabe396a0ff854615596

IO: fix joining of already closed but not empty channel | 2017-11-14 11:52:32 | 9e9929d376d2b92cd5fda2f21f7cc1eb51f66ca8

IO: fix lincheck dependency | 2017-11-10 20:22:53 | b94ce42827dc5f9294f19b99da356ad585fb01ea

IO: fixed awaitClose and copyDirect | 2017-11-10 09:22:23 | 373d590e103f3203f61b2fb93b3b82bcce1de13e

IO: fix race in joined flush once again | 2017-11-09 18:18:05 | 8e9138ca4a297189f49bece8e739b6584f69e061

IO: fix joined close/flush | 2017-11-08 13:50:13 | 2fdb5aa4867b60f7c659cf4d950babfd2a43a67a

IO: fixed joined channel flush | 2017-11-08 03:15:39 | 625c1fefa57f95af2b723b7c7e3b1a5319c69faf

IO: fixed joined ByteChannel close | 2017-11-08 03:11:53 | ca8762b2f6a1043103a45153357a5f9e5dc010af

IO: fix writeByte BufferOverflowException

it is important to setup buffer's positions again after suspension
it is not the case if we don't hold writing state during suspension | 2017-11-07 16:42:15 | bab9f7927ca780b242c794578c02ddf63db40375

IO: fix race in readSuspend

consider state change:
writer: IDLE(empty) -> !do write -> IDLE(buffer) -> !close -> closed = C
reader:  !suspend -> resumed -> closed = C -> [here]

here reader can see that there is closed state however to see published
written state it should read state again rather than simply use already
readen state to get happens-before guarantee | 2017-11-07 16:18:16 | 32c90b169d05bd372317f90ae5ad511bbcb05bc5

IO: rewrite if/else/return code to identical

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 11:23:34 | fde1a646fe5a60c8aa211764d63527ec429672c3

IO: eliminate tail suspend calls in when blocks

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 10:54:47 | 4eccfba8d4cbe55ce49ac7b70c40eea1d0adf7c9

No Job in newSingleThreadContext and newFixedThreadPoolContext anymore

* This resolves the common issue of using `run(ctx)` where ctx comes from
either `newSingleThreadContext` or `newFixedThreadPoolContext`
invocation. They both used to return a combination of dispatcher + job,
and this job was overriding the parent job, thus preventing propagation
of cancellation. Not anymore.
* ThreadPoolDispatcher class is now public and is the result type for
both functions. It has the `close` method to release the thread pool.

Fixes #149
Fixes #151 | 2017-10-20 09:36:56 | d9ae2bcb88403e0854b895ba46c2417b4c0a4752

run uses cancelling state & propagates exceptions when cancelled

* When coroutine that was switched into a different dispatcher using
`run` is cancelled, the run invocation does not complete immediately,
but waits until the body completes.
* If the body completes with exception, then this exception is
propagated.

Fixes #147 | 2017-10-20 08:42:06 | bcdd8e17fed40097f9bb8fdb3e218f95ff8603a9

Exception propagation logic from cancelled coroutines is adjusted

* When cancelled coroutine crashes due to some other exception, this
other exception becomes the cancellation reason of the coroutine, while
the original cancellation reason is suppressed.
* UnexpectedCoroutineException is no longer used to report those cases
as is removed.
* This fixes a race between crash of CPU-consuming coroutine and
cancellation which resulted in an unhandled exception and lead to
crashes on Android.

Fixes #152 | 2017-10-20 06:00:50 | 6aed878a67e6f707e6c3afb0879beb8822a95d6f

Fixed Reactor docs (Scheduler.asCoroutineDispatcher) | 2017-10-07 19:58:40 | 8348b8c31d5b07541bd3d268ca2a186b0fe1ad6f

Failed parent Job cancels all children jobs, then waits them

Also improved debug output a little bit | 2017-10-07 12:44:48 | a36ab94253bb9945c6377eb43db0cb1071019c40

IO: eliminate race in close

I knew that I'll hit this bug anyway. Here we MUST flush twice as
flush at read suspend is not enough. If a writer closes then the first
flush does flush and it closes so all readers will see all pending data.
If a foreign thread does close then the first flush is makes no
difference however the second is required for proper cleanup and
to do tryTerminate | 2017-10-04 18:34:18 | ad68c06c1200f2038c26adeab2abf801a2a2114b

IO: fix verifying pool usage

buffer view doesn't hold original pool reference to make
pool chaining working | 2017-09-29 15:18:00 | ccf8dde980a4701b9cd30e1df23e5cbefdd93b53

IO: fix writing byte packet | 2017-09-28 07:58:15 | 754a19b188dc6d486d73b8e3a2f0c483c3f88f9b

Documentation for DefaultDispatcher in the guide | 2017-09-29 18:39:03 | 66f018c489c6b0ec0831fa9953db34da3edff5f3

DefaultDispatcher is introduced | 2017-09-28 11:27:05 | c0d559b594fce802f1d1be9a6feef49019d17160

IO: fix ByteWritePacket.writePacket size update | 2017-09-17 19:48:26 | 5ca0d12c1e8a9672d40fe83cd31d1b2426f397e7

IO: fix writer scope type | 2017-09-11 10:06:54 | ea3a418f84f3731e92658cedfa11878a8828500c

IO: fix byte channel readX operations return -1 during close+flush

Read operation should try flush before return -1 if closed because
the close operation setting close status first then do flush
so reader could see closed status but not-yet-flushed byte counters | 2017-09-11 07:31:08 | e4d3ce750ed8b864a435fb0926d0d77e9c02b208

IO: add more byte packet tests and fix few bugs | 2017-09-06 18:50:51 | 5feaf6973c23fae3c5a8df64748e2181c50dd0d6

IO: fix delimiter lookahead | 2017-09-06 15:52:04 | 1cc86083e7be17ce53f7c80cfa6ba67e8569e33e

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 99cdb380bf6391db7e7d08e8673c627c554074d8

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 776b370d58883e9bce0c309ebb4919ef4cdac13c

IO: fix byte packet write buffer leak | 2017-08-25 08:39:00 | 974cbb3b21b8d7613c41ee2221ce435e347b068f

IO: fix byte channel close with error buffer leak | 2017-08-25 08:06:59 | 24b040f1345db27b45589a975daab45bf9325494

IO: fix CR-only line endings processing + tests | 2017-08-23 11:39:41 | a9a936d1a325ee0baf36df444414e1e17ac539da

IO: rename writeStringUtf8, fix implementation + tests | 2017-08-23 09:26:18 | fbcba264a37580b5c47f3314395e5146afb38287

IO: fix copyAndClose + tests | 2017-08-23 09:11:55 | fc84a634ff9a1acca04e09fa5a031b904c5c8838

IO: byte packet readLine support + bugfixes | 2017-07-26 09:59:16 | 0b12ffc0178844e813223039adf5d7510703485d

Fixed bug in LockFreeLinkedList (invariant & lock-freedom violation)
Migrated atomic ops to AtomicFU library for ease of code maintenance
Implement lock-freedom testing in LockFreeLinkedListAtomicStressLFTest | 2017-08-10 18:09:26 | 7eb41efbacd498704f25465e2a58f4892c16aa32

Typo fixed | 2017-07-24 13:42:34 | a448903dcac25e450d87c49705e7a6693a300d29

Use CompletableDeferred in the guide section on coroutines;
fix (reknit) broken links to factory functions that are now top-level | 2017-07-21 22:00:30 | 256812a1c09511744575ed3d2c64fec27979f391

More documentation on CompletableDeferred states and style fixes | 2017-07-21 15:04:23 | 8e2ae9964614e35295a8d695114b00c35f5fc755

Better debug strings for continuations | 2017-07-12 12:22:21 | 69d9c852289f1a4a9ffe107dc75cc71871cfe34e

ObservableBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 10:16:30 | ed6985459318209be084ff807676cb722387fb6f

PublisherBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 09:58:44 | 58246ca7e7727632ba50c41d0314df47ba9e3fc0

Fixed IllegalStateException in select that concurrently selects, which
was due a problem with Job concurrent cancel and dispose of handle.
The bug was introduced by addition of Cancelling state for a Job.

Original stack trace in select was:
java.lang.IllegalStateException: Check failed.
	at kotlinx.coroutines.experimental.internal.LockFreeLinkedListNode.remove(LockFreeLinkedList.kt:236)
	at kotlinx.coroutines.experimental.JobSupport.removeNode$kotlinx_coroutines_core(Job.kt:734)
	at kotlinx.coroutines.experimental.JobNode.dispose(Job.kt:995)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.initCancellability(Select.kt:294)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.getResult(Select.kt:273) | 2017-07-11 09:50:00 | e9f64491787433b3d53ad5800456524820058d5f

typo fixed | 2017-07-10 10:46:13 | d28cc872fb7815b51ceb7c84a4e77117fce380c7

typo fixed | 2017-07-10 10:44:07 | 8b0b07ab81f12bc605462a6a1333b61abce547cb

typo fixed | 2017-07-10 10:43:20 | 93f7e8e22019643caaf14ae480c05ab0a349064d

Bug fixed on waitTimeoutOrNull (was flaky testOuterTimeoutTest) | 2017-07-10 10:38:54 | 769d48217f8787c7f64c07da6e53c27b2d703274

Refactor DispatchTask to reuse it for dispatchYield | 2017-07-10 10:16:20 | 2a93646a8054ce7819e9bdbff8d28849a19e874b

Fix SecurityException when trying to read "kotlinx.coroutines.debug" prop | 2017-07-10 07:15:40 | e824eaaab9d053ff0f2cc028c7413bb83adcacc0

A fix & optimization for select impl helping scheme | 2017-07-05 06:53:29 | 907074f1f63871ed29feab3173a2e38b30d8fbb6

Reactive tests fixed for cancellation logic change | 2017-06-26 11:25:56 | 7a7b00938934ef7d0855eb24ec93a06d0b0c97e7

Fix typo: debugging more -> debugging mode | 2017-06-24 21:03:35 | ed5ed49913498b4e880415d2f0fb9004e20e1b5a

Typo fixed | 2017-06-23 10:27:02 | 6c18dfd15f6e1703db57531422bc0df3cb7d08ff

fix typo.

somethine -> something | 2017-06-18 07:37:59 | 81a6f23ca68d7ed37f36dcb966fe74e3bc53de57

Typo fixed | 2017-06-09 17:25:03 | c3c2f3269220f5d7ae20e7592ca1253061b50a95

CoroutineExceptionHandlerTest fixed | 2017-06-09 15:59:25 | 866521b83ed0676d0203dec35de5fb797bc9a59d

SimpleSendReceiveTest is fixed to account for close conflation | 2017-06-06 11:36:38 | 9ff32644381bf1a692d9a935170a9f7b7023f244

Fixed lock-freedom of send/offer on closed channels and related bugs.
Conflated[Broadcast]Channel hang of concurrent offer/close is fixed. | 2017-06-05 14:04:39 | e6e8ce8d46cee273e00ee130334239880734dc2f

Integration readme title fixed | 2017-05-17 11:59:49 | 0c2e25d7c38f50bd3c9866ea1fc2c12d5d74251a

launched jobs and await can be cancelled while waiting in dispatch queue

* suspendAtomicCancellableCoroutine function is introduced for funs like
  send/receive/receiveOrNull that require atomic cancellation
  (they cannot be cancelled after decision was made)
* Coroutines started with default mode (CoroutineStart.ATOMIC) using
  async/launch/actor builders can be cancelled before execution starts.
* CoroutineStart.ATOMIC is introduced as a start mode to specify that
  coroutine cannot be cancelled before its execution start. | 2017-05-11 17:15:18 | a74eb5f8b08e84f904e75aa71da4547c9178da8d

Fix withTimeout/OrNull bug with spurious concurrency on cancellation | 2017-04-20 16:23:18 | ca9d5be31a30c5f6a20875438f9ae40db4183f4c

Refactored ThreadPoolDispatcher to reuse code of ExecutorCoroutineDispatcher | 2017-04-18 12:28:35 | f04f51d5b05a0aec7c97acc202d180096a095fbf

equals/hashCode for wrapper CoroutineDispatcher impls | 2017-04-11 10:50:03 | 30dd5c129c493ca7b1a3b2b80437e8a7ec68f3ec

Starting coroutine in UI event handlers without dispatch in UI guide | 2017-04-07 15:06:22 | f724f6e2fe7c20cb48b69cd7b19b2658313231e4

Nicer toString implementations for CommonPool & Unconfined dispatchers | 2017-04-07 07:35:28 | dc9fd1c2d18da2f23d9907148b4674cda6418e49

Few minor docs & build fixes for reactor support | 2017-04-06 19:15:35 | 523516abd2023f8d968d389b32dee713130a9f83

Merge pull request #53 from mkobit/patch-1

Correct typo in coroutines-guide-reactive.md | 2017-04-05 09:41:56 | 7676e2239947273c6cbb4cb77536042bd9f2ce43

Fix repository urls

need to be reverted once bintray will fix jcenter sync issue | 2017-03-23 14:45:39 | 78fd3cb8932410af9beab4effc04bdeea4343732

Merge pull request #42 from jakiejj/master

fix typos in comments to Nio functions | 2017-03-20 07:16:24 | 9ef792fec6775bb5cdb08c84511488f324db3322

fix typos in comments | 2017-03-17 20:48:39 | 4d927c76488b96abaae7ba003f8064ad84b8334e

Typo fixed | 2017-03-14 17:39:50 | 81a5b7144484dcc8ebc89cd98fd9bd8a2d45afbe

startUndispatchedCoroutine is renamed to startCoroutineUndispatched for consistency with coroutine intrinsics | 2017-03-14 16:39:26 | 4638d79097a3d5b0c1b32c1e468ad723cc4b2bd9

Fixed bug with sometimes missing `onComplete` in `publish`, `rxObservable`, and `rxFlowable` builders | 2017-03-13 09:03:35 | d14a3901f365f622d9a7ba96fc00900011c9c009

Scheduler.asCoroutineDispatcher extension for Rx 2.x | 2017-03-10 12:06:01 | a1fe3da17907024afa50a35cbfcc72639d62bf78

not -> no typo fixed | 2017-03-09 09:57:57 | 228d084bfb87f967e216b84029b58649fcbe7472

Executor.toCoroutineDispatcher is renamed to asCoroutineDispatcher | 2017-03-09 09:03:39 | 38b5ea18e36f1a53d4cde27bf3fd21522727cbbb

Fixed dispatching logic of `withTimeout` (removed extra dispatch) | 2017-03-02 21:15:21 | 43d831f61f33262dcb4621069451d1699898d1cb

More links and typos fixed | 2017-03-01 14:21:48 | cc63363ead9d82f4e246a319ca3e0cb9f15e3a14

top-level readme links fixed to produce & co | 2017-02-22 12:04:28 | 40e89f689f89ae643f68c68efc57aebd8f8284ed

Jon.onJoin select clause is implemented, lazy onAwait/onJoin & dispatch fixed | 2017-02-22 11:56:58 | d84dbc2d75927fe8446098a225a3fbb884683bde

startUndispatchedCoroutine utility functions | 2017-02-22 06:53:49 | ee88fbef2d78e4b25f741efffabf4756bff8e7f3

buildChannel deprecation template fixed | 2017-02-20 12:53:30 | de8b9e9b336491ff0dbf107fe35d9efa030d92d3

Merge pull request #31 from gildor/on-completion-deprecation-fix

Job.onCompletion deprecation template fixed | 2017-02-20 12:49:41 | 85923e2de75ed522903cc3d64aef2ad178c1cbf8

Job.onCompletion deprecation template fixed | 2017-02-19 13:26:29 | c8f9ca308abe963cafa5f676410402fc287cfa5a

Delay implementation in Swing, JavaFx, and scheduled executors is fixed to avoid an extra dispatch
CancellableContinuation.resumeUndispatched is introduced to make this efficient implementation possible
Additional documentation for CoroutineDispatcher implementors | 2017-02-10 10:30:38 | a198bad7365a508baf1041993e9a14007f9d5aa3

Doc fixed | 2017-02-10 10:14:35 | 8c8551e7dbea7c2467060c2d3c6aa1c54c721e68

Merge pull request #29 from cbeust/patch-1

Update coroutines-guide.md | 2017-02-07 17:52:01 | 4d821e3901d038f005850b38d1e4954506306383

Merge pull request #28 from erokhins/patch-1

Update 1.1.0-beta-37 to 1.1.0-beta-38 | 2017-02-02 19:24:36 | 40f69cf704e7b31cec9c8a935317d8c173e79623

Added deprecated (with error level) plus operators on Job and CoroutineDispatcher to catch potential problem with their incorrect use at compile time | 2017-02-01 15:43:32 | 79a2868295127b81056f66d644da72db5a40d772

Merge pull request #27 from tairrzayev/readme-fix

Fixes the typo in the coroutines-guide.md | 2017-02-02 06:15:26 | 9d844fa1733f83e5e1b85c3e762a69729d3c5ef2

Dispatchers default behaviour is changed to schedule new coroutine for execution later.
Job.getInactiveCancellationException is introduced.
yield is cancellable while it is waiting to executed.
core tutorial is expanded. | 2017-01-29 18:58:33 | 7cf452eab59cdca570227f071cba2da374f77110

Finer grained control on debugging facilities | 2017-01-24 07:29:53 | aecb9aa1606b79243c8e93221de9713c164ce015

Added context parameter to CoroutineDispatcher methods, implemented Executor.toCoroutineDispatcher | 2017-01-23 13:47:20 | 67891d867da022d608d4589859002f256d9a313e

Fixed initialization of Job with parent (initParentJob), fixed handling on uncaught exceptions in standalone coroutines | 2017-01-20 09:19:52 | 58a7add417403811e822a4f6f7689ae3fd0e2018

Minor: fix version of maven-deploy-plugin, fix pom warnings | 2016-12-21 17:21:30 | c4ad15fc6246b7496d610da7419441020dfe1c56

Merge pull request #6 from hhariri/patch-1

Fixed packaged names | 2016-07-27 07:04:12 | c6993089412fbc491ddeb0a71b57e67bf31e21d6

Fixed packaged names 

On the repo, the package names don't have the suffix -1. | 2016-07-27 06:03:41 | 1abe89716c093c9e010a45a5235da7f9b50eea17

Rename DispatchException to CoroutinesInternalError and make it an Error to better reflect its semantics | 2019-03-07 12:15:40 | 132c1e3f029610208607dcac4d55ed05f62d0642

Make JobCancellationException copyable in debug mode

This simplifies trouble-shooting of "what caused cancellation", as you
can print out exception and see its recovered stack trace. | 2019-03-04 19:20:25 | d293639980d7a6141394dc8174180f221daa4787

Add operator invoke for CoroutineDispatcher | 2019-02-11 13:21:44 | 57540d452ef82207f14c4235ee690a4323a343fa

Hide cancel(Throwable), introduce cancel(CancellationException)

Job/ReceiveChannel/BroadcastChannel.cancel(Throwable) is now hidden and
cannot be invoked from a newly compiled code. This function had broken
semantics when used with an arbitrary exception. A safe replacement
is available in the form of cancel(CancellationException) where
CancellationException can be used to supply additional information
for debugging purposes.

Fixes #975 | 2019-03-01 09:08:43 | 0aad8f1274c4be7f02ac8f361eb0685d4b438243

Improve CoroutineDispatcher documentation | 2019-02-27 11:19:21 | 08f8214ddbcdbf0becc2b5264caf29080f04576f

Promote Dispatchers.Unconfined to stable API | 2019-02-27 10:16:00 | 9863de1401a90de61307c1ade952ebd7ac65a88a

Promote MainCoroutineDispatcher.immediate to stable API | 2019-02-27 10:02:03 | 4fc4fd555f784775360c464e178d7662291f5fba

Cancellation in consumeEach should dispose Rx Observable

Fixed bugs in MaybeSource/ObservableSource.consumeEach implementation
so that observable is disposed on cancellation.

Also optimized implementation of bridge function to avoid extra dispose
calls if possible (this is permissible by specification, though)

Fixes #1008 | 2019-02-26 16:03:24 | ae8a8743dd37a442c7882a04d1da0de367671ccd

Replace UI with Dispatchers.Main in CoroutineScope documentation

Fixes #803 | 2019-02-27 14:22:29 | b37c296f03ee38cd5cdf5091fa67a010c6a3f6d3

Make SupervisorCoroutine implement ScopeCoroutine

* Implement ScopeCoroutine in SupervisorCoroutine
* Do not indent scoped coroutines in debug strings

Fixes #915
Fixes #916 | 2019-02-20 15:31:02 | 8d506b3757777664e007b1287ce3c4cb943f4ae5

CoroutinesTimeout debug rule for JUnit 4 (#991)


Fixes #938 | 2019-02-20 14:00:57 | 2bdd4605e797a88019565938cf4a4daca92593a5

Reknit after fixing indentation in code samples | 2019-02-20 10:31:38 | 3785348e32e7180efe86862bc84da14d3631a98d

Update named arguments referenced issue

The issue previously reference was marked as fixed for one of the two problems it was about,
and a new one has been created for the remaining issue that is relevant here. | 2019-02-19 15:17:56 | 919284b159fec82ef2b6f4da9af5f88248e0713a

Obtain real stacktrace of running coroutines in debug agent

  * Capture thread of coroutine when it's transited to running state
  * During dump retrieve the stacktrace of captured thread for running coroutines and merge it with metadata-based stacktrace

Fixes #997 | 2019-02-20 08:43:23 | f18878f632dd28ad8ff847eb4f95e9ed50f373bb

Check that worker thread belongs to the same scheduler in dispatchers.shutdown

Fixes #990 | 2019-02-19 16:01:48 | 703a286e8b55d353b4ebc84320710562d627c96b

Add section about Android in debug agent readme | 2019-02-01 15:13:39 | a68376ceea89bc3599203a4c36e81cd177fc37cd

Additional documentation section about debug mode and stacktrace recovery.

Not included in a guide intentionally | 2019-02-01 11:54:06 | 418ba80a7bb0b8661823fbb325b7edac526ab7db

Call initCause during reflective exception copy in runCatching block to avoid DispatchException when initCause throws

Fixes #933 | 2019-01-15 12:18:43 | 3e4d808200e990e4b5c7e4755b23a5314fdb662a

Move debug example to a proper package | 2019-01-29 09:41:02 | c055f025f4fd3d3dc6a4ceecb798091b31f986e9

Migration to new multiplatorm plugin (#947)

Migration to a new multiplatform plugin
  
  * kotlinx-coroutines-core-[common|js|native] are merged into one core module with multiple source sets
  * Folder structure and readme are restructured
  * Publication process is patched to preserve backward compatibility with artifact names | 2019-01-28 08:34:24 | e50a0fa78aae052e128e8b17666e081e4dfc78be

Update CHM in test to containsKey for KT-18053 fix in 1.3.20 | 2019-01-23 14:49:17 | a672d5f58040f9a14661b157e085c63a7c8b2ff7

Replace old UI dispatcher name with Dispatchers.Main | 2018-12-31 13:52:33 | 8c071247dbe5928ebf5138471c1ac905c5de4018

Update coroutines-guide-ui.md

[Update]
- typo: what you might want to express here is `JavaScript event dispatch thread ` | 2019-01-08 16:01:55 | 66f0123b5fe98f861b46ef1400c8b11bc40c2ace

More idiomatic and readable example for coroutines debug module readme

* Idiomatically use suspend functions
* Idiomatic parallal decomposition with coroutineContext/async
* No GlobalScope
* Use less vertical space & more concise code to aid readability
* Link to full code file (in tests) | 2018-12-22 15:40:39 | b65dc7fe0f75b7dc76e84205c3b57c0aff09c269

Update CHM in test to containsKey for KT-18053 fix in 1.3.20 | 2018-12-22 13:38:36 | 4b60d013508c865dd8430f334e89481d93893ab1

EventLoop integration and reuse for runBlocking and Unconfined dispatchers (#889)

EventLoop integration and reuse for runBlocking and Unconfined dispatchers

* Event loop that is created by runBlocking or by Unconfined dispatcher
  is reused across the same thread to prevent blocking of the loop
* Semantics of runBlocking and Unconfined are fully retained
* DefaultExecutor also registers itself as running event loop and thus
  cannot be blocked by runBlocking
* Consolidates thread-local handling for native
* Also fixes thread-local memory leak on JVM (does not use custom class)
* Restore BlockingEventLoop class name for runBlocking event loop impl
* Internal API for custom waiting loops to be used by kotlinx-io

Fixes #860
Fixes #850 | 2018-12-21 13:41:39 | 51738243c980165ad4fb426105baf6e00d02f87b

Dokka links fixed | 2018-12-18 13:26:58 | 89d43afab3f1090a25697c1e8cebd7faac6612c1

Debug improvements (#900)

Debug improvements

* Rename printHierarchy to printJob and hierarchyToString to jobToString, introduce corresponding methods for scope to simplify scopes debugging
* Remove CoroutineState.job in favor of CoroutineState.jobOrNull
* Use runCatching in Continuation.toDebugString to avoid crashes on some Androids with R8 issue

Addresses #858 | 2018-12-18 09:47:50 | 115a13933adbce880a72c1653b7be94eba566202

Ignore exception on cancel/fail race in CancellableContinuation

There seems to be no other way to satisfactory fix the problem of
a race between cancellation on CancellationContinuation and
concurrent failure of the corresponding background process in a
way the distinguishes "failure from cancellation attempt" from
a "true failure" without placing undue burden on anyone who is
implementing `await()` extension function for various future types.

- Added testTimeoutCancellationFailRace that works as a perfect litmus
  test; being allowed to run for a while it reliably detects various
  problems in alternative approaches.
- Optimized CancellableContinuationImpl; merged its code with
  AbstractContinuation class that is not needed as a separate
  class and removed.
- Deprecated and hidden CancellableContinuation.initCancellability();
  it is now always invoked after the end of the block that was
  passed to suspendCancellableCoroutine.
- Deprecated `holdCancellability` parameter to an internal
  suspendAtomicCancellableCoroutine function.

Fixes #892
Fixes #830 | 2018-12-15 11:12:47 | 876e9bab95d34f311be030a0706497564f96d95a

Introduce test module with testable main dispatcher (#749)

Introduce kotlinx-coroutines-test module with API to set Dispatchers.Main 

  * Dispatchers.setMain and Dispatchers.resetMain extensions
  * Use real factory in HandlerDispatcher instead of using initialized-once statics (prevent ExceptionInInitializerError)
  * Improve MissingCoroutineDispatcher diagnostic
  * Do not cache failed results in test dispatcher to allow reusing it between tests 
  * Deprecate HandlerDispatcher.Main (was accessible only fom Java API)

Fixes #746
Fixed #810 | 2018-12-17 16:49:12 | 4327b2120558c0e232b522b32b3427dc2ad02bf5

fix small typo of async method | 2018-12-16 07:09:02 | 054fcc2b68f9d9933981d65c485af88dba8f89d6

After merge fix: resolve clashes between type alias CoroutineStackFrame and jvm.internal.CoroutineStackFrame | 2018-12-13 09:57:37 | cd162d356e7dbb8a6ed8e02ceae0133af2df95b5

Merge pull request #876 from Kotlin/debug-agent

Coroutines debug agent

Fixes #772 | 2018-12-13 09:39:45 | a5a7cdb86a10d6fcda61c2b9fc55963b86ca8947

Repackage byte-buddy along with debug agent (so it shouldn't be a dependency of target process), use shadow plugin for that to avoid clashes with other byte-buddy versions and publish shadow jar instead of regular one for debug module | 2018-12-13 08:58:29 | 3781a821a11a64670b5a3ffa3c276f1533332ad7

Reknit after docs fix | 2018-12-13 08:58:24 | 75f634c56e3655d475bd93c4d7a5fc7242744d69

Speedup linerizability tests, make conflation part of helpClose (fixes nightly stress failure) | 2018-11-19 16:31:51 | b733f7d0cfd3c8fcca234d7d49f4350dfeb36264

Debug agent cleanup

  * Readme
  * Do not fail on Windows during signal handler installation
  * Do not warn about missing artificial stackframe | 2018-12-12 16:08:32 | 7a6fd89c04b3ee972136c0648700f8500dfb0f23

Rephrase default dispatcher documentation | 2018-12-12 10:36:54 | e06585a482f0f94d2819c24af8ac42582d38af6a

Get rid of top level 'debug' folder | 2018-12-11 16:49:07 | 7520c978464e2f3b1cc075dea36a9f11088e2d85

Unreachable code fix | 2018-12-11 16:44:49 | f64bcde03b4c5e46d63f19d5dcb3b1738c59eefa

Debug agent code style | 2018-12-11 16:20:39 | 12695b763715338149e0bcaa3633a6e0296fc361

Code style in test code fixed | 2018-12-10 13:11:06 | 8e9e4d1706083dd5fb6fcc4c89d2a65caa33914c

Debug agent optimizations

  * Do not store creation stacktrace of the coroutine, recover it from ArtificialStackFrame
  * Reduce lock window where possible to avoid contention
  * Avoid stacktrace copying where possible | 2018-12-10 17:19:35 | 5a80d2a0b0c52121a0788acc036030812fea9f59

Debug agent to track alive coroutines

  * Can be installed dynamically or from command line
  * Captures coroutine creation stacktrace and stores it in completion, automatically enhancing stacktrace recovery mechanism
  * Allows to dump and introspect all active coroutines
  * Allows to dump Job hierarchy
  * When installed from command line, dumps all coroutines on kill -5
  * Probe support in undispatched coroutines | 2018-12-10 08:41:00 | c7239ac4915df344add7386c8aa19038499f5e4b

Scoped builders and exception stacktraces synergy

  * Recover stacktraces via both fast and slow paths in scoped builders
  * Merge stracktraces of nested scoped builders, eliminate common prefix so it looks like a flat profile
  * Optimize stacktrace-related machinery
  * Copy meaningful part of original exception into recovered one, rename "Current coroutine stacktrace" to "Coroutien boundary"
  * Rename Exception.kt to StackTraceRecovery.kt to avoid name clash with another Exception.kt | 2018-11-27 15:13:47 | 1032f5801a9719fbe67325daec944104eff793a9

Initialize JavaFx more accurately, do not leave dispatcher in uninitialized state in case of unexpected failure

Fixes #816 | 2018-11-27 12:57:16 | 69a2d9273288dec1e29a81f2c314ccf23ae99093

Fix: default dispatcher doesn't work with jsdom | 2018-11-06 16:46:00 | bb0ad4ae2772c9c4af0e3b44b129423cf5ae0c58

Sanitize class names received from Kotlin debug metadata | 2018-11-12 17:04:35 | 25a886e9ee0047f755e8d32f496ced3760e7ec64

Debug optimizations:

  * Extract call to suspendCoroutineUninterceptedOrReturn behind recoverability check
  * Cache exceptions constructors into WeakHashMap in order to avoid expensive ctor lookup | 2018-11-02 17:06:14 | e3b80d9c7198728a5566cb2c74da61ee115e61d6

Basic exception stacktrace recovery mechanism

  * Implement CoroutineStackFrame in CancellableContinuationImpl, DispatchedContinuation and ScopeCoroutine
  * On coroutine resumption try to reflectively instantiate exception instance of the same type, but with augmented stacktrace
  * Recover stacktrace by walking over CoroutineStackFrame
  * Recover stacktrace on fast-path exceptions without CoroutineStackFrame walking to provide more context to an exception
  * Unwrap exceptions when doing aggregation in JobSupport
  * Add kill-switch to disable stacktrace recovery, introduce method to recover stacktrace on the exceptional fast-path
  * Add `suspendCoroutineOrReturn` on exceptional fast-path in await in order to provide "real" stacktrace

Design rationale:
All recovery of *suspended* continuations takes place in Dispatched.kt file, the only place where all calls to "resume*" ends up, so we don't have to remember about stacktrace recovery in every primitive we are implementing. But to provide more accurate stacktraces we *have to* recover it on every fast-path for better debuggability.

Fixes #493 | 2018-11-02 12:55:20 | 675c30c4b96533a374ae36b144dbe6b26634b97b

Merge pull request #791 from Kotlin/undispatched-cancellation

Use final Job state in undispatched coroutine completion | 2018-11-06 12:55:53 | 666ea6e554fa52ea03504ab618543ca26e20ce3b

Add ExperimentalCoroutineDispatcher to binary compatibility check, restore binary compatibility in Ktor | 2018-11-06 11:03:39 | e3ab2a692a6da18ee9213a124a4c111235046c75

Add scheduler name to ExperimentalCoroutineDispatcher

Fixes #661 | 2018-10-31 13:15:35 | 92327322442d4c8be225067ff6e16c6827f8b38e

fix link | 2018-11-05 16:56:31 | 64f2b2006b5a7cf2a760ec976dd28e988ce122d0

fixed typo | 2018-11-05 14:28:47 | ace91872cc56113fa10e844069f46eb3bbec9c95

Use final Job state in undispatched coroutine completion

  * When using in-place coroutine builders, startUndispatchedOrReturn will return block's final value on fast-path. This is not correct because if any of the children had failed, whether or not exception is thrown depend only on child timings. Moreover, in the face of such race exception may be ignored if scope owner wasn't cancelled or is missing.
  * Introduce special hack for withTimeout and withTimeoutOrNull to ignore TimeoutCancellationException on the fast path
  * withContext, coroutineScope, supervisorScope, withTimeout and withTimeoutOrNull are affected and now check cancellation on fast-path | 2018-11-04 12:32:34 | 78832e3bb38560f4c4d55cdba436bf7bc9b761ca

SchedulerTask is now an abstract class with optimizations for jvm

* It removes the need for a separate SchedulerTaskBase
* submissionTime and taskContext are marked as @JvmField
* DispatchedTask is also an abstract class
* resumeMode is marked as @JvmField | 2018-11-01 21:10:39 | aa374a95dc7e6df4fd6458fe6d8abe95e2953fce

Scheduler: capture TaskContext for afterTask before running it

This is not strictly needed, since the reusable Task instances
(DispatchedTask) should be always reused in the same context, but
this makes the code more resilient to future changes. | 2018-10-22 02:31:23 | e64d9b706cb5180260e4d95fa3a990449163da51

Avoid allocation of CoroutineScheduler task object

* DispatchedContinuation and CancellableContinuationImpl have all
  the necessarily field to be scheduled | 2018-10-21 17:08:49 | 16e20347dc5557063742ea8a06dbe5162a211c25

Publish: Comments style fixed | 2018-10-26 20:02:08 | f18b9f580faff47af054cb6c0942cd15ccc7675d

Fixed exception handling for publish builder

* Test that ensures proper parent cancellation
* Stress test to ensure that exception in publisher always handled
  by parent
* Also fixed race between request & signal completion that did not
  reproduce before | 2018-10-23 05:28:12 | ac848e872da94e01ed60a6bfecbfe3926229f44f

Reactive streams integration conformance to TCK verified & fixed

* Throw NPE on null subscriber
* Throw IAE when requested n <= 0 elements
* Do not sent any notification after cancel() | 2018-10-20 16:50:05 | 8cced247b1d83f7885f21be8c9b0354dab0fd1f3

fix minor typo | 2018-10-30 19:14:20 | a223f351c1dac80443b02ab905d46acbf4a66720

Implement yield for unconfined dispatchers, documentation improvements

Fixes #737 | 2018-10-23 09:29:56 | c33ef61d4502b71e0cdc354337f261917102d1c6

fix: make snippet as non-runnable | 2018-10-23 12:33:12 | 0661d477332205c23defe65d51e4063cd009e023

Prevent temporary leaks in HandlerDispatcher by properly handling
cancellations in scheduleResumeAfterDelay() implementation | 2018-10-16 22:30:40 | e321394c359758659a07ad1c98429ec2acd8ea59

fixed typo | 2018-10-19 21:16:57 | d981966acf780078119493c1f64e30dc9fa6e02e

Merge branch 'release-candidate' into develop

# Conflicts:
#	core/kotlinx-coroutines-core/test/RunBlockingTest.kt
#	docs/coroutine-context-and-dispatchers.md | 2018-10-18 14:40:10 | a7e10146781744f6df3865a1a33fa4e7cbc2c0b6

Merge branch 'context-elements-opto' into release-candidate

# Conflicts:
#	common/kotlinx-coroutines-core-common/src/Dispatched.kt | 2018-10-18 13:59:46 | cd37d8e8b30656a92a883b646fe050ff479bafdd

Minor optimizations of UndispatchedEventLoop | 2018-10-18 12:17:25 | 23d435b17a1aaaba86cc71656a4080547c4c727e

Do not step into thread-local event-loop on CancellableContinuation#dispatch fast-path | 2018-10-18 08:54:56 | faa477496bc2c05dad4034847a3f7d3f6aae3818

Use FIFO queue in undispatched event loop | 2018-10-17 16:51:50 | 09b9d6c157c9d7c6ec84052c16e64d3eebd0bc8e

Move undispatched thread-local event loop to dispatched continuation, execute all undispatched tasks in that loop to avoid SOE in user-supplied unconfined dispatchers and 'immediate' main dispatchers. | 2018-10-17 15:37:36 | fd54bc4882357771d0bec29abbd6e99dfccab725

Rework Dispatchers.Unconfined to use thread-local event loop

Fixes #704 | 2018-10-17 07:57:30 | 7ee722a595b416023c69d987fb7e4682ac0ffe91

Cache result of ThreadContext#foldAll in the field of DispatchedCoroutine to avoid context fold in tight loops

Fixes #537 | 2018-10-16 12:47:26 | ae85797805f93f98bfad64f5f91ba97e4f2c1fbc

Dokka fixes

  * Provide module with Kotlin 1.3 API because Kotlin 1.2 from Dokka can't read classes marked as "from the future"
  * Add runConfiguration dokkaStubs which is included only during dokka task with some classpath magic for Kotlin 1.3
  * Add package.list for slf4j
  * Fix unresolved types/links in documentation
  * Suppress all internal/inherited API | 2018-10-13 12:40:32 | 706e39363b586127b29e28fd97d476129c22fe93

Make EventLoop internal, @JvmName("from") for ExecutorService.asCoroutineDispatcher | 2018-10-11 16:09:44 | b6eca2a62158b2dc8d9b41d86040924095dca662

Use toString implementation for continuations to leverage debug metadata

Fixes #679 | 2018-10-10 11:46:53 | 4220ca2106bea653f2831f19c2c93752ea0e468a

Cleanup: get rid of workarounds, cleanup guide, suppress/fix compilation warnings | 2018-10-10 08:56:41 | 1bdbb3ef364006515157b5884dc663d9c3172c6c

Experimental annotation revisit:

  * Mark our API annotation as experimental with corresponding warning or error
  * Get rid of workaround for new inference bug
  * Migrate to compiler arguments instead of annotations | 2018-10-09 16:06:29 | e6e82391c33716033996ef6718756feab641816c

Restore TOC in the root coroutines-guide.md file with links to individual files

* Knit supports new TOC_REF directive for that.
* Reknit docs (also fixed out-of-date sample file). | 2018-10-08 17:20:12 | 715acd33e564dbff128a12b10ec2c6e24240d330

Migrate to Kotlin 1.3 coroutines, drop experimental from package

* Features based on version 0.30.0
* Uses Kotlin version 1.3.0-rc-57
* Uses Kotlin/Native version 0.9.2
* Uses AtomicFu 0.11.9-eap13
* Replace SuccessOrFailure with Result
* Replace buildSequence and buildIterator with sequence and iterator
* Apply @BuilderInference on all builders (including extension methods to workaround inference bug) | 2018-07-13 07:33:25 | 0950dfa1fe114e3682a546e3e53ef34dec9dfd4a

Fix lost exception from dispatched withContext on cancelled job

Fixes #675 | 2018-10-08 13:13:01 | 0f94304c6ae46c8f0cec24dde29d2e7af9ae7e97

Mark newSingle/FixedThreadPoolContext as obsolete, document the reason

* The will be replaced by another mechanism in the future.
  See #261 for details.
* The proposed replacement is to use the standard java API:
  Executors.newSingleThreadExecutor/newFixedThreadPool
  and convert to dispatcher via asCoroutineDispatcher() extension. | 2018-10-06 13:36:13 | f5126d0a9263f0b73a57d17031c340f78e3a25bd

Lazily load Dispatchers.Main and provide a stub impl on failure

Also specified explicit public visibility for Dispatchers object.

Fixes #658
Fixes #665 | 2018-10-06 14:09:05 | 0ece3885d445b60d254dc0fb21c7c05c7ebfb1bf

fix grammar typo

removed repeated 'for' | 2018-10-05 13:16:33 | e7a0723e930d52c4cb4665c5a3918f883287c039

Short Dispatchers.Default.toString value ("DefaultDispatcher") | 2018-10-02 09:59:11 | ec8cbd252d20adcdc91149ae9129149b252d945c

Move UI dispatcher to common Dispatchers.Main (#641)

* Main thread dispatchers are grouped under Dispatchers object and are discoverable via ServiceLoader

  * Dispatchers.Main can be consistently used and easily discovered, its implementation is discovered with ServiceLoader
  * It allows us to add iOS Dispatchers.Main implementation in the future thus opening the door for multiplatform UI-dispatched code
  * Workaround for #626, now Android users can start migration to RC coroutines

Fixed #626 | 2018-10-01 16:01:16 | cfe699fb59d799ab22da23aae983cc34b1164f29

Never loose coroutines when CoroutineScheduler is closed

* CoroutineScheduler close/shutdown sequence now guaranteed that a
  submitted task is either executed by the scheduler that is being
  concurrently shutdown or RejectedExecutionException is thrown.
* RejectedExecutionException is caught by the coroutine dispatcher
  implementation and coroutines are rescheduled into DefaultExecutor
  if a (custom) instance  of CoroutineScheduler is being shutdown.
* Added stress test for coroutine scheduler closing. | 2018-10-01 07:52:56 | 4b0f4dec24b93db4e0e0abbfe59b115e886a30c1

Coroutine scheduler is used by default instead of deprecated CommonPool

* Documentation and guide are updated correspondingly
* "DefaultDispatcher" is used as a public name of the default impl
* Implementation is integrated with virtual time-source
* Shutdown sequence is reimplemented in a safe way for tests,
  makes "close" safe to use on custom instances.
* "close" on DefaultDispatcher throws exception just in case
* -Dkotlinx.coroutines.scheduler=off can be used to switch back to
  CommonPool

Fixes #198 | 2018-09-28 09:20:49 | 303708b27f8d997ae482e3106679a7d170bc16d7

Exception unwrapping logic rework, do not unwrap cancellation exception if parent can handle exceptions

It allows to properly handle only relevant exceptions by child without reporting the same exception multiple times, fixes suppressions hierarchy and allows to implement supervisorScope properly | 2018-09-28 09:29:21 | 88e72f9973810119f105f78768b59e19f6a49c26

Introduce SupervisorJob & supervisorScope

This change also fixes propagation of cancellation for Job() constructor.
When both Job() and SupervisorJob() are cancelled with exception (fail),
they cancel their parent, too. So we have similar behavior between:
* Job() and coroutineScope { ... }
* SupervisorJob() and supervisorScope { ... }

Fixes #576 | 2018-09-23 16:16:04 | 21f171c8cb09831e25acdeab5c667cf3c15a9692

Avoid OOM in thread-pool dispatchers, try to reflectively invoke setRemoveFutureOnCancel on executor instance and use default dispatcher if attempt failed

Fixes #571 | 2018-09-25 12:45:53 | e29f49799d118b5c3feb38886af3030d027e7b60

async and async-like builders cancel parent on failure

* Affects async, CompletableDeferred, and all Rx integration builders.
* This makes all coroutine builders totally consistent. They all
  cancel parent on failure, but they all consider "CancellationException"
  to be the case of "normal cancellation" that does not propagate to
  parent. The only missing case is Job() that should be fixed together
  with introduction of SupervisorJob().
* Note that "scoping" builders don't "cancel the parent", but rethrow
  the corresponding exception instead, so it that is how it gets
  propagated up the stack.
* This makes parallel decomposition exception-safe. You
  cannot loose an exception as along as default (child async)
  behavior is not overridden.

Fixes #552 | 2018-09-27 16:17:16 | 52bfdabfa1476f55c1b3880d43f49977fc8df943

Copy deprecated annotations on Job member to inheritors

* Makes them easier to find for cleanup
* Avoids bug with light classes | 2018-09-28 09:41:58 | ffda1da6aec27b51f0bc8640f0e48c8fcd1e8f59

Restore binary compatibility of Executor.asCoroutineDispatcher

Fixes #629 | 2018-09-27 18:19:38 | 18cc588106ff7f4c680831809e5af8d75063c689

fix broken links for kotlin web site (#628)

* fix broken links for Kotlin web site | 2018-09-27 15:42:04 | cbeef1039d7402939bac8ec4674e1a7b1adf993a

Merge pull request #588 from Kotlin/handle-exception-fix

Handle exceptions fix | 2018-09-25 21:00:29 | 25b4388ef2f94909acac51cf1e0206975cc4b84a

Add name parameter to Handler.asCoroutineDispatcher

Fixes #580 | 2018-09-25 13:40:30 | a180ff75e9f7c97189a2651e96f4212bff0b105e

Fix lost exception during cancellation in produce, fix integration with play services after rebase | 2018-09-25 16:16:02 | 1b22af7e462272cbc33fd019975ee3ec5dbf1b78

Merge branch 'develop' into handle-exception-fix | 2018-09-25 13:10:26 | 1e0a2f0ad358c49d97602ee01ecf76602721fa4f

fix compilation | 2018-09-24 17:29:00 | f30715955637d2006e17fda7f99d002877fedc1c

Docs for context/coroutineContext in AbstractCoroutine are fixed | 2018-09-24 17:29:42 | 2d8cad05755d47af7987f39385527d3bddb15377

Fix exception aggregation to ensure atomic handling of exceptions

* Removed legacy onFinishing handler support from JobSupport.
  - It is no longer needed, because handleJobException covers #208
* Fixed bugs that were masked by cancelling parent from onFinishing.
* Consistent "Finishing" state was introduced in internal machinery:
  - Job enters finishing state when it is failing or it is completing
    and has children
  - Finishing state cleanly aggregates all failures, tracks cancellation
    and completion status
* Job.isFailed is introduced as a consistent way to query the "failing"
  state of the job that was previously only implicitly available via
  invokeOnCompletion handler (cause != null means a failed job) and
  the documentation for both Job & Deferred is updated to reflect that.
* Source-incompatible change: Job.invokeOnCompletion boolean parameter is
  change to onFailing. Such handlers are now invoked as soon as the job
  starts failing and the root cause exception of the failure is consistently
  passed to all the handlers.
* The following internal methods were introduced to facilitate this:
  - Job.failParent(exception) is used by child to signal failure to parent
  - Job.cancelChild(parentJob) is used by parent to cancel child.
* Child never aggregates exception received from it parent, but uses
  it as it root cause if there is no other exception.
* JobSupport.handleJobException() logic for launch/actor is split into:
  - failParent - can be invoked multiple times on race;
  - handleJobException which is invoked exactly once.
* Exception materiazization is much lazier now, which should
  significantly improve performance when cancelling large hierarchies.
* Other minor perf improvements in JobSupport code.

Fixes #585 | 2018-09-14 09:52:50 | ecbc85cbdad134d868698e22c0fdd7220eaced0f

Typo fixed | 2018-09-22 13:28:37 | 63e3896d85f827f2e403ffd25593ac5d9af54715

Fix typo in deprecation message of JavaFx dispatcher | 2018-09-20 17:10:30 | 39a2c559b538b8681c0724d5ec3ee6058af4e1c3

Cosmetic fixes | 2018-09-20 08:25:56 | 2dd53204e7047e970f145281c11a9c834021b3a9

Improve HandlerDispatcherTest, check that jobs are actually executed | 2018-09-19 11:30:51 | 847eba7c935ed784e918d976c9c43464179a2df9

Reknit guide, fixed TOC in Knit with comma & verify mode in example-context-09 | 2018-09-19 11:49:42 | bca98f4e9ea3c485c8691209be32fee487f812fe

CoroutineScheduler: fixed race between createNewWorker & shutdown for tests | 2018-09-14 12:17:12 | 241e74e6a2cdadaa2753f40a326c732e95fac2d0

Fixed sporadic test crashes related to withTimeout and children

- The bug only manifested when withTimeout coroutine had children working
  in a different dispatcher
- A separate stress-test that reproduces this problem with much higher
  probability | 2018-09-16 12:31:13 | fa9586bc283d60427ad3e9162de7962da4b0ec1d

Updated dispatchers references in readmes and docs | 2018-09-11 16:16:49 | f189cec57d7d0751464a5939f1bbcbd32e15d7c0

Dispatchers are renamed and grouped in the Dispatchers object

* Dispatchers.Default — a default dispatcher for background asynchronous tasks
  (currently backed by FJP commonPool, a new dispatcher in the future).
* Dispatchers.IO — a dispatcher for blocking background operations (#79).
* Dispatchers.Main — a dispatcher for Android Main Thread (#533).
* Dispatchers.Swing — a dispatcher for Swing Event Dispatch Thread.
* Dispatchers.JavaFx — a dispatcher for JavaFx Application Thread.
* Old dispatchers are deprecated, CommonPool is deprecated, too.
* awaitPulse() in JavaFx and awaitFrame() in Android are top-level funs.
* Introduced HandlerDispatcher, SwingDispatcher, and JavaFxDispatcher types
  in the corresponding UI modules for type-safety and future extensions

Fixes #41
Fixes #533 | 2018-09-11 15:42:03 | dc29b071d4784e3739f89223ced2333ecd5408ad

Fixed hangs during thread termination in IO dispatcher

Fixes #524
Fixes #525 | 2018-09-11 12:38:14 | 750d468b3281570910d0cd4000d4e29702b25020

Invoke handler using invokeIt to avoid JS bugs | 2018-09-07 11:36:05 | c430e0797e87af77f812bbcfb8751e4a0e31ffc6

AtomicFU 0.11.5 to fix Windows compilation | 2018-09-04 14:58:45 | 61abcd224a13f674bffae096afa7250de262df87

typo fixed | 2018-08-24 12:24:02 | 1a1237083b14d5de8f13f66b7a4ba6d9e26183d7

Introduce IO dispatcher to offload blocking I/O-intensive tasks

Fixes #79 | 2018-08-23 14:27:19 | f5e67ba597acdfb90ef84d29e4d6028f3f17a6ba

Introduce ThreadContextElement API to integrate with thread-local sensitive code

* Debug thread name is redesigned using ThreadContextElement API
  where the name of thread reflects the name of currently coroutine.
* Intrinsics for startCoroutineUndispatched that correspond to
  CoroutineStart.UNDISPATCHED properly update coroutine context.
* New intrinsics named startCoroutineUnintercepted are introduced.
  They do not update thread context.
* withContext logic is fixed properly update context is various situations.
* DebugThreadNameTest is introduced.
* Reporting of unhandled errors in TestBase is improved.
  Its CoroutineExceptionHandler records but does not rethrow exception.
  This makes sure that failed tests actually fail and do not hang in
  recursive attempt to handle unhandled coroutine exception.

Fixes #119 | 2018-07-25 09:22:46 | 7587eba96a230f3f0ab0c04f52723e926f7a845d

AtomicFu version 0.11.3 (bug fix) | 2018-08-23 11:05:46 | be065fd2c566acf4f600de23d45d70cf9f2144bc

Introduce ExecutorCoroutineDispatcher instead of CloseableCoroutineDispatcher

Fixes #385 | 2018-08-15 10:03:23 | b517f0529fe4a2066ca8ac985c08206cd4587758

Add workaround for K/N bug | 2018-08-22 09:37:41 | bbe6d8a915b2be9c0a7ff9d92677c878718fa219

Implement withTimeoutOrNull via withTimeout to avoid timing bugs and races.
Remove deprecated API

Fixes #498 | 2018-08-21 16:45:29 | 988eb26469819f7cc8cb1ba26c3a76a6805e8387

Provide API to create limited view of experimental dispatcher

Fixes #475 | 2018-08-15 09:06:06 | cac1a0f13c5b81cdfa3c2d1020e8d86ac8cd0029

Additional debug output for CoroutineSchedulerStressTest | 2018-08-10 17:38:41 | 21ce9c066c752adf4db1e8388a9d38a390b5f08b

Execute EventLoop#invokeOnTimeout in DefaultDispatcher to allow busy-wait loops

Fixes #479 | 2018-08-08 15:04:59 | e90cdb031ffab87d9f7671cc9e856b2a9534d59e

Scheduler tests fixed:

[temporary] Ignore flaky tests
Fix benchmark compilation
Fix WorkQueueStressTest | 2018-07-26 17:02:03 | 9542f1ce4f84d08ef2b33d14ce3ae79a8a93fa86

Scheduler improvements:

Fix (one more) ABA problem in tryUnpark
Global TaskContext to speedup CPU tasks
Documentation improvements
Stress tests constants tuned to be more robust and faster on local machine (and when ran from IDEA)
Style fixes | 2018-07-26 10:57:04 | e50fb89c4e80d7accb9bdfff3ce54c59d2857c26

Scheduler tests infrastructure

Support "kotlinx.coroutines.scheduler" property to change DefaultDispatcher
Updated scheduler shrink test with custom idleWorkerKeepAliveNs config,
so that they execute faster
Fix submissions from another instance of CoroutineScheduler
Run JDK16 tests and tests under new scheduler tests only during nightly stress test | 2018-07-20 20:57:57 | 5c7454b8a872d925f206f418c16d9880bf23e25f

Removed wrapper from LimitingBlockingDispatcher by introducing TaskContext | 2018-07-23 09:38:06 | 216e4d30a2b225361a4f3e59465c079a0f116379

Fixed ABA problem in parkedWorkersStack and other stress improvements

* Workers are now numbered starting from 1, zero is used as sentinel
* Workers are lazily created (no threads initially)
* Close/shutdown of the scheduler also clears state so that subsequent
  rogue attempt to dispatch anything fails.
* Work stealing is more predictable. It starts at random index but
  then goes linearly via workers array. | 2018-07-20 20:25:58 | db22e4023442341d39d0c3797de73e74efb25882

Scheduler cosmetics

Stealing logic cleaned up a bit (mostly style)
Update worker thread names when worker threads are terminated to maintain
consistency between their index in array and name;
Improved debugging info (toString)
Merged yield and spin counters, parkTimeNs is in Int | 2018-07-19 11:12:31 | bba6e8918e32d521109583a9024b3d5e82da53f5

Improved management of parkedWorkersStack in terms of ABA/concurrency;
Also includes documentation, naming and packaging fixes | 2018-07-18 10:12:31 | 1d3b0191ecbf498965d81257c80ad6f87e583552

Improved tasks dispatching:

Merge blocking and created workers into single state variable
Replace j.u.c. queue of parked workers with intrusive stack to support shrinking and increase performance
Replace j.u.c. global queue with Michael & Scott queue which supports conditional polling
Poll for blocking tasks from global queue when CPU token is not available
Make last ditch effort before thread termination
Idle reset on requestCpuWorker | 2018-05-03 11:52:00 | 18a91347466560b63144d0097f248d9edb029780

Fix ordering bug in QuasarTest | 2018-07-25 16:16:23 | a608a335ff57e969f69985c43ee70c30da1dba8f

Get rid of compiler bugs workarounds | 2018-07-25 13:27:14 | 5f73827f3131332018c02650057eff4aa2886ae7

Channels concurrency improvement:

Make close, cancel, isClosedForSend, isClosedForReceive and offer linearizable with other operations
Fix bug when send operation can be stuck in channel forever
New concurrency tests

Fixes #359 | 2018-07-17 15:39:20 | ea651aa5badbc20f911c844db2a57ea4f68fc38b

Access to PlatformImpl in JavaFx dispatcher, on Java 9 it's an internal module which should be explicitly exported

Fixes #443 | 2018-07-20 12:07:28 | 5557245405f965ec5ca26083301559066a1be147

Minor grammatical changes to the Coroutines guide

Minor fixes for the English grammar in the coroutines guide to help ensure new readers understand coroutines properly. | 2018-07-19 20:01:40 | 977ada1e74e0ae9b011fb219891433a6d36e9ef3

Validate FJP.commonPool parallelism to avoid pathological bugs

Also always construct private FJP pool if
kotlinx.coroutines.default.parallelism is explicitly specified.

Fixes #432, #288 | 2018-07-11 10:36:07 | 1e12210cd2bccdfd866b1c9649cd19e40663fb5f

Change order of handlers in JobSupport and CancellableContinuation
1) Invoke handlers before dispatching in CancellableContinuation to make behaviour timing-independent and Unconfined doesn't produce unexpected results
2) Invoke onCancellation -> handlers -> onCompletion in Job to make behaviour timing-independent

Fixes #415 | 2018-07-03 08:11:21 | b10287ecb35463f471ac120367a0a4f56f6b5c49

Typo fixed | 2018-06-26 11:58:39 | 7981999a156918abced59de696b02d9bc731f808

IO: fix joining and continuous writing byte array interference | 2018-06-13 16:49:45 | 9faa0395afd26a3c29cd67de5dce635a7882cf5c

Update ThreadPoolDispatcher.kt

Fixed typos. | 2018-06-09 17:01:53 | 517a2592077b067032d6c0379226d0467d7662f1

IO: fix continuous writing session interfered with joining | 2018-06-01 14:23:47 | e15eae8e3537080a82078873d762ad9de61f50f4

Typo fix | 2018-06-03 23:34:22 | e185ed6f918a1df082832c9059a091505b9a5cf9

Introduce deprecated ReceiveChannel#use to preserve backward compatibility with SubscriptionReceiveChannel, fix reactive samples | 2018-06-01 12:30:34 | 313978cf6b3901b1d7fbfb5d1f688c068a072c09

LockFreeMPSCQueue optimized & fixed

* no need for REMOVE token to hurry up GC
* Placeholder logic is fixed to avoid potential data loss on wraparound
* Stress test for resize/copy added | 2018-05-30 18:58:02 | c22a1c748e93db6e7d4e73f9118e8435edbeb698

Leaking handles in awaitAll are fixed | 2018-04-28 16:22:29 | e0b6db04b3bd86e942bc7e40081a82aedd8fd200

Delay bug fixes:
Invoke clearTimeout on cancellation in JSDispatcher
Remove delayed task on cancellation from ThreadSafeHeap on cancellation to avoid memory leak | 2018-04-26 13:03:40 | cd00643b92c9698ca728f92a66f52b30b3811d05

Documentation for debug property values | 2018-04-11 19:21:23 | 590c8889c2bb5341f15ee20e440c5599342fe34b

typo fixed | 2018-04-04 06:59:33 | 905a512625ad96dcd45c789f983babd93dfde011

Add extension to ExecutorService to return closeable CoroutineDispatcher

Fixes #278 | 2018-03-20 19:28:52 | 26f4b9ecd1bdd03299b668541f7c7c9ecaf9ab7c

Debug toString for channels

Fixes #185 | 2018-03-06 10:37:42 | e4b6f09af7c0d0b6963fa8611e867ff3292fad0e

rx-example: Added application plugin & fixed to use runBlocking | 2018-03-05 14:58:59 | 00560e8b0add1628bd0a32202b6f3cc301b35af3

Use NodeDispatcher on ReactNative

Fixes #236 | 2018-03-05 09:01:07 | ecc68f13141d1353aa2bb1d027a077e0fd7be4fb

Check for undefined `window.addEventListener` when choosing default coroutine dispatcher.

Fixes #230 | 2018-02-10 19:35:58 | 54d57e0c1fff22fe1d72c762f2bdbf01995395ca

Update README.md

Minor typo and typography fixes. | 2018-02-04 00:30:58 | 7dd6b66eced47e4ddf0b2c76c974ac19612b827c

IO: fix error propagation in blocking adapter | 2018-02-02 14:18:47 | f0c1d99e2c5c5978da7ace9d58c61a5648ed7687

Update coroutines-guide.md

This tutorial suggests just Async suffix:
https://github.com/Kotlin/kotlin-coroutines/blob/master/kotlin-coroutines-informal.md#asynchronous-programming-styles
Also, there was "of" instead of "or" | 2018-01-29 17:39:02 | 7e94e70734f6e01b0522d11071e6825879a221e7

runBlocking is improved to properly support specified dispatchers,
so that `runBlocking(UI) { ... }` can be used outside of UI thread.

Fixes #209 | 2018-01-29 15:07:21 | cb78787638039096804bc1b97031bcb9801c0547

Workarounds for KT-21968 to fix JS tests | 2018-01-24 20:31:22 | dfeba242b9e328f7528507f9349623671a00333c

IO: fix joining sequence, avoid infinite joinTo suspension | 2018-01-23 20:16:54 | d1842c6301d8debca8509809d473ce7e889b1d7b

IO: make reusable cancellable continuation implement DispatchedTask | 2018-01-12 15:46:22 | 4d01f7ec3b33f7633f3737a5ab3a3fc90703f57f

JS: Introduce Window.asCoroutineDispatcher and use custom queue in
Window.awaitAnimationFrame to align all animations | 2018-01-13 08:20:32 | 1867f6de0fb39077d0cb13fdc0400dd4568f717b

Actually fixed startup/shutdown of DefaultExecutor for tests to prevent
thread leak. Includes test-case. | 2018-01-12 15:28:24 | 9483301695f4c0784d663238ecd0ef04bbfcbea3

MPP: Debug toString should not depend on kotlin-reflect | 2018-01-11 16:04:12 | b79277b4fab5353680445f36dd9b19a740828203

IO: Use TestBase in all tests and fix leaking threads in tests | 2018-01-11 10:48:19 | c45f5fa3b636d66b824351c8d8d9368b8ee4e37f

MPP: Ported DispatchedTask perf improvements to JS and more code is made common | 2018-01-11 09:39:36 | f29203c158a526f90ae8574abfc1ba6dd5249262

Performance: Remove DispatchTask, store value in DispatchedContinuation | 2018-01-10 13:25:25 | f2239e191f55883486d5ce04ffb0c6f75cdc3468

Update coroutines-guide.md

Correct `Dispatcher` spelling | 2018-01-08 13:56:54 | fa13beba79e6ebb68588ba2167b67a77196907d3

Optimize creation of DispatchTask for cancellable continuations (fixed) | 2017-12-28 09:21:14 | bdf23f28c425ea391baa7ddbc3ba012d15e6dfa5

Optimize creation of DispatchTask for cancellable continuations | 2017-12-27 22:09:43 | ac48070de5e20b727b6d9ffd5cc7c259426fb6fb

MPP: DefaultDispatcher internal impl class renamed to JSDispatcher | 2017-12-27 10:14:54 | a919827885289271a6c598ab47fdf4434a8e0da3

fix typos | 2017-12-24 19:55:06 | d2d42ea802b54d2ede23f3edf3c18521ae46a3e9

IO: fix accidentally used tryResumeWithException | 2017-12-06 14:09:01 | 9ef4e0c05168acdb2c955079e2ee857cfec9de06

IO: fix spuriously hanging pipe tests | 2017-12-05 12:41:42 | 4adac45480b33664d79b24f7a779e7d4c1da68b1

IO: fix joining with different write byte orders | 2017-12-05 09:35:56 | 8af8937a34e893661dfe15f9be598eac50b101df

IO: fix infinite writeSuspend loop caused by auto-resuming flush | 2017-12-05 09:27:09 | e6764086ef4a03ec610245740b379f5da617224c

Bug fix: start hangs on lazy coroutine with attached invokeOnCompletion | 2017-11-30 13:41:47 | 5610e1df2eb3f67be8b45633b5d6ffbf73ec6bb8

Add DefaultDispatcher on some reactive operators | 2017-11-29 21:12:35 | e19ee04ca72316f9d67a58d35b8be398b059f1f5

IO: fix too expensive joinTo fast-path | 2017-11-23 09:39:27 | 060f36a06d341f43c0f9e77fd6706bf71f94972c

IO: fix typo in test name | 2017-11-20 08:43:26 | 9a6ca1a006debfa08392027508d03a141ae53841

Introduced ReceiveChannel.cancel method;
all operators on ReceiveChannel fully consume the original channel
using a helper consume extension, which is reflected in docs;
removed `suspend` modifier from intermediate channel operators;
consistently renamed channel type param to <E>;
added two versions for xxxTo fun -- with MutableList & SendChannel;
added tests for all channel operators;
dropped/deprecated ActorJob/ProducerJob, fixes #127 | 2017-08-17 18:01:33 | b555d91193d9e76710062451cf94a94d14820e98

IO: fix race in closeWaitJob of JoiningState | 2017-11-17 16:30:22 | 47d92bafe90d899dfb53cd0f8bf7eae75504047e

IO: fix accidentally missed it | 2017-11-17 16:29:49 | d42bdadc8520ec490d5b37f5f160b54d4541d2f8

IO: fix race in ByteBufferChannel.write(lambda) | 2017-11-17 15:39:03 | 7bf4fa9e3b19a8200450fabe396a0ff854615596

IO: fix joining of already closed but not empty channel | 2017-11-14 11:52:32 | 9e9929d376d2b92cd5fda2f21f7cc1eb51f66ca8

IO: fix lincheck dependency | 2017-11-10 20:22:53 | b94ce42827dc5f9294f19b99da356ad585fb01ea

IO: fixed awaitClose and copyDirect | 2017-11-10 09:22:23 | 373d590e103f3203f61b2fb93b3b82bcce1de13e

IO: fix race in joined flush once again | 2017-11-09 18:18:05 | 8e9138ca4a297189f49bece8e739b6584f69e061

IO: fix joined close/flush | 2017-11-08 13:50:13 | 2fdb5aa4867b60f7c659cf4d950babfd2a43a67a

IO: fixed joined channel flush | 2017-11-08 03:15:39 | 625c1fefa57f95af2b723b7c7e3b1a5319c69faf

IO: fixed joined ByteChannel close | 2017-11-08 03:11:53 | ca8762b2f6a1043103a45153357a5f9e5dc010af

IO: fix writeByte BufferOverflowException

it is important to setup buffer's positions again after suspension
it is not the case if we don't hold writing state during suspension | 2017-11-07 16:42:15 | bab9f7927ca780b242c794578c02ddf63db40375

IO: fix race in readSuspend

consider state change:
writer: IDLE(empty) -> !do write -> IDLE(buffer) -> !close -> closed = C
reader:  !suspend -> resumed -> closed = C -> [here]

here reader can see that there is closed state however to see published
written state it should read state again rather than simply use already
readen state to get happens-before guarantee | 2017-11-07 16:18:16 | 32c90b169d05bd372317f90ae5ad511bbcb05bc5

IO: rewrite if/else/return code to identical

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 11:23:34 | fde1a646fe5a60c8aa211764d63527ec429672c3

IO: eliminate tail suspend calls in when blocks

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 10:54:47 | 4eccfba8d4cbe55ce49ac7b70c40eea1d0adf7c9

No Job in newSingleThreadContext and newFixedThreadPoolContext anymore

* This resolves the common issue of using `run(ctx)` where ctx comes from
either `newSingleThreadContext` or `newFixedThreadPoolContext`
invocation. They both used to return a combination of dispatcher + job,
and this job was overriding the parent job, thus preventing propagation
of cancellation. Not anymore.
* ThreadPoolDispatcher class is now public and is the result type for
both functions. It has the `close` method to release the thread pool.

Fixes #149
Fixes #151 | 2017-10-20 09:36:56 | d9ae2bcb88403e0854b895ba46c2417b4c0a4752

run uses cancelling state & propagates exceptions when cancelled

* When coroutine that was switched into a different dispatcher using
`run` is cancelled, the run invocation does not complete immediately,
but waits until the body completes.
* If the body completes with exception, then this exception is
propagated.

Fixes #147 | 2017-10-20 08:42:06 | bcdd8e17fed40097f9bb8fdb3e218f95ff8603a9

Exception propagation logic from cancelled coroutines is adjusted

* When cancelled coroutine crashes due to some other exception, this
other exception becomes the cancellation reason of the coroutine, while
the original cancellation reason is suppressed.
* UnexpectedCoroutineException is no longer used to report those cases
as is removed.
* This fixes a race between crash of CPU-consuming coroutine and
cancellation which resulted in an unhandled exception and lead to
crashes on Android.

Fixes #152 | 2017-10-20 06:00:50 | 6aed878a67e6f707e6c3afb0879beb8822a95d6f

Fixed Reactor docs (Scheduler.asCoroutineDispatcher) | 2017-10-07 19:58:40 | 8348b8c31d5b07541bd3d268ca2a186b0fe1ad6f

Failed parent Job cancels all children jobs, then waits them

Also improved debug output a little bit | 2017-10-07 12:44:48 | a36ab94253bb9945c6377eb43db0cb1071019c40

IO: eliminate race in close

I knew that I'll hit this bug anyway. Here we MUST flush twice as
flush at read suspend is not enough. If a writer closes then the first
flush does flush and it closes so all readers will see all pending data.
If a foreign thread does close then the first flush is makes no
difference however the second is required for proper cleanup and
to do tryTerminate | 2017-10-04 18:34:18 | ad68c06c1200f2038c26adeab2abf801a2a2114b

IO: fix verifying pool usage

buffer view doesn't hold original pool reference to make
pool chaining working | 2017-09-29 15:18:00 | ccf8dde980a4701b9cd30e1df23e5cbefdd93b53

IO: fix writing byte packet | 2017-09-28 07:58:15 | 754a19b188dc6d486d73b8e3a2f0c483c3f88f9b

Documentation for DefaultDispatcher in the guide | 2017-09-29 18:39:03 | 66f018c489c6b0ec0831fa9953db34da3edff5f3

DefaultDispatcher is introduced | 2017-09-28 11:27:05 | c0d559b594fce802f1d1be9a6feef49019d17160

IO: fix ByteWritePacket.writePacket size update | 2017-09-17 19:48:26 | 5ca0d12c1e8a9672d40fe83cd31d1b2426f397e7

IO: fix writer scope type | 2017-09-11 10:06:54 | ea3a418f84f3731e92658cedfa11878a8828500c

IO: fix byte channel readX operations return -1 during close+flush

Read operation should try flush before return -1 if closed because
the close operation setting close status first then do flush
so reader could see closed status but not-yet-flushed byte counters | 2017-09-11 07:31:08 | e4d3ce750ed8b864a435fb0926d0d77e9c02b208

IO: add more byte packet tests and fix few bugs | 2017-09-06 18:50:51 | 5feaf6973c23fae3c5a8df64748e2181c50dd0d6

IO: fix delimiter lookahead | 2017-09-06 15:52:04 | 1cc86083e7be17ce53f7c80cfa6ba67e8569e33e

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 99cdb380bf6391db7e7d08e8673c627c554074d8

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 776b370d58883e9bce0c309ebb4919ef4cdac13c

IO: fix byte packet write buffer leak | 2017-08-25 08:39:00 | 974cbb3b21b8d7613c41ee2221ce435e347b068f

IO: fix byte channel close with error buffer leak | 2017-08-25 08:06:59 | 24b040f1345db27b45589a975daab45bf9325494

IO: fix CR-only line endings processing + tests | 2017-08-23 11:39:41 | a9a936d1a325ee0baf36df444414e1e17ac539da

IO: rename writeStringUtf8, fix implementation + tests | 2017-08-23 09:26:18 | fbcba264a37580b5c47f3314395e5146afb38287

IO: fix copyAndClose + tests | 2017-08-23 09:11:55 | fc84a634ff9a1acca04e09fa5a031b904c5c8838

IO: byte packet readLine support + bugfixes | 2017-07-26 09:59:16 | 0b12ffc0178844e813223039adf5d7510703485d

Fixed bug in LockFreeLinkedList (invariant & lock-freedom violation)
Migrated atomic ops to AtomicFU library for ease of code maintenance
Implement lock-freedom testing in LockFreeLinkedListAtomicStressLFTest | 2017-08-10 18:09:26 | 7eb41efbacd498704f25465e2a58f4892c16aa32

Typo fixed | 2017-07-24 13:42:34 | a448903dcac25e450d87c49705e7a6693a300d29

Use CompletableDeferred in the guide section on coroutines;
fix (reknit) broken links to factory functions that are now top-level | 2017-07-21 22:00:30 | 256812a1c09511744575ed3d2c64fec27979f391

More documentation on CompletableDeferred states and style fixes | 2017-07-21 15:04:23 | 8e2ae9964614e35295a8d695114b00c35f5fc755

Better debug strings for continuations | 2017-07-12 12:22:21 | 69d9c852289f1a4a9ffe107dc75cc71871cfe34e

ObservableBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 10:16:30 | ed6985459318209be084ff807676cb722387fb6f

PublisherBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 09:58:44 | 58246ca7e7727632ba50c41d0314df47ba9e3fc0

Fixed IllegalStateException in select that concurrently selects, which
was due a problem with Job concurrent cancel and dispose of handle.
The bug was introduced by addition of Cancelling state for a Job.

Original stack trace in select was:
java.lang.IllegalStateException: Check failed.
	at kotlinx.coroutines.experimental.internal.LockFreeLinkedListNode.remove(LockFreeLinkedList.kt:236)
	at kotlinx.coroutines.experimental.JobSupport.removeNode$kotlinx_coroutines_core(Job.kt:734)
	at kotlinx.coroutines.experimental.JobNode.dispose(Job.kt:995)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.initCancellability(Select.kt:294)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.getResult(Select.kt:273) | 2017-07-11 09:50:00 | e9f64491787433b3d53ad5800456524820058d5f

typo fixed | 2017-07-10 10:46:13 | d28cc872fb7815b51ceb7c84a4e77117fce380c7

typo fixed | 2017-07-10 10:44:07 | 8b0b07ab81f12bc605462a6a1333b61abce547cb

typo fixed | 2017-07-10 10:43:20 | 93f7e8e22019643caaf14ae480c05ab0a349064d

Bug fixed on waitTimeoutOrNull (was flaky testOuterTimeoutTest) | 2017-07-10 10:38:54 | 769d48217f8787c7f64c07da6e53c27b2d703274

Refactor DispatchTask to reuse it for dispatchYield | 2017-07-10 10:16:20 | 2a93646a8054ce7819e9bdbff8d28849a19e874b

Fix SecurityException when trying to read "kotlinx.coroutines.debug" prop | 2017-07-10 07:15:40 | e824eaaab9d053ff0f2cc028c7413bb83adcacc0

A fix & optimization for select impl helping scheme | 2017-07-05 06:53:29 | 907074f1f63871ed29feab3173a2e38b30d8fbb6

Reactive tests fixed for cancellation logic change | 2017-06-26 11:25:56 | 7a7b00938934ef7d0855eb24ec93a06d0b0c97e7

Fix typo: debugging more -> debugging mode | 2017-06-24 21:03:35 | ed5ed49913498b4e880415d2f0fb9004e20e1b5a

Typo fixed | 2017-06-23 10:27:02 | 6c18dfd15f6e1703db57531422bc0df3cb7d08ff

fix typo.

somethine -> something | 2017-06-18 07:37:59 | 81a6f23ca68d7ed37f36dcb966fe74e3bc53de57

Typo fixed | 2017-06-09 17:25:03 | c3c2f3269220f5d7ae20e7592ca1253061b50a95

CoroutineExceptionHandlerTest fixed | 2017-06-09 15:59:25 | 866521b83ed0676d0203dec35de5fb797bc9a59d

SimpleSendReceiveTest is fixed to account for close conflation | 2017-06-06 11:36:38 | 9ff32644381bf1a692d9a935170a9f7b7023f244

Fixed lock-freedom of send/offer on closed channels and related bugs.
Conflated[Broadcast]Channel hang of concurrent offer/close is fixed. | 2017-06-05 14:04:39 | e6e8ce8d46cee273e00ee130334239880734dc2f

Integration readme title fixed | 2017-05-17 11:59:49 | 0c2e25d7c38f50bd3c9866ea1fc2c12d5d74251a

launched jobs and await can be cancelled while waiting in dispatch queue

* suspendAtomicCancellableCoroutine function is introduced for funs like
  send/receive/receiveOrNull that require atomic cancellation
  (they cannot be cancelled after decision was made)
* Coroutines started with default mode (CoroutineStart.ATOMIC) using
  async/launch/actor builders can be cancelled before execution starts.
* CoroutineStart.ATOMIC is introduced as a start mode to specify that
  coroutine cannot be cancelled before its execution start. | 2017-05-11 17:15:18 | a74eb5f8b08e84f904e75aa71da4547c9178da8d

Fix withTimeout/OrNull bug with spurious concurrency on cancellation | 2017-04-20 16:23:18 | ca9d5be31a30c5f6a20875438f9ae40db4183f4c

Refactored ThreadPoolDispatcher to reuse code of ExecutorCoroutineDispatcher | 2017-04-18 12:28:35 | f04f51d5b05a0aec7c97acc202d180096a095fbf

equals/hashCode for wrapper CoroutineDispatcher impls | 2017-04-11 10:50:03 | 30dd5c129c493ca7b1a3b2b80437e8a7ec68f3ec

Starting coroutine in UI event handlers without dispatch in UI guide | 2017-04-07 15:06:22 | f724f6e2fe7c20cb48b69cd7b19b2658313231e4

Nicer toString implementations for CommonPool & Unconfined dispatchers | 2017-04-07 07:35:28 | dc9fd1c2d18da2f23d9907148b4674cda6418e49

Few minor docs & build fixes for reactor support | 2017-04-06 19:15:35 | 523516abd2023f8d968d389b32dee713130a9f83

Merge pull request #53 from mkobit/patch-1

Correct typo in coroutines-guide-reactive.md | 2017-04-05 09:41:56 | 7676e2239947273c6cbb4cb77536042bd9f2ce43

Fix repository urls

need to be reverted once bintray will fix jcenter sync issue | 2017-03-23 14:45:39 | 78fd3cb8932410af9beab4effc04bdeea4343732

Merge pull request #42 from jakiejj/master

fix typos in comments to Nio functions | 2017-03-20 07:16:24 | 9ef792fec6775bb5cdb08c84511488f324db3322

fix typos in comments | 2017-03-17 20:48:39 | 4d927c76488b96abaae7ba003f8064ad84b8334e

Typo fixed | 2017-03-14 17:39:50 | 81a5b7144484dcc8ebc89cd98fd9bd8a2d45afbe

startUndispatchedCoroutine is renamed to startCoroutineUndispatched for consistency with coroutine intrinsics | 2017-03-14 16:39:26 | 4638d79097a3d5b0c1b32c1e468ad723cc4b2bd9

Fixed bug with sometimes missing `onComplete` in `publish`, `rxObservable`, and `rxFlowable` builders | 2017-03-13 09:03:35 | d14a3901f365f622d9a7ba96fc00900011c9c009

Scheduler.asCoroutineDispatcher extension for Rx 2.x | 2017-03-10 12:06:01 | a1fe3da17907024afa50a35cbfcc72639d62bf78

not -> no typo fixed | 2017-03-09 09:57:57 | 228d084bfb87f967e216b84029b58649fcbe7472

Executor.toCoroutineDispatcher is renamed to asCoroutineDispatcher | 2017-03-09 09:03:39 | 38b5ea18e36f1a53d4cde27bf3fd21522727cbbb

Fixed dispatching logic of `withTimeout` (removed extra dispatch) | 2017-03-02 21:15:21 | 43d831f61f33262dcb4621069451d1699898d1cb

More links and typos fixed | 2017-03-01 14:21:48 | cc63363ead9d82f4e246a319ca3e0cb9f15e3a14

top-level readme links fixed to produce & co | 2017-02-22 12:04:28 | 40e89f689f89ae643f68c68efc57aebd8f8284ed

Jon.onJoin select clause is implemented, lazy onAwait/onJoin & dispatch fixed | 2017-02-22 11:56:58 | d84dbc2d75927fe8446098a225a3fbb884683bde

startUndispatchedCoroutine utility functions | 2017-02-22 06:53:49 | ee88fbef2d78e4b25f741efffabf4756bff8e7f3

buildChannel deprecation template fixed | 2017-02-20 12:53:30 | de8b9e9b336491ff0dbf107fe35d9efa030d92d3

Merge pull request #31 from gildor/on-completion-deprecation-fix

Job.onCompletion deprecation template fixed | 2017-02-20 12:49:41 | 85923e2de75ed522903cc3d64aef2ad178c1cbf8

Job.onCompletion deprecation template fixed | 2017-02-19 13:26:29 | c8f9ca308abe963cafa5f676410402fc287cfa5a

Delay implementation in Swing, JavaFx, and scheduled executors is fixed to avoid an extra dispatch
CancellableContinuation.resumeUndispatched is introduced to make this efficient implementation possible
Additional documentation for CoroutineDispatcher implementors | 2017-02-10 10:30:38 | a198bad7365a508baf1041993e9a14007f9d5aa3

Doc fixed | 2017-02-10 10:14:35 | 8c8551e7dbea7c2467060c2d3c6aa1c54c721e68

Merge pull request #29 from cbeust/patch-1

Update coroutines-guide.md | 2017-02-07 17:52:01 | 4d821e3901d038f005850b38d1e4954506306383

Merge pull request #28 from erokhins/patch-1

Update 1.1.0-beta-37 to 1.1.0-beta-38 | 2017-02-02 19:24:36 | 40f69cf704e7b31cec9c8a935317d8c173e79623

Added deprecated (with error level) plus operators on Job and CoroutineDispatcher to catch potential problem with their incorrect use at compile time | 2017-02-01 15:43:32 | 79a2868295127b81056f66d644da72db5a40d772

Merge pull request #27 from tairrzayev/readme-fix

Fixes the typo in the coroutines-guide.md | 2017-02-02 06:15:26 | 9d844fa1733f83e5e1b85c3e762a69729d3c5ef2

Dispatchers default behaviour is changed to schedule new coroutine for execution later.
Job.getInactiveCancellationException is introduced.
yield is cancellable while it is waiting to executed.
core tutorial is expanded. | 2017-01-29 18:58:33 | 7cf452eab59cdca570227f071cba2da374f77110

Finer grained control on debugging facilities | 2017-01-24 07:29:53 | aecb9aa1606b79243c8e93221de9713c164ce015

Added context parameter to CoroutineDispatcher methods, implemented Executor.toCoroutineDispatcher | 2017-01-23 13:47:20 | 67891d867da022d608d4589859002f256d9a313e

Fixed initialization of Job with parent (initParentJob), fixed handling on uncaught exceptions in standalone coroutines | 2017-01-20 09:19:52 | 58a7add417403811e822a4f6f7689ae3fd0e2018

Minor: fix version of maven-deploy-plugin, fix pom warnings | 2016-12-21 17:21:30 | c4ad15fc6246b7496d610da7419441020dfe1c56

Merge pull request #6 from hhariri/patch-1

Fixed packaged names | 2016-07-27 07:04:12 | c6993089412fbc491ddeb0a71b57e67bf31e21d6

Fixed packaged names 

On the repo, the package names don't have the suffix -1. | 2016-07-27 06:03:41 | 1abe89716c093c9e010a45a5235da7f9b50eea17

Cleanup docs to describe the behavior as similar to
[Dispatchers.Unconfined] | 2019-08-09 04:47:21 | 75da94e592270f4ef9a654adb37610a6146a4e4f

Implement an eventLoop for runBlockingTest.

As a result, runBlockingTest is now correct in the presence of repeated
time-delayed dispatch from other dispatchers.

Changes:
- runBlockingTest will now allow a 30 second timeout for other
dispatchers to complete coroutines
- Introduced WaitConfig, SingleDispatcherWaitConfig, and
MultiDispatcherWaitConfig to configure runBlockingTest timeout behavior
- Added DelayController.queueState as a ConflatedBroadcastChannel to
observe or poll the queue status of a TestCoroutineDispatcher
- Added queue status of Idle, HasCurrentTask and HasDelayedTask as
public APIs for quering the status of a TestCoroutineDispatcher
- Added dependency on runBlocking from runBlockingTest
- Improved documentation for threading concerns around resumeDispatcher | 2019-06-19 18:48:15 | 4910a5dcafaa79853889de1d64a63d7caaaca959

Support completing the test coroutine from outside the test thread.

This requires a call to invokeOnCompletion to get the completion state
from the other thread.

Changes:
   - runBlockingTest now supports completing the test coroutine from
     another thread
   - success and failure path tests

While fixing this, a subtle non-determinism was discovered that would
lead to flakey tests. If another thread completed the test coroutine
*during* the cleanup checks it was possible to modify the state of the
test during the cleanup checks in a way that could expose false-positive
or false-negative results randomly.

To resolve this, a non-completed coroutine immediately after
advanceUntilIdle is now considered a failure, even if it completes
before the more aggressive cleanup checks. There is still a very brief
window (between advanceTimeBy and getResultIfKnown) that non-determinism
may be introduced, but it will fail with a descriptive error message at
on random executions directing the developer to resolve the
non-determinstic behavior.

Note: testWithOddlyCompletingJob_fails may fail when the implementation
of runBlockingTest changes (it's very tightly coupled). | 2019-05-18 01:00:20 | 1f5bbac3a115f4d715e8e71c4e45886ed3df1e58

Eagerly create cancellation exception during Job.cancel call to make stacktrace even shorter

Also, fix stacktrace recovery in select clause | 2019-10-04 19:35:19 | ae57774c1ea253e0272d92c4c064b2b721847989

Change stacktrace recovery contract

    * Stacktraces are no longer recovered in DispatchedTask.run
    * Callers of uCont.resumeWithException are responsible for recovering the stacktrace
    * CancellableContinuation.resumeWithException recovers stacktrace if necessary
    * Properly recover stacktrace in Channel.receive fast-path
    * Properly recover stactraces on Channel.send fast-path
    * Restructure stacktrace recovery tests | 2019-10-03 13:45:49 | 3b2e4377ac14b9c9c4acfc01d9d50a5c9519e9de

Shorten resume call stack

Calls of afterCompletionInternal are pulled up the call stack. This
is very important, since scoped coroutines do "uCont.resumeWith" from
afterCompletionInternal, which makes all the JVM method visible in the
debugger call frames and in exceptions.

Additionally, this allows for some simplification of the JobSupport
code, as a number of methods do not need "mode" parameter anymore.
Moreover, the kludge of MODE_IGNORE is no longer needed and is
dropped.

Make TimeoutCoroutine extends ScopedCoroutines.

Fixes #1574 | 2019-09-25 21:14:05 | ff9060c5f0054940e9204049ba30fd6797899ca0

Fix race in channel select/cancel

This bug was introduced by PR #1524. It was reproducing when there
is a regular "send" operation on one side of a channel and
"select { onReceive }" on another side of the channel and the
"send" coroutine gets cancelled. The problem is that
SendElement.tryResumeSend implementation was calling finishPrepare
before it has successfully resumed continuation, so if that
continuation was already cancelled, the code in "finishPrepare" had
already stored the wrong affected node which it would later try to
call "completeResume" on.

This patch also adds hexAddress to the debug toString method of
all internal node classes in channel implementation.

Fixes #1588 | 2019-10-02 11:42:30 | d9d35747cfa336108734a47f7aac1aa05410389a

Fix race condition in pair select

This bug was introduced by #1524. The crux of problem is that
TryOffer/PollDesc.onPrepare method is no longer allowed to update
fields in these classes (like "resumeToken" and "pollResult") after call
to tryResumeSend/Receive method, because the latter will complete
the ongoing atomic operation and helper method might find it complete
and try reading "resumeToken" which was not initialized yet.

This change removes "pollResult" field which was not really needed
("result.pollResult" field is used) and removes "resumeToken" by
exploiting the fact that current implementation of
CancellableContinuationImpl does not need a token anymore. However,
CancellableContinuation.tryResume/completeResume ABI is left intact,
because it is used by 3rd party code.

This fix lead to overall simplification of the code. A number of fields
and an auxiliary IdempotentTokenValue class are removed, tokens used to
indicate various results are consolidated, so that resume success
is now consistently indicated by a single RESUME_TOKEN symbol.

Fixes #1561 | 2019-09-22 18:13:12 | 2f8bff1b0972defc473dd8c857600db481f013a3

Introduce reusable cancellable continuations for hot loops with channels (#1534)


  * Average performance improvement is around 25%
  * API is internal and targeted to specific usage
  * DispatchedTask and DispatchedContinuation are extracted to separate files for better readability and maintainability
  * Ensure ConsumeAsFlow does not retain reference to the last element of the flow with test | 2019-09-25 15:02:24 | 946e5789fa982e397d49b788d308afdc5d44ccce

Fix StackOverflowException with select expressions

* onSend/onReceive clauses on the same channel: Instead of
  StackOverflowError we throw IllegalStateException and leave
  the channel in the original state.
* Fix SOE in select with "opposite channels" stress-test. The fix is
  based on the sequential numbering of atomic select operation.
  Deadlock is detected and the operation with the lower sequential
  number is aborted and restarted (with a larger number).

Fixes #504
Fixes #1411 | 2019-08-30 10:01:19 | 3dbe82b44e6af89719c6d331400aed58de9e5521

Install debug probes in CoroutinesTimeout constructor to capture coroutines launched from within a test constructor

Fixes #1542 | 2019-09-17 14:26:45 | fcc004c2a03be7c7389a3a95b7a805058fb936e5

Eagerly create coroutine for lazily-started coroutine builders in order to trigger DebugProbes.probeCoroutineCreated

Fixes #1544 | 2019-09-17 15:32:43 | 858094ee4262ab93a8ec9a1ff24e6df4bc9a8ed4

Do not aggregate all coroutine info into a single string before dumping it to the out in DebugProbes.dumpCoroutines

Previously it was done intentionally to reduce synchronization window of DebugProbesImpl, but still have a consistent view of the world and to avoid interleaving with other usages of out.

Apparently, applications with a significant amount of coroutines (e.g. Ktor) may spend a lot of time or even experience OOM in DebugProbes.dumpCoroutines. To make it usable in such applications, we dump coroutines incrementally without releasing a lock in DebugProbesImpl (thus significantly increasing synchronization window) while holding a lock on out to still have a continuous dump.

Fixes #1535 | 2019-09-16 17:21:33 | 3826ae58bc3651a6d76be256d51b866947581b60

Improve docs / fix grammar | 2019-08-05 13:32:34 | a7afd4657de916978898570d0baf86c0d73906f5

Fixed site publication in build script

:example-frontend-js:bundle task is fixed. | 2019-09-04 15:57:21 | a70022d6e7d9aa5d8fe27a2c46e987a2e8b85c21

Fix of a bug in the semaphore (#1477)

* Add a failing test for a semaphore

This test consistently fails for the current implementation. It
attempts to cause the following state: after `job2` increments
`availablePermits` but before it wakes up the acquirer in the
queue, the acquirer is cancelled. Then, regardless of whether
`RESUMED` or `CANCELLED` was written first, another cell in the
queue is marked to be resumed. However, this is incorrect: on
cancellation, the acquirer incremented the number of available
permits once more, making it `1`; thus, at the same time there
exist two permits for acquiring the mutex. At the next loop
iteration, a new acquirer tries to claim ownership of the mutex and
succeeds because it goes to the thread queue and sees its cell as
`RESUMED`. Thus, two entities own a mutex at the same time.

* Fix a bug in semaphore implementation

The fix works as follows: if `availablePermits` is negative, its
absolute value denotes the logical length of the thread queue.
Increasing its value if it was negative means that this thread
promises to wake exactly one thread, and if its positive, returns
one permit to the semaphore itself.

Before, the error was in that a queue could be of negative length:
if it consisted of only `N` cells, and `N` resume queries arrived,
cancelling any threads would mean that there are more wakers then
there are sleepers, which breaks the invariants of the semaphore.
Thus, if on cancellation the acquirer detects that it leaves the
queue empty in the presence of resumers, it simply transfers the
semaphore acquisition permit to the semaphore itself, because it
knows that it, in a sense, owns it already: there is a thread that
is bound to resume this cell. | 2019-09-03 13:43:23 | 9a62f27d1fe53552b0838156c17adc3b68dcc585

Repaired some of ListenableFuture.kt's cancellation corner cases.

This fixes:
  - Cancellation without an untrapped CancellationException propagating
    through a Callback; isCancelled() is the correct way to check for
    cancellation
  - Bidirectional propagation of cancellation through
    `asListenableFuture()`
  - The cause getting lost in the `asListenableFuture()` future  when
    cancelling its `Deferred` parent with a cause

This also:
  - Extensively documents the package and the contracts created by the
    promise-creating extension methods and `future()`
  - Uses `getUninterruptibly()` for speed
  - Uses `AbstractFuture` to make as certain as possible that
    `Future.cancel()` will return `true` at most once
  - Should clear up rare spooky race conditions around
    cancellation/interruption in hybrid Coroutines/Guava Futures
    codebases

There are probably a few more interesting corner cases hiding in here,
but this should be a good start improving the correctness of `.guava`'s
adapters.

This is a squash commit of kotlin/pr/1347, rebased on develop:

- Incorporated first-round feedback.

- Merged CancellationToCoroutine into ListenableFutureCoroutine to save an
allocation.

- Documented and tested for null completion of asDeferred()'s parent
Future.

- Renamed a cancellation test case for clarity of purpose.

- Split asDeferred() documentation between KDoc/details

- Implemented InternalFutures faster-fast path. Documented. | 2019-07-16 20:19:17 | 57cc36454da6851ecd2a00abe7cfd6ee6e06928f

flow: fix recursion in combineTransform<T1, T2, R>() | 2019-08-23 14:21:37 | 1f5ab53f7c7259fee1d28994b6402f40669f8a52

Introduce CoroutineDispatcher.asExecutor() extension (#1457)


Fixes #1450 | 2019-08-22 12:20:38 | bcf4a8cba083e5650b1c63a05da481f1b61c3e75

Add skip_snapshot_checks flag for snapshot train debuggability | 2019-08-21 14:08:34 | 6ca6ed5af208f72d443f747b7953c073acc4624d

Merge branch 'master' into develop

# Conflicts:
#	docs/coroutine-context-and-dispatchers.md | 2019-08-09 15:03:25 | a6da28e45948a4197fa3e3b80aa29bcee1f042f0

Renaming switchMap to flatMapLatest to better reflect its semantics and to have a consistent and meaningful naming scheme for the rest of the 'latest' operators

    * Make flatMapLatest pure, do not leak cancellation behaviour to downstream
    * Make *latest buffered by default to amortize constant re-dispatch cost
    * Introducing transformLatest
    * Introducing mapLatest

Fixes #1335 | 2019-07-28 18:59:25 | 3a958845a7f091fc9f3218aae20abed17c9e57be

Fully copy CoroutineInfo for DebugProbes.dumpCoroutinesInfo, it is re… (#1368)

* Fully copy CoroutineInfo for DebugProbes.dumpCoroutinesInfo, it is required for IDEA integration (field is left as internal deliberately)
* Make CoroutineInfo non-data class | 2019-08-09 14:36:25 | 0172998c5df4dc219c17f03d03502a42998f535e

Get rid of NonRecoverableThrowable, mention way to opt-out stacktrace… (#1420)

Get rid of NonRecoverableThrowable, mention way to opt-out stacktrace recovery in debugging.md | 2019-08-09 14:32:34 | 897f02e18a8538b53f1eeb6157a1c0cff0b65476

coroutine-context-and-dispatchers.md: Improve article usage, fix typos, reword phrases for better readability | 2019-08-07 15:27:21 | 28241ebd08977fc323d41366ed0c6705f9285095

Use setTimeout-based dispatcher when process is not available on the … (#1409)

* Use setTimeout-based dispatcher when process is not available on the target runtime

Fixes #1404 | 2019-08-05 14:59:11 | 2fc234cb6d24ee3f65a7aa35e4aeea6e506315d2

Update Guava to the latest version 28.0

This fixes vulnerability CVE-2018-10237
See https://ossindex.sonatype.org/vuln/24585a7f-eb6b-4d8d-a2a9-a6f16cc7c1d0 | 2019-08-05 11:58:23 | db95996ceb2758dfc7ccfe9ac805dace2e89128f

Flow.kt: fix typos and rephrase some expressions for better readability (#1408) | 2019-08-05 11:12:26 | 41428a3673f84c40766c9f65421f1649cffb328d

Better docs on coroutines debugging property

* Mention in the guide that `-ea` turns it on.
* Give a link to DEBUG_PROPERTY_NAME instead of newCoroutineContext.
  The later does not have details on its page anymore, since
  the details were only mentioned in JVM version.
* Move description in of debugging facilities to DEBUG_PROPERTY_NAME
  in the code. | 2019-07-23 13:33:07 | d78084b32295c923e2b8312a24729281f19517ca

Properly specify transitive dependencies for kotlinx-coroutines-debug | 2019-07-19 11:16:14 | 2f5036365b035912ce3efd25c307f70479bd9908

Move event loop infrastructure to common code

This makes code of EventLoop (including its task queue impl) shared
between JVM and Native making support and further fixes easier.
It it not actually used in JS and DCE should remove it. | 2019-07-02 12:30:47 | 98a970559601222de378d89920a8f4710d6baa31

Recover stacktraces for no-dispatched continuations, so recovery works in 'suspend fun main' cases to further improve user experience

Fixes #1328 | 2019-07-16 12:36:59 | f22604b01788784fd06b5f01554dc4800e7ff183

Rewrite assertions so that they are checked only in debug mode

* Make sure assertions are absent on native and JS
* Only print full toString for Job in debug mode | 2019-07-02 13:21:22 | 583d39dd4fe1d8f488df3e384901aa19f95166e2

Decouple asFlow from batchSize and move it to buffer instead, promote… (#1279)

* Optimize Publisher.asFlow and fix conflation
* Use channel.receiveOrNull instead of for loop iteration
  (it is more efficient)
* Calling Publisher.asFlow().produceIn(...) uses a single channel
  and is implemented via Publisher.openSubscription() | 2019-06-26 09:09:32 | 502610e7af760a73ea974f9c7cb75ec26a14d167

Unmute debugger test that were broken in 1.3.31, increase debug test timeout (slow CI), make shutdown more graceful by reducing timeout per thread (slow CI + unfortunate timings) | 2019-06-24 17:53:53 | bb97ffbb069774f2ba6ceb8e7dc4c6a2263ef9ff

Update "Shared mutable state and concurrency" guide with best practices

* Properly use structured concurrency in the example code.
* Also remove a special not on <= 2 core CPU, which is no longer needed
because default dispatcher has always at least two CPUs.

Fixed #1241 | 2019-06-01 11:18:42 | d94652feec64040c2c77af630fc4df30032e0efc

Enable R8 optimization of Dispatchers.Main loading

The developer still has to disable the FastServiceLoader manually
if they're using R8.

R8 is then able to optimize away the ServiceLoader and reflection
entirely, resulting in direct class instantiation and no extra I/O
on calling thread.

Fixes #1231 | 2019-05-30 12:17:51 | b9b7d828b18b2462817b6ed0c1a56233a4b6fcf4

Use identity hash code on K/N for debug strings

Fixes #1237 | 2019-05-31 11:39:08 | a3f150e66f7c47e0a0cefed4d9aa03199dff9e7f

Amortize the cost of coroutine dispatch using message queue in all JS dispatchers.
Use Promise.resolve and process.nextTick as dispatch mechanism for cold starts | 2019-03-01 11:25:23 | b7e1499b966175782cf2a5045c5bd3bb95a63b8c

Documentation improvements (#1229)

* Improve MainCoroutineDispatcher.immediate documentation
* Remove obsolete readme and package descriptions
* Clarify possible replacement of onCompletion parameter in produce
* Add paragraph about parent cancellation to async (Mention structured concurrency, but do not explain it there as the term should be easily googlable).

Fixes #1219
Fixes #994 
Fixes #787 | 2019-05-31 10:16:19 | c81dc91159dd1e33060ead8eeccc78df94c4649d

New flow builder: channelFlow (and its alias callbackFlow) and supple… (#1214)

New flow builder: channelFlow (and its alias callbackFlow) and supplementary ProducerScope.await method

Rationale:

    * Can be used in different context without breaking context preservation
    * Can be used to build concurrent operators such as merge
    * Can be used to integrate with callbacks
    * Is less error-prone than flowViaChannel because requires explicit await() call

Partially fixes #1210 | 2019-05-27 21:37:46 | b08d61c6c25d1a030ef37b6788b9ed3922520c85

Improve coroutine exception handling logic

  * Wrap exceptions into CE if parent cancels its child. This is possible because now we can be sure that no one is invoking `cancel(Throwable)`, thus if parent cancels its children, an exception is definitely handled.
  * Now exception is handled only once

First part of fix for #689 | 2019-05-17 08:55:17 | b0f6e05822f225afba43ed6e728669fe320146d8

Fix overflow bug in Flow.drop | 2019-05-20 07:45:03 | e35637a9faabb021d7a5efdc5509910cb499cd7a

Fixed Dispatcher docs

* Fixed typos
* Added reference to kotlinx-coroutines-test for testing `Main` dispatcher | 2019-04-27 19:32:57 | a2499a3ffe7522b8881a41ada45ce1779494be51

Ensure that there are no references to atomicfu in classes

* Updated to 0.12.7 version of atmoicfu with fixes.
* Added test that that is no references to atomicfu in any of the
  resulting class files.

Fixes #1155 | 2019-05-02 23:56:40 | 485eab1611433e49bd1d7c4a302b4825daf0d2e9

Knit: fix handling of backquote when making anchor reference | 2019-05-06 23:46:46 | 80039323d7ef284c3c4b851a6f3a91c46b3d7971

Knit: fix handling of backquote when making anchor reference | 2019-05-06 23:46:46 | b81f5f0ad73bc163a01a2ec88e2cb2e3d61927e1

Fixes kotlin-coroutines-test TestCoroutineDispatcher docs

Fixes #1163 | 2019-04-30 21:27:20 | 9614536ff093c99fc7febd5e31547ede8c8ceb5d

fix: broken anchors | 2019-05-06 07:26:16 | e3030e36945d79d7e54f0decaeef099a1720efcd

kotlinx-coroutines-test cleanup

    * Yield support in test dispatcher
    * Allow partial override of coroutine context
    * Code style fixes | 2019-04-25 21:07:56 | 9e5f9ab46506369f759d72e1195d9d7eb3ef1116

Flow operators: (#1132)

Flow operators:

    * switchMap
    * debounce
    * sample
    * Update RxJava version to 2.2.8

Partially fixes #1107 | 2019-04-24 14:14:03 | fe820bad2dc0743281f6ad130824114507a0a00a

AtomicFu version 0.12.5

This should really fix processing of class files

Fixes #1116
Fixes #1064 | 2019-04-22 18:05:50 | 26a14eef3c6fdf9480719dc1bc25b249b58bcb87

Fix atomicfu post-processing and dependencies

* Update to atomicfu 0.12.4, which fixes plugin operation with
  kotlin-multiplatform
* Remove explicit dependencies (plugins adds them automatically)

Fixes #1116
Fixes #1064 | 2019-04-19 15:51:05 | e1ac2e5c193654469468a04e4cadced3e3040e63

Add a period in the "You can get full code here" blocks and other small fixes | 2019-04-21 07:51:25 | 69c26dfbcefc24c66aadc586f9b5129894516bee

Knitted links and fixed minor style issues in test docs readme | 2019-04-21 08:21:59 | 445e798c3406c182337636026188fefd9f1cc950

Add README.md description of runBlockingTest, TestCoroutineContext, TestCoroutineDispatcher, TestCoroutineExceptionHandler. | 2019-04-21 01:10:09 | c0a8d1c078b6c3de49e3f6a4f77f2c713f47c7ac

TestCoroutineDispatcher code style cleanup and todos

* Kotlin libraries code style: explicit visibility and other style-issues
* DelayController.currentTime() is val
* Using atomicfu in place of AtomicXxx classes
* Added version to ExperimentCoroutineApi annotations
* Some todos are added for future consideration
* Fixed long overflows on delay (clamp) and added test
* License headers added to files
* Tests moved to an appropriate package
* Additional ordering tests using TestBase "expect" infrastructure | 2019-04-20 15:12:08 | d76456f1b6a92868e9f2f01309167003c94c66ca

fix typo: Coroutine"s"Context | 2019-04-17 08:58:42 | 43983505033a67719b0621572b868fc55f492016

Rework purity concept:

   * Purity is a way too polluted word and it is hard to tell what it means in Flow
   * Rename "purity" to "context preservation"
   * Prohibit changing the context, ignore only Job and CoroutineId (for debug mode) in SafeCollector
   * Reword documentation, add more samples
   * Add explanation for deprecated Rx-like methods | 2019-04-09 16:43:11 | d3cc25ff32a80de93ad5eaa912c8b54036c0f978

Unmute test that was failing due to JS BE bug | 2019-03-25 16:21:40 | 0d69e1353d9fcd5867fe74e0912d3f36dc7d8ea8

Merge pull request #1023 from Kotlin/debugger-sm-bypass

Improve stacktrace merge heuristic: skip state machine meaningless fr… | 2019-03-22 15:02:32 | 4ebc1306dd6e0a5929a9044bd65ff92edfeac8e0

Merge branch 'develop' into debugger-sm-bypass

# Conflicts:
#	kotlinx-coroutines-core/common/src/Timeout.kt | 2019-03-22 14:36:33 | 1ea4da4e510f68cb9311b140d2c2e13e8acefe6b

Rename CoroutineState to CoroutineInfo and improve its API

  * Rename jobOrNull to job
  * Replace coroutine with its context
  * Add check-and-act on isInstalled flag into synchronized blocks in order to avoid spurious memory leaks during uninstall
  * Replace WeakHashMap with Set to simplify debug probes | 2019-03-05 15:43:13 | 2496dc256712eb3bb282d3291cedc1497a09cdc8

fix documentation typo | 2019-03-14 13:49:36 | 325b0ad1ee98450e2598e2c0738a398e7b23d959

Add test about threading for immediate dispatch. | 2019-03-14 23:47:26 | a69f73613977bda2c25523cfcae93d6f74bd9cc0

Rename DispatchException to CoroutinesInternalError and make it an Error to better reflect its semantics | 2019-03-07 12:15:40 | 132c1e3f029610208607dcac4d55ed05f62d0642

Get rid of quadratic complexity during stack unrolling in debug agent in 1.3.30 | 2019-03-05 15:26:09 | e35baa43d379e9a7ee3eadc392665dc011268525

Make JobCancellationException copyable in debug mode

This simplifies trouble-shooting of "what caused cancellation", as you
can print out exception and see its recovered stack trace. | 2019-03-04 19:20:25 | d293639980d7a6141394dc8174180f221daa4787

Add operator invoke for CoroutineDispatcher | 2019-02-11 13:21:44 | 57540d452ef82207f14c4235ee690a4323a343fa

Hide cancel(Throwable), introduce cancel(CancellationException)

Job/ReceiveChannel/BroadcastChannel.cancel(Throwable) is now hidden and
cannot be invoked from a newly compiled code. This function had broken
semantics when used with an arbitrary exception. A safe replacement
is available in the form of cancel(CancellationException) where
CancellationException can be used to supply additional information
for debugging purposes.

Fixes #975 | 2019-03-01 09:08:43 | 0aad8f1274c4be7f02ac8f361eb0685d4b438243

Improve CoroutineDispatcher documentation | 2019-02-27 11:19:21 | 08f8214ddbcdbf0becc2b5264caf29080f04576f

Promote Dispatchers.Unconfined to stable API | 2019-02-27 10:16:00 | 9863de1401a90de61307c1ade952ebd7ac65a88a

Promote MainCoroutineDispatcher.immediate to stable API | 2019-02-27 10:02:03 | 4fc4fd555f784775360c464e178d7662291f5fba

Cancellation in consumeEach should dispose Rx Observable

Fixed bugs in MaybeSource/ObservableSource.consumeEach implementation
so that observable is disposed on cancellation.

Also optimized implementation of bridge function to avoid extra dispose
calls if possible (this is permissible by specification, though)

Fixes #1008 | 2019-02-26 16:03:24 | ae8a8743dd37a442c7882a04d1da0de367671ccd

Replace UI with Dispatchers.Main in CoroutineScope documentation

Fixes #803 | 2019-02-27 14:22:29 | b37c296f03ee38cd5cdf5091fa67a010c6a3f6d3

API Cleanup based on review

- removed asyncTest
- added pauseDispatcher(), pausDispatcher(block), and resumeDispatcher() API to delayController
- removed dispatchImmediately (the name was fairly opaque in an actual test case)
- added exception handling to runBlockingTest | 2019-02-12 02:46:06 | 8328a39b39d60fe4e44b6e1e5796d37ab02cbbae

Update coroutine test dispatcher to use structured concurrency. | 2019-02-11 23:40:52 | 9a8842956015a018ee4fa37631052fac82553d36

Make SupervisorCoroutine implement ScopeCoroutine

* Implement ScopeCoroutine in SupervisorCoroutine
* Do not indent scoped coroutines in debug strings

Fixes #915
Fixes #916 | 2019-02-20 15:31:02 | 8d506b3757777664e007b1287ce3c4cb943f4ae5

CoroutinesTimeout debug rule for JUnit 4 (#991)


Fixes #938 | 2019-02-20 14:00:57 | 2bdd4605e797a88019565938cf4a4daca92593a5

Reknit after fixing indentation in code samples | 2019-02-20 10:31:38 | 3785348e32e7180efe86862bc84da14d3631a98d

Update named arguments referenced issue

The issue previously reference was marked as fixed for one of the two problems it was about,
and a new one has been created for the remaining issue that is relevant here. | 2019-02-19 15:17:56 | 919284b159fec82ef2b6f4da9af5f88248e0713a

Obtain real stacktrace of running coroutines in debug agent

  * Capture thread of coroutine when it's transited to running state
  * During dump retrieve the stacktrace of captured thread for running coroutines and merge it with metadata-based stacktrace

Fixes #997 | 2019-02-20 08:43:23 | f18878f632dd28ad8ff847eb4f95e9ed50f373bb

Check that worker thread belongs to the same scheduler in dispatchers.shutdown

Fixes #990 | 2019-02-19 16:01:48 | 703a286e8b55d353b4ebc84320710562d627c96b

Add section about Android in debug agent readme | 2019-02-01 15:13:39 | a68376ceea89bc3599203a4c36e81cd177fc37cd

Additional documentation section about debug mode and stacktrace recovery.

Not included in a guide intentionally | 2019-02-01 11:54:06 | 418ba80a7bb0b8661823fbb325b7edac526ab7db

Call initCause during reflective exception copy in runCatching block to avoid DispatchException when initCause throws

Fixes #933 | 2019-01-15 12:18:43 | 3e4d808200e990e4b5c7e4755b23a5314fdb662a

Move debug example to a proper package | 2019-01-29 09:41:02 | c055f025f4fd3d3dc6a4ceecb798091b31f986e9

Migration to new multiplatorm plugin (#947)

Migration to a new multiplatform plugin
  
  * kotlinx-coroutines-core-[common|js|native] are merged into one core module with multiple source sets
  * Folder structure and readme are restructured
  * Publication process is patched to preserve backward compatibility with artifact names | 2019-01-28 08:34:24 | e50a0fa78aae052e128e8b17666e081e4dfc78be

Update CHM in test to containsKey for KT-18053 fix in 1.3.20 | 2019-01-23 14:49:17 | a672d5f58040f9a14661b157e085c63a7c8b2ff7

Replace old UI dispatcher name with Dispatchers.Main | 2018-12-31 13:52:33 | 8c071247dbe5928ebf5138471c1ac905c5de4018

Update coroutines-guide-ui.md

[Update]
- typo: what you might want to express here is `JavaScript event dispatch thread ` | 2019-01-08 16:01:55 | 66f0123b5fe98f861b46ef1400c8b11bc40c2ace

More idiomatic and readable example for coroutines debug module readme

* Idiomatically use suspend functions
* Idiomatic parallal decomposition with coroutineContext/async
* No GlobalScope
* Use less vertical space & more concise code to aid readability
* Link to full code file (in tests) | 2018-12-22 15:40:39 | b65dc7fe0f75b7dc76e84205c3b57c0aff09c269

Update CHM in test to containsKey for KT-18053 fix in 1.3.20 | 2018-12-22 13:38:36 | 4b60d013508c865dd8430f334e89481d93893ab1

EventLoop integration and reuse for runBlocking and Unconfined dispatchers (#889)

EventLoop integration and reuse for runBlocking and Unconfined dispatchers

* Event loop that is created by runBlocking or by Unconfined dispatcher
  is reused across the same thread to prevent blocking of the loop
* Semantics of runBlocking and Unconfined are fully retained
* DefaultExecutor also registers itself as running event loop and thus
  cannot be blocked by runBlocking
* Consolidates thread-local handling for native
* Also fixes thread-local memory leak on JVM (does not use custom class)
* Restore BlockingEventLoop class name for runBlocking event loop impl
* Internal API for custom waiting loops to be used by kotlinx-io

Fixes #860
Fixes #850 | 2018-12-21 13:41:39 | 51738243c980165ad4fb426105baf6e00d02f87b

Dokka links fixed | 2018-12-18 13:26:58 | 89d43afab3f1090a25697c1e8cebd7faac6612c1

Debug improvements (#900)

Debug improvements

* Rename printHierarchy to printJob and hierarchyToString to jobToString, introduce corresponding methods for scope to simplify scopes debugging
* Remove CoroutineState.job in favor of CoroutineState.jobOrNull
* Use runCatching in Continuation.toDebugString to avoid crashes on some Androids with R8 issue

Addresses #858 | 2018-12-18 09:47:50 | 115a13933adbce880a72c1653b7be94eba566202

Ignore exception on cancel/fail race in CancellableContinuation

There seems to be no other way to satisfactory fix the problem of
a race between cancellation on CancellationContinuation and
concurrent failure of the corresponding background process in a
way the distinguishes "failure from cancellation attempt" from
a "true failure" without placing undue burden on anyone who is
implementing `await()` extension function for various future types.

- Added testTimeoutCancellationFailRace that works as a perfect litmus
  test; being allowed to run for a while it reliably detects various
  problems in alternative approaches.
- Optimized CancellableContinuationImpl; merged its code with
  AbstractContinuation class that is not needed as a separate
  class and removed.
- Deprecated and hidden CancellableContinuation.initCancellability();
  it is now always invoked after the end of the block that was
  passed to suspendCancellableCoroutine.
- Deprecated `holdCancellability` parameter to an internal
  suspendAtomicCancellableCoroutine function.

Fixes #892
Fixes #830 | 2018-12-15 11:12:47 | 876e9bab95d34f311be030a0706497564f96d95a

Introduce test module with testable main dispatcher (#749)

Introduce kotlinx-coroutines-test module with API to set Dispatchers.Main 

  * Dispatchers.setMain and Dispatchers.resetMain extensions
  * Use real factory in HandlerDispatcher instead of using initialized-once statics (prevent ExceptionInInitializerError)
  * Improve MissingCoroutineDispatcher diagnostic
  * Do not cache failed results in test dispatcher to allow reusing it between tests 
  * Deprecate HandlerDispatcher.Main (was accessible only fom Java API)

Fixes #746
Fixed #810 | 2018-12-17 16:49:12 | 4327b2120558c0e232b522b32b3427dc2ad02bf5

fix small typo of async method | 2018-12-16 07:09:02 | 054fcc2b68f9d9933981d65c485af88dba8f89d6

After merge fix: resolve clashes between type alias CoroutineStackFrame and jvm.internal.CoroutineStackFrame | 2018-12-13 09:57:37 | cd162d356e7dbb8a6ed8e02ceae0133af2df95b5

Merge pull request #876 from Kotlin/debug-agent

Coroutines debug agent

Fixes #772 | 2018-12-13 09:39:45 | a5a7cdb86a10d6fcda61c2b9fc55963b86ca8947

Repackage byte-buddy along with debug agent (so it shouldn't be a dependency of target process), use shadow plugin for that to avoid clashes with other byte-buddy versions and publish shadow jar instead of regular one for debug module | 2018-12-13 08:58:29 | 3781a821a11a64670b5a3ffa3c276f1533332ad7

Reknit after docs fix | 2018-12-13 08:58:24 | 75f634c56e3655d475bd93c4d7a5fc7242744d69

Speedup linerizability tests, make conflation part of helpClose (fixes nightly stress failure) | 2018-11-19 16:31:51 | b733f7d0cfd3c8fcca234d7d49f4350dfeb36264

Debug agent cleanup

  * Readme
  * Do not fail on Windows during signal handler installation
  * Do not warn about missing artificial stackframe | 2018-12-12 16:08:32 | 7a6fd89c04b3ee972136c0648700f8500dfb0f23

Rephrase default dispatcher documentation | 2018-12-12 10:36:54 | e06585a482f0f94d2819c24af8ac42582d38af6a

Get rid of top level 'debug' folder | 2018-12-11 16:49:07 | 7520c978464e2f3b1cc075dea36a9f11088e2d85

Unreachable code fix | 2018-12-11 16:44:49 | f64bcde03b4c5e46d63f19d5dcb3b1738c59eefa

Debug agent code style | 2018-12-11 16:20:39 | 12695b763715338149e0bcaa3633a6e0296fc361

Code style in test code fixed | 2018-12-10 13:11:06 | 8e9e4d1706083dd5fb6fcc4c89d2a65caa33914c

Debug agent optimizations

  * Do not store creation stacktrace of the coroutine, recover it from ArtificialStackFrame
  * Reduce lock window where possible to avoid contention
  * Avoid stacktrace copying where possible | 2018-12-10 17:19:35 | 5a80d2a0b0c52121a0788acc036030812fea9f59

Debug agent to track alive coroutines

  * Can be installed dynamically or from command line
  * Captures coroutine creation stacktrace and stores it in completion, automatically enhancing stacktrace recovery mechanism
  * Allows to dump and introspect all active coroutines
  * Allows to dump Job hierarchy
  * When installed from command line, dumps all coroutines on kill -5
  * Probe support in undispatched coroutines | 2018-12-10 08:41:00 | c7239ac4915df344add7386c8aa19038499f5e4b

Scoped builders and exception stacktraces synergy

  * Recover stacktraces via both fast and slow paths in scoped builders
  * Merge stracktraces of nested scoped builders, eliminate common prefix so it looks like a flat profile
  * Optimize stacktrace-related machinery
  * Copy meaningful part of original exception into recovered one, rename "Current coroutine stacktrace" to "Coroutien boundary"
  * Rename Exception.kt to StackTraceRecovery.kt to avoid name clash with another Exception.kt | 2018-11-27 15:13:47 | 1032f5801a9719fbe67325daec944104eff793a9

Initialize JavaFx more accurately, do not leave dispatcher in uninitialized state in case of unexpected failure

Fixes #816 | 2018-11-27 12:57:16 | 69a2d9273288dec1e29a81f2c314ccf23ae99093

Fix: default dispatcher doesn't work with jsdom | 2018-11-06 16:46:00 | bb0ad4ae2772c9c4af0e3b44b129423cf5ae0c58

Sanitize class names received from Kotlin debug metadata | 2018-11-12 17:04:35 | 25a886e9ee0047f755e8d32f496ced3760e7ec64

Debug optimizations:

  * Extract call to suspendCoroutineUninterceptedOrReturn behind recoverability check
  * Cache exceptions constructors into WeakHashMap in order to avoid expensive ctor lookup | 2018-11-02 17:06:14 | e3b80d9c7198728a5566cb2c74da61ee115e61d6

Basic exception stacktrace recovery mechanism

  * Implement CoroutineStackFrame in CancellableContinuationImpl, DispatchedContinuation and ScopeCoroutine
  * On coroutine resumption try to reflectively instantiate exception instance of the same type, but with augmented stacktrace
  * Recover stacktrace by walking over CoroutineStackFrame
  * Recover stacktrace on fast-path exceptions without CoroutineStackFrame walking to provide more context to an exception
  * Unwrap exceptions when doing aggregation in JobSupport
  * Add kill-switch to disable stacktrace recovery, introduce method to recover stacktrace on the exceptional fast-path
  * Add `suspendCoroutineOrReturn` on exceptional fast-path in await in order to provide "real" stacktrace

Design rationale:
All recovery of *suspended* continuations takes place in Dispatched.kt file, the only place where all calls to "resume*" ends up, so we don't have to remember about stacktrace recovery in every primitive we are implementing. But to provide more accurate stacktraces we *have to* recover it on every fast-path for better debuggability.

Fixes #493 | 2018-11-02 12:55:20 | 675c30c4b96533a374ae36b144dbe6b26634b97b

Merge pull request #791 from Kotlin/undispatched-cancellation

Use final Job state in undispatched coroutine completion | 2018-11-06 12:55:53 | 666ea6e554fa52ea03504ab618543ca26e20ce3b

Add ExperimentalCoroutineDispatcher to binary compatibility check, restore binary compatibility in Ktor | 2018-11-06 11:03:39 | e3ab2a692a6da18ee9213a124a4c111235046c75

Add scheduler name to ExperimentalCoroutineDispatcher

Fixes #661 | 2018-10-31 13:15:35 | 92327322442d4c8be225067ff6e16c6827f8b38e

fix link | 2018-11-05 16:56:31 | 64f2b2006b5a7cf2a760ec976dd28e988ce122d0

fixed typo | 2018-11-05 14:28:47 | ace91872cc56113fa10e844069f46eb3bbec9c95

Use final Job state in undispatched coroutine completion

  * When using in-place coroutine builders, startUndispatchedOrReturn will return block's final value on fast-path. This is not correct because if any of the children had failed, whether or not exception is thrown depend only on child timings. Moreover, in the face of such race exception may be ignored if scope owner wasn't cancelled or is missing.
  * Introduce special hack for withTimeout and withTimeoutOrNull to ignore TimeoutCancellationException on the fast path
  * withContext, coroutineScope, supervisorScope, withTimeout and withTimeoutOrNull are affected and now check cancellation on fast-path | 2018-11-04 12:32:34 | 78832e3bb38560f4c4d55cdba436bf7bc9b761ca

SchedulerTask is now an abstract class with optimizations for jvm

* It removes the need for a separate SchedulerTaskBase
* submissionTime and taskContext are marked as @JvmField
* DispatchedTask is also an abstract class
* resumeMode is marked as @JvmField | 2018-11-01 21:10:39 | aa374a95dc7e6df4fd6458fe6d8abe95e2953fce

Scheduler: capture TaskContext for afterTask before running it

This is not strictly needed, since the reusable Task instances
(DispatchedTask) should be always reused in the same context, but
this makes the code more resilient to future changes. | 2018-10-22 02:31:23 | e64d9b706cb5180260e4d95fa3a990449163da51

Avoid allocation of CoroutineScheduler task object

* DispatchedContinuation and CancellableContinuationImpl have all
  the necessarily field to be scheduled | 2018-10-21 17:08:49 | 16e20347dc5557063742ea8a06dbe5162a211c25

Publish: Comments style fixed | 2018-10-26 20:02:08 | f18b9f580faff47af054cb6c0942cd15ccc7675d

Fixed exception handling for publish builder

* Test that ensures proper parent cancellation
* Stress test to ensure that exception in publisher always handled
  by parent
* Also fixed race between request & signal completion that did not
  reproduce before | 2018-10-23 05:28:12 | ac848e872da94e01ed60a6bfecbfe3926229f44f

Reactive streams integration conformance to TCK verified & fixed

* Throw NPE on null subscriber
* Throw IAE when requested n <= 0 elements
* Do not sent any notification after cancel() | 2018-10-20 16:50:05 | 8cced247b1d83f7885f21be8c9b0354dab0fd1f3

fix minor typo | 2018-10-30 19:14:20 | a223f351c1dac80443b02ab905d46acbf4a66720

Implement yield for unconfined dispatchers, documentation improvements

Fixes #737 | 2018-10-23 09:29:56 | c33ef61d4502b71e0cdc354337f261917102d1c6

fix: make snippet as non-runnable | 2018-10-23 12:33:12 | 0661d477332205c23defe65d51e4063cd009e023

Prevent temporary leaks in HandlerDispatcher by properly handling
cancellations in scheduleResumeAfterDelay() implementation | 2018-10-16 22:30:40 | e321394c359758659a07ad1c98429ec2acd8ea59

fixed typo | 2018-10-19 21:16:57 | d981966acf780078119493c1f64e30dc9fa6e02e

Merge branch 'release-candidate' into develop

# Conflicts:
#	core/kotlinx-coroutines-core/test/RunBlockingTest.kt
#	docs/coroutine-context-and-dispatchers.md | 2018-10-18 14:40:10 | a7e10146781744f6df3865a1a33fa4e7cbc2c0b6

Merge branch 'context-elements-opto' into release-candidate

# Conflicts:
#	common/kotlinx-coroutines-core-common/src/Dispatched.kt | 2018-10-18 13:59:46 | cd37d8e8b30656a92a883b646fe050ff479bafdd

Minor optimizations of UndispatchedEventLoop | 2018-10-18 12:17:25 | 23d435b17a1aaaba86cc71656a4080547c4c727e

Do not step into thread-local event-loop on CancellableContinuation#dispatch fast-path | 2018-10-18 08:54:56 | faa477496bc2c05dad4034847a3f7d3f6aae3818

Use FIFO queue in undispatched event loop | 2018-10-17 16:51:50 | 09b9d6c157c9d7c6ec84052c16e64d3eebd0bc8e

Move undispatched thread-local event loop to dispatched continuation, execute all undispatched tasks in that loop to avoid SOE in user-supplied unconfined dispatchers and 'immediate' main dispatchers. | 2018-10-17 15:37:36 | fd54bc4882357771d0bec29abbd6e99dfccab725

Rework Dispatchers.Unconfined to use thread-local event loop

Fixes #704 | 2018-10-17 07:57:30 | 7ee722a595b416023c69d987fb7e4682ac0ffe91

Cache result of ThreadContext#foldAll in the field of DispatchedCoroutine to avoid context fold in tight loops

Fixes #537 | 2018-10-16 12:47:26 | ae85797805f93f98bfad64f5f91ba97e4f2c1fbc

Dokka fixes

  * Provide module with Kotlin 1.3 API because Kotlin 1.2 from Dokka can't read classes marked as "from the future"
  * Add runConfiguration dokkaStubs which is included only during dokka task with some classpath magic for Kotlin 1.3
  * Add package.list for slf4j
  * Fix unresolved types/links in documentation
  * Suppress all internal/inherited API | 2018-10-13 12:40:32 | 706e39363b586127b29e28fd97d476129c22fe93

Make EventLoop internal, @JvmName("from") for ExecutorService.asCoroutineDispatcher | 2018-10-11 16:09:44 | b6eca2a62158b2dc8d9b41d86040924095dca662

Use toString implementation for continuations to leverage debug metadata

Fixes #679 | 2018-10-10 11:46:53 | 4220ca2106bea653f2831f19c2c93752ea0e468a

Cleanup: get rid of workarounds, cleanup guide, suppress/fix compilation warnings | 2018-10-10 08:56:41 | 1bdbb3ef364006515157b5884dc663d9c3172c6c

Experimental annotation revisit:

  * Mark our API annotation as experimental with corresponding warning or error
  * Get rid of workaround for new inference bug
  * Migrate to compiler arguments instead of annotations | 2018-10-09 16:06:29 | e6e82391c33716033996ef6718756feab641816c

Restore TOC in the root coroutines-guide.md file with links to individual files

* Knit supports new TOC_REF directive for that.
* Reknit docs (also fixed out-of-date sample file). | 2018-10-08 17:20:12 | 715acd33e564dbff128a12b10ec2c6e24240d330

Migrate to Kotlin 1.3 coroutines, drop experimental from package

* Features based on version 0.30.0
* Uses Kotlin version 1.3.0-rc-57
* Uses Kotlin/Native version 0.9.2
* Uses AtomicFu 0.11.9-eap13
* Replace SuccessOrFailure with Result
* Replace buildSequence and buildIterator with sequence and iterator
* Apply @BuilderInference on all builders (including extension methods to workaround inference bug) | 2018-07-13 07:33:25 | 0950dfa1fe114e3682a546e3e53ef34dec9dfd4a

Fix lost exception from dispatched withContext on cancelled job

Fixes #675 | 2018-10-08 13:13:01 | 0f94304c6ae46c8f0cec24dde29d2e7af9ae7e97

Mark newSingle/FixedThreadPoolContext as obsolete, document the reason

* The will be replaced by another mechanism in the future.
  See #261 for details.
* The proposed replacement is to use the standard java API:
  Executors.newSingleThreadExecutor/newFixedThreadPool
  and convert to dispatcher via asCoroutineDispatcher() extension. | 2018-10-06 13:36:13 | f5126d0a9263f0b73a57d17031c340f78e3a25bd

Lazily load Dispatchers.Main and provide a stub impl on failure

Also specified explicit public visibility for Dispatchers object.

Fixes #658
Fixes #665 | 2018-10-06 14:09:05 | 0ece3885d445b60d254dc0fb21c7c05c7ebfb1bf

fix grammar typo

removed repeated 'for' | 2018-10-05 13:16:33 | e7a0723e930d52c4cb4665c5a3918f883287c039

Short Dispatchers.Default.toString value ("DefaultDispatcher") | 2018-10-02 09:59:11 | ec8cbd252d20adcdc91149ae9129149b252d945c

Move UI dispatcher to common Dispatchers.Main (#641)

* Main thread dispatchers are grouped under Dispatchers object and are discoverable via ServiceLoader

  * Dispatchers.Main can be consistently used and easily discovered, its implementation is discovered with ServiceLoader
  * It allows us to add iOS Dispatchers.Main implementation in the future thus opening the door for multiplatform UI-dispatched code
  * Workaround for #626, now Android users can start migration to RC coroutines

Fixed #626 | 2018-10-01 16:01:16 | cfe699fb59d799ab22da23aae983cc34b1164f29

Never loose coroutines when CoroutineScheduler is closed

* CoroutineScheduler close/shutdown sequence now guaranteed that a
  submitted task is either executed by the scheduler that is being
  concurrently shutdown or RejectedExecutionException is thrown.
* RejectedExecutionException is caught by the coroutine dispatcher
  implementation and coroutines are rescheduled into DefaultExecutor
  if a (custom) instance  of CoroutineScheduler is being shutdown.
* Added stress test for coroutine scheduler closing. | 2018-10-01 07:52:56 | 4b0f4dec24b93db4e0e0abbfe59b115e886a30c1

Coroutine scheduler is used by default instead of deprecated CommonPool

* Documentation and guide are updated correspondingly
* "DefaultDispatcher" is used as a public name of the default impl
* Implementation is integrated with virtual time-source
* Shutdown sequence is reimplemented in a safe way for tests,
  makes "close" safe to use on custom instances.
* "close" on DefaultDispatcher throws exception just in case
* -Dkotlinx.coroutines.scheduler=off can be used to switch back to
  CommonPool

Fixes #198 | 2018-09-28 09:20:49 | 303708b27f8d997ae482e3106679a7d170bc16d7

Exception unwrapping logic rework, do not unwrap cancellation exception if parent can handle exceptions

It allows to properly handle only relevant exceptions by child without reporting the same exception multiple times, fixes suppressions hierarchy and allows to implement supervisorScope properly | 2018-09-28 09:29:21 | 88e72f9973810119f105f78768b59e19f6a49c26

Introduce SupervisorJob & supervisorScope

This change also fixes propagation of cancellation for Job() constructor.
When both Job() and SupervisorJob() are cancelled with exception (fail),
they cancel their parent, too. So we have similar behavior between:
* Job() and coroutineScope { ... }
* SupervisorJob() and supervisorScope { ... }

Fixes #576 | 2018-09-23 16:16:04 | 21f171c8cb09831e25acdeab5c667cf3c15a9692

Avoid OOM in thread-pool dispatchers, try to reflectively invoke setRemoveFutureOnCancel on executor instance and use default dispatcher if attempt failed

Fixes #571 | 2018-09-25 12:45:53 | e29f49799d118b5c3feb38886af3030d027e7b60

async and async-like builders cancel parent on failure

* Affects async, CompletableDeferred, and all Rx integration builders.
* This makes all coroutine builders totally consistent. They all
  cancel parent on failure, but they all consider "CancellationException"
  to be the case of "normal cancellation" that does not propagate to
  parent. The only missing case is Job() that should be fixed together
  with introduction of SupervisorJob().
* Note that "scoping" builders don't "cancel the parent", but rethrow
  the corresponding exception instead, so it that is how it gets
  propagated up the stack.
* This makes parallel decomposition exception-safe. You
  cannot loose an exception as along as default (child async)
  behavior is not overridden.

Fixes #552 | 2018-09-27 16:17:16 | 52bfdabfa1476f55c1b3880d43f49977fc8df943

Copy deprecated annotations on Job member to inheritors

* Makes them easier to find for cleanup
* Avoids bug with light classes | 2018-09-28 09:41:58 | ffda1da6aec27b51f0bc8640f0e48c8fcd1e8f59

Restore binary compatibility of Executor.asCoroutineDispatcher

Fixes #629 | 2018-09-27 18:19:38 | 18cc588106ff7f4c680831809e5af8d75063c689

fix broken links for kotlin web site (#628)

* fix broken links for Kotlin web site | 2018-09-27 15:42:04 | cbeef1039d7402939bac8ec4674e1a7b1adf993a

Merge pull request #588 from Kotlin/handle-exception-fix

Handle exceptions fix | 2018-09-25 21:00:29 | 25b4388ef2f94909acac51cf1e0206975cc4b84a

Add name parameter to Handler.asCoroutineDispatcher

Fixes #580 | 2018-09-25 13:40:30 | a180ff75e9f7c97189a2651e96f4212bff0b105e

Fix lost exception during cancellation in produce, fix integration with play services after rebase | 2018-09-25 16:16:02 | 1b22af7e462272cbc33fd019975ee3ec5dbf1b78

Merge branch 'develop' into handle-exception-fix | 2018-09-25 13:10:26 | 1e0a2f0ad358c49d97602ee01ecf76602721fa4f

fix compilation | 2018-09-24 17:29:00 | f30715955637d2006e17fda7f99d002877fedc1c

Docs for context/coroutineContext in AbstractCoroutine are fixed | 2018-09-24 17:29:42 | 2d8cad05755d47af7987f39385527d3bddb15377

Fix exception aggregation to ensure atomic handling of exceptions

* Removed legacy onFinishing handler support from JobSupport.
  - It is no longer needed, because handleJobException covers #208
* Fixed bugs that were masked by cancelling parent from onFinishing.
* Consistent "Finishing" state was introduced in internal machinery:
  - Job enters finishing state when it is failing or it is completing
    and has children
  - Finishing state cleanly aggregates all failures, tracks cancellation
    and completion status
* Job.isFailed is introduced as a consistent way to query the "failing"
  state of the job that was previously only implicitly available via
  invokeOnCompletion handler (cause != null means a failed job) and
  the documentation for both Job & Deferred is updated to reflect that.
* Source-incompatible change: Job.invokeOnCompletion boolean parameter is
  change to onFailing. Such handlers are now invoked as soon as the job
  starts failing and the root cause exception of the failure is consistently
  passed to all the handlers.
* The following internal methods were introduced to facilitate this:
  - Job.failParent(exception) is used by child to signal failure to parent
  - Job.cancelChild(parentJob) is used by parent to cancel child.
* Child never aggregates exception received from it parent, but uses
  it as it root cause if there is no other exception.
* JobSupport.handleJobException() logic for launch/actor is split into:
  - failParent - can be invoked multiple times on race;
  - handleJobException which is invoked exactly once.
* Exception materiazization is much lazier now, which should
  significantly improve performance when cancelling large hierarchies.
* Other minor perf improvements in JobSupport code.

Fixes #585 | 2018-09-14 09:52:50 | ecbc85cbdad134d868698e22c0fdd7220eaced0f

Typo fixed | 2018-09-22 13:28:37 | 63e3896d85f827f2e403ffd25593ac5d9af54715

Fix typo in deprecation message of JavaFx dispatcher | 2018-09-20 17:10:30 | 39a2c559b538b8681c0724d5ec3ee6058af4e1c3

Cosmetic fixes | 2018-09-20 08:25:56 | 2dd53204e7047e970f145281c11a9c834021b3a9

Improve HandlerDispatcherTest, check that jobs are actually executed | 2018-09-19 11:30:51 | 847eba7c935ed784e918d976c9c43464179a2df9

Reknit guide, fixed TOC in Knit with comma & verify mode in example-context-09 | 2018-09-19 11:49:42 | bca98f4e9ea3c485c8691209be32fee487f812fe

CoroutineScheduler: fixed race between createNewWorker & shutdown for tests | 2018-09-14 12:17:12 | 241e74e6a2cdadaa2753f40a326c732e95fac2d0

Fixed sporadic test crashes related to withTimeout and children

- The bug only manifested when withTimeout coroutine had children working
  in a different dispatcher
- A separate stress-test that reproduces this problem with much higher
  probability | 2018-09-16 12:31:13 | fa9586bc283d60427ad3e9162de7962da4b0ec1d

Updated dispatchers references in readmes and docs | 2018-09-11 16:16:49 | f189cec57d7d0751464a5939f1bbcbd32e15d7c0

Dispatchers are renamed and grouped in the Dispatchers object

* Dispatchers.Default — a default dispatcher for background asynchronous tasks
  (currently backed by FJP commonPool, a new dispatcher in the future).
* Dispatchers.IO — a dispatcher for blocking background operations (#79).
* Dispatchers.Main — a dispatcher for Android Main Thread (#533).
* Dispatchers.Swing — a dispatcher for Swing Event Dispatch Thread.
* Dispatchers.JavaFx — a dispatcher for JavaFx Application Thread.
* Old dispatchers are deprecated, CommonPool is deprecated, too.
* awaitPulse() in JavaFx and awaitFrame() in Android are top-level funs.
* Introduced HandlerDispatcher, SwingDispatcher, and JavaFxDispatcher types
  in the corresponding UI modules for type-safety and future extensions

Fixes #41
Fixes #533 | 2018-09-11 15:42:03 | dc29b071d4784e3739f89223ced2333ecd5408ad

Fixed hangs during thread termination in IO dispatcher

Fixes #524
Fixes #525 | 2018-09-11 12:38:14 | 750d468b3281570910d0cd4000d4e29702b25020

Invoke handler using invokeIt to avoid JS bugs | 2018-09-07 11:36:05 | c430e0797e87af77f812bbcfb8751e4a0e31ffc6

AtomicFU 0.11.5 to fix Windows compilation | 2018-09-04 14:58:45 | 61abcd224a13f674bffae096afa7250de262df87

typo fixed | 2018-08-24 12:24:02 | 1a1237083b14d5de8f13f66b7a4ba6d9e26183d7

Introduce IO dispatcher to offload blocking I/O-intensive tasks

Fixes #79 | 2018-08-23 14:27:19 | f5e67ba597acdfb90ef84d29e4d6028f3f17a6ba

Introduce ThreadContextElement API to integrate with thread-local sensitive code

* Debug thread name is redesigned using ThreadContextElement API
  where the name of thread reflects the name of currently coroutine.
* Intrinsics for startCoroutineUndispatched that correspond to
  CoroutineStart.UNDISPATCHED properly update coroutine context.
* New intrinsics named startCoroutineUnintercepted are introduced.
  They do not update thread context.
* withContext logic is fixed properly update context is various situations.
* DebugThreadNameTest is introduced.
* Reporting of unhandled errors in TestBase is improved.
  Its CoroutineExceptionHandler records but does not rethrow exception.
  This makes sure that failed tests actually fail and do not hang in
  recursive attempt to handle unhandled coroutine exception.

Fixes #119 | 2018-07-25 09:22:46 | 7587eba96a230f3f0ab0c04f52723e926f7a845d

AtomicFu version 0.11.3 (bug fix) | 2018-08-23 11:05:46 | be065fd2c566acf4f600de23d45d70cf9f2144bc

Introduce ExecutorCoroutineDispatcher instead of CloseableCoroutineDispatcher

Fixes #385 | 2018-08-15 10:03:23 | b517f0529fe4a2066ca8ac985c08206cd4587758

Add workaround for K/N bug | 2018-08-22 09:37:41 | bbe6d8a915b2be9c0a7ff9d92677c878718fa219

Implement withTimeoutOrNull via withTimeout to avoid timing bugs and races.
Remove deprecated API

Fixes #498 | 2018-08-21 16:45:29 | 988eb26469819f7cc8cb1ba26c3a76a6805e8387

Provide API to create limited view of experimental dispatcher

Fixes #475 | 2018-08-15 09:06:06 | cac1a0f13c5b81cdfa3c2d1020e8d86ac8cd0029

Additional debug output for CoroutineSchedulerStressTest | 2018-08-10 17:38:41 | 21ce9c066c752adf4db1e8388a9d38a390b5f08b

Execute EventLoop#invokeOnTimeout in DefaultDispatcher to allow busy-wait loops

Fixes #479 | 2018-08-08 15:04:59 | e90cdb031ffab87d9f7671cc9e856b2a9534d59e

Scheduler tests fixed:

[temporary] Ignore flaky tests
Fix benchmark compilation
Fix WorkQueueStressTest | 2018-07-26 17:02:03 | 9542f1ce4f84d08ef2b33d14ce3ae79a8a93fa86

Scheduler improvements:

Fix (one more) ABA problem in tryUnpark
Global TaskContext to speedup CPU tasks
Documentation improvements
Stress tests constants tuned to be more robust and faster on local machine (and when ran from IDEA)
Style fixes | 2018-07-26 10:57:04 | e50fb89c4e80d7accb9bdfff3ce54c59d2857c26

Scheduler tests infrastructure

Support "kotlinx.coroutines.scheduler" property to change DefaultDispatcher
Updated scheduler shrink test with custom idleWorkerKeepAliveNs config,
so that they execute faster
Fix submissions from another instance of CoroutineScheduler
Run JDK16 tests and tests under new scheduler tests only during nightly stress test | 2018-07-20 20:57:57 | 5c7454b8a872d925f206f418c16d9880bf23e25f

Removed wrapper from LimitingBlockingDispatcher by introducing TaskContext | 2018-07-23 09:38:06 | 216e4d30a2b225361a4f3e59465c079a0f116379

Fixed ABA problem in parkedWorkersStack and other stress improvements

* Workers are now numbered starting from 1, zero is used as sentinel
* Workers are lazily created (no threads initially)
* Close/shutdown of the scheduler also clears state so that subsequent
  rogue attempt to dispatch anything fails.
* Work stealing is more predictable. It starts at random index but
  then goes linearly via workers array. | 2018-07-20 20:25:58 | db22e4023442341d39d0c3797de73e74efb25882

Scheduler cosmetics

Stealing logic cleaned up a bit (mostly style)
Update worker thread names when worker threads are terminated to maintain
consistency between their index in array and name;
Improved debugging info (toString)
Merged yield and spin counters, parkTimeNs is in Int | 2018-07-19 11:12:31 | bba6e8918e32d521109583a9024b3d5e82da53f5

Improved management of parkedWorkersStack in terms of ABA/concurrency;
Also includes documentation, naming and packaging fixes | 2018-07-18 10:12:31 | 1d3b0191ecbf498965d81257c80ad6f87e583552

Improved tasks dispatching:

Merge blocking and created workers into single state variable
Replace j.u.c. queue of parked workers with intrusive stack to support shrinking and increase performance
Replace j.u.c. global queue with Michael & Scott queue which supports conditional polling
Poll for blocking tasks from global queue when CPU token is not available
Make last ditch effort before thread termination
Idle reset on requestCpuWorker | 2018-05-03 11:52:00 | 18a91347466560b63144d0097f248d9edb029780

Fix ordering bug in QuasarTest | 2018-07-25 16:16:23 | a608a335ff57e969f69985c43ee70c30da1dba8f

Get rid of compiler bugs workarounds | 2018-07-25 13:27:14 | 5f73827f3131332018c02650057eff4aa2886ae7

Channels concurrency improvement:

Make close, cancel, isClosedForSend, isClosedForReceive and offer linearizable with other operations
Fix bug when send operation can be stuck in channel forever
New concurrency tests

Fixes #359 | 2018-07-17 15:39:20 | ea651aa5badbc20f911c844db2a57ea4f68fc38b

Access to PlatformImpl in JavaFx dispatcher, on Java 9 it's an internal module which should be explicitly exported

Fixes #443 | 2018-07-20 12:07:28 | 5557245405f965ec5ca26083301559066a1be147

Minor grammatical changes to the Coroutines guide

Minor fixes for the English grammar in the coroutines guide to help ensure new readers understand coroutines properly. | 2018-07-19 20:01:40 | 977ada1e74e0ae9b011fb219891433a6d36e9ef3

Validate FJP.commonPool parallelism to avoid pathological bugs

Also always construct private FJP pool if
kotlinx.coroutines.default.parallelism is explicitly specified.

Fixes #432, #288 | 2018-07-11 10:36:07 | 1e12210cd2bccdfd866b1c9649cd19e40663fb5f

Change order of handlers in JobSupport and CancellableContinuation
1) Invoke handlers before dispatching in CancellableContinuation to make behaviour timing-independent and Unconfined doesn't produce unexpected results
2) Invoke onCancellation -> handlers -> onCompletion in Job to make behaviour timing-independent

Fixes #415 | 2018-07-03 08:11:21 | b10287ecb35463f471ac120367a0a4f56f6b5c49

Typo fixed | 2018-06-26 11:58:39 | 7981999a156918abced59de696b02d9bc731f808

IO: fix joining and continuous writing byte array interference | 2018-06-13 16:49:45 | 9faa0395afd26a3c29cd67de5dce635a7882cf5c

Update ThreadPoolDispatcher.kt

Fixed typos. | 2018-06-09 17:01:53 | 517a2592077b067032d6c0379226d0467d7662f1

IO: fix continuous writing session interfered with joining | 2018-06-01 14:23:47 | e15eae8e3537080a82078873d762ad9de61f50f4

Typo fix | 2018-06-03 23:34:22 | e185ed6f918a1df082832c9059a091505b9a5cf9

Introduce deprecated ReceiveChannel#use to preserve backward compatibility with SubscriptionReceiveChannel, fix reactive samples | 2018-06-01 12:30:34 | 313978cf6b3901b1d7fbfb5d1f688c068a072c09

LockFreeMPSCQueue optimized & fixed

* no need for REMOVE token to hurry up GC
* Placeholder logic is fixed to avoid potential data loss on wraparound
* Stress test for resize/copy added | 2018-05-30 18:58:02 | c22a1c748e93db6e7d4e73f9118e8435edbeb698

Leaking handles in awaitAll are fixed | 2018-04-28 16:22:29 | e0b6db04b3bd86e942bc7e40081a82aedd8fd200

Delay bug fixes:
Invoke clearTimeout on cancellation in JSDispatcher
Remove delayed task on cancellation from ThreadSafeHeap on cancellation to avoid memory leak | 2018-04-26 13:03:40 | cd00643b92c9698ca728f92a66f52b30b3811d05

Documentation for debug property values | 2018-04-11 19:21:23 | 590c8889c2bb5341f15ee20e440c5599342fe34b

typo fixed | 2018-04-04 06:59:33 | 905a512625ad96dcd45c789f983babd93dfde011

Add extension to ExecutorService to return closeable CoroutineDispatcher

Fixes #278 | 2018-03-20 19:28:52 | 26f4b9ecd1bdd03299b668541f7c7c9ecaf9ab7c

Debug toString for channels

Fixes #185 | 2018-03-06 10:37:42 | e4b6f09af7c0d0b6963fa8611e867ff3292fad0e

rx-example: Added application plugin & fixed to use runBlocking | 2018-03-05 14:58:59 | 00560e8b0add1628bd0a32202b6f3cc301b35af3

Use NodeDispatcher on ReactNative

Fixes #236 | 2018-03-05 09:01:07 | ecc68f13141d1353aa2bb1d027a077e0fd7be4fb

Check for undefined `window.addEventListener` when choosing default coroutine dispatcher.

Fixes #230 | 2018-02-10 19:35:58 | 54d57e0c1fff22fe1d72c762f2bdbf01995395ca

Update README.md

Minor typo and typography fixes. | 2018-02-04 00:30:58 | 7dd6b66eced47e4ddf0b2c76c974ac19612b827c

IO: fix error propagation in blocking adapter | 2018-02-02 14:18:47 | f0c1d99e2c5c5978da7ace9d58c61a5648ed7687

Update coroutines-guide.md

This tutorial suggests just Async suffix:
https://github.com/Kotlin/kotlin-coroutines/blob/master/kotlin-coroutines-informal.md#asynchronous-programming-styles
Also, there was "of" instead of "or" | 2018-01-29 17:39:02 | 7e94e70734f6e01b0522d11071e6825879a221e7

runBlocking is improved to properly support specified dispatchers,
so that `runBlocking(UI) { ... }` can be used outside of UI thread.

Fixes #209 | 2018-01-29 15:07:21 | cb78787638039096804bc1b97031bcb9801c0547

Workarounds for KT-21968 to fix JS tests | 2018-01-24 20:31:22 | dfeba242b9e328f7528507f9349623671a00333c

IO: fix joining sequence, avoid infinite joinTo suspension | 2018-01-23 20:16:54 | d1842c6301d8debca8509809d473ce7e889b1d7b

IO: make reusable cancellable continuation implement DispatchedTask | 2018-01-12 15:46:22 | 4d01f7ec3b33f7633f3737a5ab3a3fc90703f57f

JS: Introduce Window.asCoroutineDispatcher and use custom queue in
Window.awaitAnimationFrame to align all animations | 2018-01-13 08:20:32 | 1867f6de0fb39077d0cb13fdc0400dd4568f717b

Actually fixed startup/shutdown of DefaultExecutor for tests to prevent
thread leak. Includes test-case. | 2018-01-12 15:28:24 | 9483301695f4c0784d663238ecd0ef04bbfcbea3

MPP: Debug toString should not depend on kotlin-reflect | 2018-01-11 16:04:12 | b79277b4fab5353680445f36dd9b19a740828203

IO: Use TestBase in all tests and fix leaking threads in tests | 2018-01-11 10:48:19 | c45f5fa3b636d66b824351c8d8d9368b8ee4e37f

MPP: Ported DispatchedTask perf improvements to JS and more code is made common | 2018-01-11 09:39:36 | f29203c158a526f90ae8574abfc1ba6dd5249262

Performance: Remove DispatchTask, store value in DispatchedContinuation | 2018-01-10 13:25:25 | f2239e191f55883486d5ce04ffb0c6f75cdc3468

Update coroutines-guide.md

Correct `Dispatcher` spelling | 2018-01-08 13:56:54 | fa13beba79e6ebb68588ba2167b67a77196907d3

Optimize creation of DispatchTask for cancellable continuations (fixed) | 2017-12-28 09:21:14 | bdf23f28c425ea391baa7ddbc3ba012d15e6dfa5

Optimize creation of DispatchTask for cancellable continuations | 2017-12-27 22:09:43 | ac48070de5e20b727b6d9ffd5cc7c259426fb6fb

MPP: DefaultDispatcher internal impl class renamed to JSDispatcher | 2017-12-27 10:14:54 | a919827885289271a6c598ab47fdf4434a8e0da3

fix typos | 2017-12-24 19:55:06 | d2d42ea802b54d2ede23f3edf3c18521ae46a3e9

IO: fix accidentally used tryResumeWithException | 2017-12-06 14:09:01 | 9ef4e0c05168acdb2c955079e2ee857cfec9de06

IO: fix spuriously hanging pipe tests | 2017-12-05 12:41:42 | 4adac45480b33664d79b24f7a779e7d4c1da68b1

IO: fix joining with different write byte orders | 2017-12-05 09:35:56 | 8af8937a34e893661dfe15f9be598eac50b101df

IO: fix infinite writeSuspend loop caused by auto-resuming flush | 2017-12-05 09:27:09 | e6764086ef4a03ec610245740b379f5da617224c

Bug fix: start hangs on lazy coroutine with attached invokeOnCompletion | 2017-11-30 13:41:47 | 5610e1df2eb3f67be8b45633b5d6ffbf73ec6bb8

Add DefaultDispatcher on some reactive operators | 2017-11-29 21:12:35 | e19ee04ca72316f9d67a58d35b8be398b059f1f5

IO: fix too expensive joinTo fast-path | 2017-11-23 09:39:27 | 060f36a06d341f43c0f9e77fd6706bf71f94972c

IO: fix typo in test name | 2017-11-20 08:43:26 | 9a6ca1a006debfa08392027508d03a141ae53841

Introduced ReceiveChannel.cancel method;
all operators on ReceiveChannel fully consume the original channel
using a helper consume extension, which is reflected in docs;
removed `suspend` modifier from intermediate channel operators;
consistently renamed channel type param to <E>;
added two versions for xxxTo fun -- with MutableList & SendChannel;
added tests for all channel operators;
dropped/deprecated ActorJob/ProducerJob, fixes #127 | 2017-08-17 18:01:33 | b555d91193d9e76710062451cf94a94d14820e98

IO: fix race in closeWaitJob of JoiningState | 2017-11-17 16:30:22 | 47d92bafe90d899dfb53cd0f8bf7eae75504047e

IO: fix accidentally missed it | 2017-11-17 16:29:49 | d42bdadc8520ec490d5b37f5f160b54d4541d2f8

IO: fix race in ByteBufferChannel.write(lambda) | 2017-11-17 15:39:03 | 7bf4fa9e3b19a8200450fabe396a0ff854615596

IO: fix joining of already closed but not empty channel | 2017-11-14 11:52:32 | 9e9929d376d2b92cd5fda2f21f7cc1eb51f66ca8

IO: fix lincheck dependency | 2017-11-10 20:22:53 | b94ce42827dc5f9294f19b99da356ad585fb01ea

IO: fixed awaitClose and copyDirect | 2017-11-10 09:22:23 | 373d590e103f3203f61b2fb93b3b82bcce1de13e

IO: fix race in joined flush once again | 2017-11-09 18:18:05 | 8e9138ca4a297189f49bece8e739b6584f69e061

IO: fix joined close/flush | 2017-11-08 13:50:13 | 2fdb5aa4867b60f7c659cf4d950babfd2a43a67a

IO: fixed joined channel flush | 2017-11-08 03:15:39 | 625c1fefa57f95af2b723b7c7e3b1a5319c69faf

IO: fixed joined ByteChannel close | 2017-11-08 03:11:53 | ca8762b2f6a1043103a45153357a5f9e5dc010af

IO: fix writeByte BufferOverflowException

it is important to setup buffer's positions again after suspension
it is not the case if we don't hold writing state during suspension | 2017-11-07 16:42:15 | bab9f7927ca780b242c794578c02ddf63db40375

IO: fix race in readSuspend

consider state change:
writer: IDLE(empty) -> !do write -> IDLE(buffer) -> !close -> closed = C
reader:  !suspend -> resumed -> closed = C -> [here]

here reader can see that there is closed state however to see published
written state it should read state again rather than simply use already
readen state to get happens-before guarantee | 2017-11-07 16:18:16 | 32c90b169d05bd372317f90ae5ad511bbcb05bc5

IO: rewrite if/else/return code to identical

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 11:23:34 | fde1a646fe5a60c8aa211764d63527ec429672c3

IO: eliminate tail suspend calls in when blocks

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 10:54:47 | 4eccfba8d4cbe55ce49ac7b70c40eea1d0adf7c9

No Job in newSingleThreadContext and newFixedThreadPoolContext anymore

* This resolves the common issue of using `run(ctx)` where ctx comes from
either `newSingleThreadContext` or `newFixedThreadPoolContext`
invocation. They both used to return a combination of dispatcher + job,
and this job was overriding the parent job, thus preventing propagation
of cancellation. Not anymore.
* ThreadPoolDispatcher class is now public and is the result type for
both functions. It has the `close` method to release the thread pool.

Fixes #149
Fixes #151 | 2017-10-20 09:36:56 | d9ae2bcb88403e0854b895ba46c2417b4c0a4752

run uses cancelling state & propagates exceptions when cancelled

* When coroutine that was switched into a different dispatcher using
`run` is cancelled, the run invocation does not complete immediately,
but waits until the body completes.
* If the body completes with exception, then this exception is
propagated.

Fixes #147 | 2017-10-20 08:42:06 | bcdd8e17fed40097f9bb8fdb3e218f95ff8603a9

Exception propagation logic from cancelled coroutines is adjusted

* When cancelled coroutine crashes due to some other exception, this
other exception becomes the cancellation reason of the coroutine, while
the original cancellation reason is suppressed.
* UnexpectedCoroutineException is no longer used to report those cases
as is removed.
* This fixes a race between crash of CPU-consuming coroutine and
cancellation which resulted in an unhandled exception and lead to
crashes on Android.

Fixes #152 | 2017-10-20 06:00:50 | 6aed878a67e6f707e6c3afb0879beb8822a95d6f

Fixed Reactor docs (Scheduler.asCoroutineDispatcher) | 2017-10-07 19:58:40 | 8348b8c31d5b07541bd3d268ca2a186b0fe1ad6f

Failed parent Job cancels all children jobs, then waits them

Also improved debug output a little bit | 2017-10-07 12:44:48 | a36ab94253bb9945c6377eb43db0cb1071019c40

IO: eliminate race in close

I knew that I'll hit this bug anyway. Here we MUST flush twice as
flush at read suspend is not enough. If a writer closes then the first
flush does flush and it closes so all readers will see all pending data.
If a foreign thread does close then the first flush is makes no
difference however the second is required for proper cleanup and
to do tryTerminate | 2017-10-04 18:34:18 | ad68c06c1200f2038c26adeab2abf801a2a2114b

IO: fix verifying pool usage

buffer view doesn't hold original pool reference to make
pool chaining working | 2017-09-29 15:18:00 | ccf8dde980a4701b9cd30e1df23e5cbefdd93b53

IO: fix writing byte packet | 2017-09-28 07:58:15 | 754a19b188dc6d486d73b8e3a2f0c483c3f88f9b

Documentation for DefaultDispatcher in the guide | 2017-09-29 18:39:03 | 66f018c489c6b0ec0831fa9953db34da3edff5f3

DefaultDispatcher is introduced | 2017-09-28 11:27:05 | c0d559b594fce802f1d1be9a6feef49019d17160

IO: fix ByteWritePacket.writePacket size update | 2017-09-17 19:48:26 | 5ca0d12c1e8a9672d40fe83cd31d1b2426f397e7

IO: fix writer scope type | 2017-09-11 10:06:54 | ea3a418f84f3731e92658cedfa11878a8828500c

IO: fix byte channel readX operations return -1 during close+flush

Read operation should try flush before return -1 if closed because
the close operation setting close status first then do flush
so reader could see closed status but not-yet-flushed byte counters | 2017-09-11 07:31:08 | e4d3ce750ed8b864a435fb0926d0d77e9c02b208

IO: add more byte packet tests and fix few bugs | 2017-09-06 18:50:51 | 5feaf6973c23fae3c5a8df64748e2181c50dd0d6

IO: fix delimiter lookahead | 2017-09-06 15:52:04 | 1cc86083e7be17ce53f7c80cfa6ba67e8569e33e

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 99cdb380bf6391db7e7d08e8673c627c554074d8

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 776b370d58883e9bce0c309ebb4919ef4cdac13c

IO: fix byte packet write buffer leak | 2017-08-25 08:39:00 | 974cbb3b21b8d7613c41ee2221ce435e347b068f

IO: fix byte channel close with error buffer leak | 2017-08-25 08:06:59 | 24b040f1345db27b45589a975daab45bf9325494

IO: fix CR-only line endings processing + tests | 2017-08-23 11:39:41 | a9a936d1a325ee0baf36df444414e1e17ac539da

IO: rename writeStringUtf8, fix implementation + tests | 2017-08-23 09:26:18 | fbcba264a37580b5c47f3314395e5146afb38287

IO: fix copyAndClose + tests | 2017-08-23 09:11:55 | fc84a634ff9a1acca04e09fa5a031b904c5c8838

IO: byte packet readLine support + bugfixes | 2017-07-26 09:59:16 | 0b12ffc0178844e813223039adf5d7510703485d

Fixed bug in LockFreeLinkedList (invariant & lock-freedom violation)
Migrated atomic ops to AtomicFU library for ease of code maintenance
Implement lock-freedom testing in LockFreeLinkedListAtomicStressLFTest | 2017-08-10 18:09:26 | 7eb41efbacd498704f25465e2a58f4892c16aa32

Typo fixed | 2017-07-24 13:42:34 | a448903dcac25e450d87c49705e7a6693a300d29

Use CompletableDeferred in the guide section on coroutines;
fix (reknit) broken links to factory functions that are now top-level | 2017-07-21 22:00:30 | 256812a1c09511744575ed3d2c64fec27979f391

More documentation on CompletableDeferred states and style fixes | 2017-07-21 15:04:23 | 8e2ae9964614e35295a8d695114b00c35f5fc755

Better debug strings for continuations | 2017-07-12 12:22:21 | 69d9c852289f1a4a9ffe107dc75cc71871cfe34e

ObservableBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 10:16:30 | ed6985459318209be084ff807676cb722387fb6f

PublisherBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 09:58:44 | 58246ca7e7727632ba50c41d0314df47ba9e3fc0

Fixed IllegalStateException in select that concurrently selects, which
was due a problem with Job concurrent cancel and dispose of handle.
The bug was introduced by addition of Cancelling state for a Job.

Original stack trace in select was:
java.lang.IllegalStateException: Check failed.
	at kotlinx.coroutines.experimental.internal.LockFreeLinkedListNode.remove(LockFreeLinkedList.kt:236)
	at kotlinx.coroutines.experimental.JobSupport.removeNode$kotlinx_coroutines_core(Job.kt:734)
	at kotlinx.coroutines.experimental.JobNode.dispose(Job.kt:995)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.initCancellability(Select.kt:294)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.getResult(Select.kt:273) | 2017-07-11 09:50:00 | e9f64491787433b3d53ad5800456524820058d5f

typo fixed | 2017-07-10 10:46:13 | d28cc872fb7815b51ceb7c84a4e77117fce380c7

typo fixed | 2017-07-10 10:44:07 | 8b0b07ab81f12bc605462a6a1333b61abce547cb

typo fixed | 2017-07-10 10:43:20 | 93f7e8e22019643caaf14ae480c05ab0a349064d

Bug fixed on waitTimeoutOrNull (was flaky testOuterTimeoutTest) | 2017-07-10 10:38:54 | 769d48217f8787c7f64c07da6e53c27b2d703274

Refactor DispatchTask to reuse it for dispatchYield | 2017-07-10 10:16:20 | 2a93646a8054ce7819e9bdbff8d28849a19e874b

Fix SecurityException when trying to read "kotlinx.coroutines.debug" prop | 2017-07-10 07:15:40 | e824eaaab9d053ff0f2cc028c7413bb83adcacc0

A fix & optimization for select impl helping scheme | 2017-07-05 06:53:29 | 907074f1f63871ed29feab3173a2e38b30d8fbb6

Reactive tests fixed for cancellation logic change | 2017-06-26 11:25:56 | 7a7b00938934ef7d0855eb24ec93a06d0b0c97e7

Fix typo: debugging more -> debugging mode | 2017-06-24 21:03:35 | ed5ed49913498b4e880415d2f0fb9004e20e1b5a

Typo fixed | 2017-06-23 10:27:02 | 6c18dfd15f6e1703db57531422bc0df3cb7d08ff

fix typo.

somethine -> something | 2017-06-18 07:37:59 | 81a6f23ca68d7ed37f36dcb966fe74e3bc53de57

Typo fixed | 2017-06-09 17:25:03 | c3c2f3269220f5d7ae20e7592ca1253061b50a95

CoroutineExceptionHandlerTest fixed | 2017-06-09 15:59:25 | 866521b83ed0676d0203dec35de5fb797bc9a59d

SimpleSendReceiveTest is fixed to account for close conflation | 2017-06-06 11:36:38 | 9ff32644381bf1a692d9a935170a9f7b7023f244

Fixed lock-freedom of send/offer on closed channels and related bugs.
Conflated[Broadcast]Channel hang of concurrent offer/close is fixed. | 2017-06-05 14:04:39 | e6e8ce8d46cee273e00ee130334239880734dc2f

Integration readme title fixed | 2017-05-17 11:59:49 | 0c2e25d7c38f50bd3c9866ea1fc2c12d5d74251a

launched jobs and await can be cancelled while waiting in dispatch queue

* suspendAtomicCancellableCoroutine function is introduced for funs like
  send/receive/receiveOrNull that require atomic cancellation
  (they cannot be cancelled after decision was made)
* Coroutines started with default mode (CoroutineStart.ATOMIC) using
  async/launch/actor builders can be cancelled before execution starts.
* CoroutineStart.ATOMIC is introduced as a start mode to specify that
  coroutine cannot be cancelled before its execution start. | 2017-05-11 17:15:18 | a74eb5f8b08e84f904e75aa71da4547c9178da8d

Fix withTimeout/OrNull bug with spurious concurrency on cancellation | 2017-04-20 16:23:18 | ca9d5be31a30c5f6a20875438f9ae40db4183f4c

Refactored ThreadPoolDispatcher to reuse code of ExecutorCoroutineDispatcher | 2017-04-18 12:28:35 | f04f51d5b05a0aec7c97acc202d180096a095fbf

equals/hashCode for wrapper CoroutineDispatcher impls | 2017-04-11 10:50:03 | 30dd5c129c493ca7b1a3b2b80437e8a7ec68f3ec

Starting coroutine in UI event handlers without dispatch in UI guide | 2017-04-07 15:06:22 | f724f6e2fe7c20cb48b69cd7b19b2658313231e4

Nicer toString implementations for CommonPool & Unconfined dispatchers | 2017-04-07 07:35:28 | dc9fd1c2d18da2f23d9907148b4674cda6418e49

Few minor docs & build fixes for reactor support | 2017-04-06 19:15:35 | 523516abd2023f8d968d389b32dee713130a9f83

Merge pull request #53 from mkobit/patch-1

Correct typo in coroutines-guide-reactive.md | 2017-04-05 09:41:56 | 7676e2239947273c6cbb4cb77536042bd9f2ce43

Fix repository urls

need to be reverted once bintray will fix jcenter sync issue | 2017-03-23 14:45:39 | 78fd3cb8932410af9beab4effc04bdeea4343732

Merge pull request #42 from jakiejj/master

fix typos in comments to Nio functions | 2017-03-20 07:16:24 | 9ef792fec6775bb5cdb08c84511488f324db3322

fix typos in comments | 2017-03-17 20:48:39 | 4d927c76488b96abaae7ba003f8064ad84b8334e

Typo fixed | 2017-03-14 17:39:50 | 81a5b7144484dcc8ebc89cd98fd9bd8a2d45afbe

startUndispatchedCoroutine is renamed to startCoroutineUndispatched for consistency with coroutine intrinsics | 2017-03-14 16:39:26 | 4638d79097a3d5b0c1b32c1e468ad723cc4b2bd9

Fixed bug with sometimes missing `onComplete` in `publish`, `rxObservable`, and `rxFlowable` builders | 2017-03-13 09:03:35 | d14a3901f365f622d9a7ba96fc00900011c9c009

Scheduler.asCoroutineDispatcher extension for Rx 2.x | 2017-03-10 12:06:01 | a1fe3da17907024afa50a35cbfcc72639d62bf78

not -> no typo fixed | 2017-03-09 09:57:57 | 228d084bfb87f967e216b84029b58649fcbe7472

Executor.toCoroutineDispatcher is renamed to asCoroutineDispatcher | 2017-03-09 09:03:39 | 38b5ea18e36f1a53d4cde27bf3fd21522727cbbb

Fixed dispatching logic of `withTimeout` (removed extra dispatch) | 2017-03-02 21:15:21 | 43d831f61f33262dcb4621069451d1699898d1cb

More links and typos fixed | 2017-03-01 14:21:48 | cc63363ead9d82f4e246a319ca3e0cb9f15e3a14

top-level readme links fixed to produce & co | 2017-02-22 12:04:28 | 40e89f689f89ae643f68c68efc57aebd8f8284ed

Jon.onJoin select clause is implemented, lazy onAwait/onJoin & dispatch fixed | 2017-02-22 11:56:58 | d84dbc2d75927fe8446098a225a3fbb884683bde

startUndispatchedCoroutine utility functions | 2017-02-22 06:53:49 | ee88fbef2d78e4b25f741efffabf4756bff8e7f3

buildChannel deprecation template fixed | 2017-02-20 12:53:30 | de8b9e9b336491ff0dbf107fe35d9efa030d92d3

Merge pull request #31 from gildor/on-completion-deprecation-fix

Job.onCompletion deprecation template fixed | 2017-02-20 12:49:41 | 85923e2de75ed522903cc3d64aef2ad178c1cbf8

Job.onCompletion deprecation template fixed | 2017-02-19 13:26:29 | c8f9ca308abe963cafa5f676410402fc287cfa5a

Delay implementation in Swing, JavaFx, and scheduled executors is fixed to avoid an extra dispatch
CancellableContinuation.resumeUndispatched is introduced to make this efficient implementation possible
Additional documentation for CoroutineDispatcher implementors | 2017-02-10 10:30:38 | a198bad7365a508baf1041993e9a14007f9d5aa3

Doc fixed | 2017-02-10 10:14:35 | 8c8551e7dbea7c2467060c2d3c6aa1c54c721e68

Merge pull request #29 from cbeust/patch-1

Update coroutines-guide.md | 2017-02-07 17:52:01 | 4d821e3901d038f005850b38d1e4954506306383

Merge pull request #28 from erokhins/patch-1

Update 1.1.0-beta-37 to 1.1.0-beta-38 | 2017-02-02 19:24:36 | 40f69cf704e7b31cec9c8a935317d8c173e79623

Added deprecated (with error level) plus operators on Job and CoroutineDispatcher to catch potential problem with their incorrect use at compile time | 2017-02-01 15:43:32 | 79a2868295127b81056f66d644da72db5a40d772

Merge pull request #27 from tairrzayev/readme-fix

Fixes the typo in the coroutines-guide.md | 2017-02-02 06:15:26 | 9d844fa1733f83e5e1b85c3e762a69729d3c5ef2

Dispatchers default behaviour is changed to schedule new coroutine for execution later.
Job.getInactiveCancellationException is introduced.
yield is cancellable while it is waiting to executed.
core tutorial is expanded. | 2017-01-29 18:58:33 | 7cf452eab59cdca570227f071cba2da374f77110

Finer grained control on debugging facilities | 2017-01-24 07:29:53 | aecb9aa1606b79243c8e93221de9713c164ce015

Added context parameter to CoroutineDispatcher methods, implemented Executor.toCoroutineDispatcher | 2017-01-23 13:47:20 | 67891d867da022d608d4589859002f256d9a313e

Fixed initialization of Job with parent (initParentJob), fixed handling on uncaught exceptions in standalone coroutines | 2017-01-20 09:19:52 | 58a7add417403811e822a4f6f7689ae3fd0e2018

Minor: fix version of maven-deploy-plugin, fix pom warnings | 2016-12-21 17:21:30 | c4ad15fc6246b7496d610da7419441020dfe1c56

Merge pull request #6 from hhariri/patch-1

Fixed packaged names | 2016-07-27 07:04:12 | c6993089412fbc491ddeb0a71b57e67bf31e21d6

Fixed packaged names 

On the repo, the package names don't have the suffix -1. | 2016-07-27 06:03:41 | 1abe89716c093c9e010a45a5235da7f9b50eea17

~ Introduce customizable parking for the experimental dispatcher (wip) | 2019-07-16 16:58:28 | c1136861df149f23aed209da4c770bd3126a9c45

Rewrite assertions so that they are checked only in debug mode

* Make sure assertions are absent on native and JS
* Only print full toString for Job in debug mode | 2019-07-02 13:21:22 | 583d39dd4fe1d8f488df3e384901aa19f95166e2

Decouple asFlow from batchSize and move it to buffer instead, promote… (#1279)

* Optimize Publisher.asFlow and fix conflation
* Use channel.receiveOrNull instead of for loop iteration
  (it is more efficient)
* Calling Publisher.asFlow().produceIn(...) uses a single channel
  and is implemented via Publisher.openSubscription() | 2019-06-26 09:09:32 | 502610e7af760a73ea974f9c7cb75ec26a14d167

Unmute debugger test that were broken in 1.3.31, increase debug test timeout (slow CI), make shutdown more graceful by reducing timeout per thread (slow CI + unfortunate timings) | 2019-06-24 17:53:53 | bb97ffbb069774f2ba6ceb8e7dc4c6a2263ef9ff

Update "Shared mutable state and concurrency" guide with best practices

* Properly use structured concurrency in the example code.
* Also remove a special not on <= 2 core CPU, which is no longer needed
because default dispatcher has always at least two CPUs.

Fixed #1241 | 2019-06-01 11:18:42 | d94652feec64040c2c77af630fc4df30032e0efc

Enable R8 optimization of Dispatchers.Main loading

The developer still has to disable the FastServiceLoader manually
if they're using R8.

R8 is then able to optimize away the ServiceLoader and reflection
entirely, resulting in direct class instantiation and no extra I/O
on calling thread.

Fixes #1231 | 2019-05-30 12:17:51 | b9b7d828b18b2462817b6ed0c1a56233a4b6fcf4

Use identity hash code on K/N for debug strings

Fixes #1237 | 2019-05-31 11:39:08 | a3f150e66f7c47e0a0cefed4d9aa03199dff9e7f

Amortize the cost of coroutine dispatch using message queue in all JS dispatchers.
Use Promise.resolve and process.nextTick as dispatch mechanism for cold starts | 2019-03-01 11:25:23 | b7e1499b966175782cf2a5045c5bd3bb95a63b8c

Documentation improvements (#1229)

* Improve MainCoroutineDispatcher.immediate documentation
* Remove obsolete readme and package descriptions
* Clarify possible replacement of onCompletion parameter in produce
* Add paragraph about parent cancellation to async (Mention structured concurrency, but do not explain it there as the term should be easily googlable).

Fixes #1219
Fixes #994 
Fixes #787 | 2019-05-31 10:16:19 | c81dc91159dd1e33060ead8eeccc78df94c4649d

New flow builder: channelFlow (and its alias callbackFlow) and supple… (#1214)

New flow builder: channelFlow (and its alias callbackFlow) and supplementary ProducerScope.await method

Rationale:

    * Can be used in different context without breaking context preservation
    * Can be used to build concurrent operators such as merge
    * Can be used to integrate with callbacks
    * Is less error-prone than flowViaChannel because requires explicit await() call

Partially fixes #1210 | 2019-05-27 21:37:46 | b08d61c6c25d1a030ef37b6788b9ed3922520c85

Improve coroutine exception handling logic

  * Wrap exceptions into CE if parent cancels its child. This is possible because now we can be sure that no one is invoking `cancel(Throwable)`, thus if parent cancels its children, an exception is definitely handled.
  * Now exception is handled only once

First part of fix for #689 | 2019-05-17 08:55:17 | b0f6e05822f225afba43ed6e728669fe320146d8

Fix overflow bug in Flow.drop | 2019-05-20 07:45:03 | e35637a9faabb021d7a5efdc5509910cb499cd7a

Fixed Dispatcher docs

* Fixed typos
* Added reference to kotlinx-coroutines-test for testing `Main` dispatcher | 2019-04-27 19:32:57 | a2499a3ffe7522b8881a41ada45ce1779494be51

Ensure that there are no references to atomicfu in classes

* Updated to 0.12.7 version of atmoicfu with fixes.
* Added test that that is no references to atomicfu in any of the
  resulting class files.

Fixes #1155 | 2019-05-02 23:56:40 | 485eab1611433e49bd1d7c4a302b4825daf0d2e9

Knit: fix handling of backquote when making anchor reference | 2019-05-06 23:46:46 | 80039323d7ef284c3c4b851a6f3a91c46b3d7971

Knit: fix handling of backquote when making anchor reference | 2019-05-06 23:46:46 | b81f5f0ad73bc163a01a2ec88e2cb2e3d61927e1

Fixes kotlin-coroutines-test TestCoroutineDispatcher docs

Fixes #1163 | 2019-04-30 21:27:20 | 9614536ff093c99fc7febd5e31547ede8c8ceb5d

fix: broken anchors | 2019-05-06 07:26:16 | e3030e36945d79d7e54f0decaeef099a1720efcd

kotlinx-coroutines-test cleanup

    * Yield support in test dispatcher
    * Allow partial override of coroutine context
    * Code style fixes | 2019-04-25 21:07:56 | 9e5f9ab46506369f759d72e1195d9d7eb3ef1116

Flow operators: (#1132)

Flow operators:

    * switchMap
    * debounce
    * sample
    * Update RxJava version to 2.2.8

Partially fixes #1107 | 2019-04-24 14:14:03 | fe820bad2dc0743281f6ad130824114507a0a00a

AtomicFu version 0.12.5

This should really fix processing of class files

Fixes #1116
Fixes #1064 | 2019-04-22 18:05:50 | 26a14eef3c6fdf9480719dc1bc25b249b58bcb87

Fix atomicfu post-processing and dependencies

* Update to atomicfu 0.12.4, which fixes plugin operation with
  kotlin-multiplatform
* Remove explicit dependencies (plugins adds them automatically)

Fixes #1116
Fixes #1064 | 2019-04-19 15:51:05 | e1ac2e5c193654469468a04e4cadced3e3040e63

Add a period in the "You can get full code here" blocks and other small fixes | 2019-04-21 07:51:25 | 69c26dfbcefc24c66aadc586f9b5129894516bee

Knitted links and fixed minor style issues in test docs readme | 2019-04-21 08:21:59 | 445e798c3406c182337636026188fefd9f1cc950

Add README.md description of runBlockingTest, TestCoroutineContext, TestCoroutineDispatcher, TestCoroutineExceptionHandler. | 2019-04-21 01:10:09 | c0a8d1c078b6c3de49e3f6a4f77f2c713f47c7ac

TestCoroutineDispatcher code style cleanup and todos

* Kotlin libraries code style: explicit visibility and other style-issues
* DelayController.currentTime() is val
* Using atomicfu in place of AtomicXxx classes
* Added version to ExperimentCoroutineApi annotations
* Some todos are added for future consideration
* Fixed long overflows on delay (clamp) and added test
* License headers added to files
* Tests moved to an appropriate package
* Additional ordering tests using TestBase "expect" infrastructure | 2019-04-20 15:12:08 | d76456f1b6a92868e9f2f01309167003c94c66ca

fix typo: Coroutine"s"Context | 2019-04-17 08:58:42 | 43983505033a67719b0621572b868fc55f492016

Rework purity concept:

   * Purity is a way too polluted word and it is hard to tell what it means in Flow
   * Rename "purity" to "context preservation"
   * Prohibit changing the context, ignore only Job and CoroutineId (for debug mode) in SafeCollector
   * Reword documentation, add more samples
   * Add explanation for deprecated Rx-like methods | 2019-04-09 16:43:11 | d3cc25ff32a80de93ad5eaa912c8b54036c0f978

Unmute test that was failing due to JS BE bug | 2019-03-25 16:21:40 | 0d69e1353d9fcd5867fe74e0912d3f36dc7d8ea8

Merge pull request #1023 from Kotlin/debugger-sm-bypass

Improve stacktrace merge heuristic: skip state machine meaningless fr… | 2019-03-22 15:02:32 | 4ebc1306dd6e0a5929a9044bd65ff92edfeac8e0

Merge branch 'develop' into debugger-sm-bypass

# Conflicts:
#	kotlinx-coroutines-core/common/src/Timeout.kt | 2019-03-22 14:36:33 | 1ea4da4e510f68cb9311b140d2c2e13e8acefe6b

Rename CoroutineState to CoroutineInfo and improve its API

  * Rename jobOrNull to job
  * Replace coroutine with its context
  * Add check-and-act on isInstalled flag into synchronized blocks in order to avoid spurious memory leaks during uninstall
  * Replace WeakHashMap with Set to simplify debug probes | 2019-03-05 15:43:13 | 2496dc256712eb3bb282d3291cedc1497a09cdc8

fix documentation typo | 2019-03-14 13:49:36 | 325b0ad1ee98450e2598e2c0738a398e7b23d959

Add test about threading for immediate dispatch. | 2019-03-14 23:47:26 | a69f73613977bda2c25523cfcae93d6f74bd9cc0

Rename DispatchException to CoroutinesInternalError and make it an Error to better reflect its semantics | 2019-03-07 12:15:40 | 132c1e3f029610208607dcac4d55ed05f62d0642

Get rid of quadratic complexity during stack unrolling in debug agent in 1.3.30 | 2019-03-05 15:26:09 | e35baa43d379e9a7ee3eadc392665dc011268525

Make JobCancellationException copyable in debug mode

This simplifies trouble-shooting of "what caused cancellation", as you
can print out exception and see its recovered stack trace. | 2019-03-04 19:20:25 | d293639980d7a6141394dc8174180f221daa4787

Add operator invoke for CoroutineDispatcher | 2019-02-11 13:21:44 | 57540d452ef82207f14c4235ee690a4323a343fa

Hide cancel(Throwable), introduce cancel(CancellationException)

Job/ReceiveChannel/BroadcastChannel.cancel(Throwable) is now hidden and
cannot be invoked from a newly compiled code. This function had broken
semantics when used with an arbitrary exception. A safe replacement
is available in the form of cancel(CancellationException) where
CancellationException can be used to supply additional information
for debugging purposes.

Fixes #975 | 2019-03-01 09:08:43 | 0aad8f1274c4be7f02ac8f361eb0685d4b438243

Improve CoroutineDispatcher documentation | 2019-02-27 11:19:21 | 08f8214ddbcdbf0becc2b5264caf29080f04576f

Promote Dispatchers.Unconfined to stable API | 2019-02-27 10:16:00 | 9863de1401a90de61307c1ade952ebd7ac65a88a

Promote MainCoroutineDispatcher.immediate to stable API | 2019-02-27 10:02:03 | 4fc4fd555f784775360c464e178d7662291f5fba

Cancellation in consumeEach should dispose Rx Observable

Fixed bugs in MaybeSource/ObservableSource.consumeEach implementation
so that observable is disposed on cancellation.

Also optimized implementation of bridge function to avoid extra dispose
calls if possible (this is permissible by specification, though)

Fixes #1008 | 2019-02-26 16:03:24 | ae8a8743dd37a442c7882a04d1da0de367671ccd

Replace UI with Dispatchers.Main in CoroutineScope documentation

Fixes #803 | 2019-02-27 14:22:29 | b37c296f03ee38cd5cdf5091fa67a010c6a3f6d3

API Cleanup based on review

- removed asyncTest
- added pauseDispatcher(), pausDispatcher(block), and resumeDispatcher() API to delayController
- removed dispatchImmediately (the name was fairly opaque in an actual test case)
- added exception handling to runBlockingTest | 2019-02-12 02:46:06 | 8328a39b39d60fe4e44b6e1e5796d37ab02cbbae

Update coroutine test dispatcher to use structured concurrency. | 2019-02-11 23:40:52 | 9a8842956015a018ee4fa37631052fac82553d36

Make SupervisorCoroutine implement ScopeCoroutine

* Implement ScopeCoroutine in SupervisorCoroutine
* Do not indent scoped coroutines in debug strings

Fixes #915
Fixes #916 | 2019-02-20 15:31:02 | 8d506b3757777664e007b1287ce3c4cb943f4ae5

CoroutinesTimeout debug rule for JUnit 4 (#991)


Fixes #938 | 2019-02-20 14:00:57 | 2bdd4605e797a88019565938cf4a4daca92593a5

Reknit after fixing indentation in code samples | 2019-02-20 10:31:38 | 3785348e32e7180efe86862bc84da14d3631a98d

Update named arguments referenced issue

The issue previously reference was marked as fixed for one of the two problems it was about,
and a new one has been created for the remaining issue that is relevant here. | 2019-02-19 15:17:56 | 919284b159fec82ef2b6f4da9af5f88248e0713a

Obtain real stacktrace of running coroutines in debug agent

  * Capture thread of coroutine when it's transited to running state
  * During dump retrieve the stacktrace of captured thread for running coroutines and merge it with metadata-based stacktrace

Fixes #997 | 2019-02-20 08:43:23 | f18878f632dd28ad8ff847eb4f95e9ed50f373bb

Check that worker thread belongs to the same scheduler in dispatchers.shutdown

Fixes #990 | 2019-02-19 16:01:48 | 703a286e8b55d353b4ebc84320710562d627c96b

Add section about Android in debug agent readme | 2019-02-01 15:13:39 | a68376ceea89bc3599203a4c36e81cd177fc37cd

Additional documentation section about debug mode and stacktrace recovery.

Not included in a guide intentionally | 2019-02-01 11:54:06 | 418ba80a7bb0b8661823fbb325b7edac526ab7db

Call initCause during reflective exception copy in runCatching block to avoid DispatchException when initCause throws

Fixes #933 | 2019-01-15 12:18:43 | 3e4d808200e990e4b5c7e4755b23a5314fdb662a

Move debug example to a proper package | 2019-01-29 09:41:02 | c055f025f4fd3d3dc6a4ceecb798091b31f986e9

Migration to new multiplatorm plugin (#947)

Migration to a new multiplatform plugin
  
  * kotlinx-coroutines-core-[common|js|native] are merged into one core module with multiple source sets
  * Folder structure and readme are restructured
  * Publication process is patched to preserve backward compatibility with artifact names | 2019-01-28 08:34:24 | e50a0fa78aae052e128e8b17666e081e4dfc78be

Update CHM in test to containsKey for KT-18053 fix in 1.3.20 | 2019-01-23 14:49:17 | a672d5f58040f9a14661b157e085c63a7c8b2ff7

Replace old UI dispatcher name with Dispatchers.Main | 2018-12-31 13:52:33 | 8c071247dbe5928ebf5138471c1ac905c5de4018

Update coroutines-guide-ui.md

[Update]
- typo: what you might want to express here is `JavaScript event dispatch thread ` | 2019-01-08 16:01:55 | 66f0123b5fe98f861b46ef1400c8b11bc40c2ace

More idiomatic and readable example for coroutines debug module readme

* Idiomatically use suspend functions
* Idiomatic parallal decomposition with coroutineContext/async
* No GlobalScope
* Use less vertical space & more concise code to aid readability
* Link to full code file (in tests) | 2018-12-22 15:40:39 | b65dc7fe0f75b7dc76e84205c3b57c0aff09c269

Update CHM in test to containsKey for KT-18053 fix in 1.3.20 | 2018-12-22 13:38:36 | 4b60d013508c865dd8430f334e89481d93893ab1

EventLoop integration and reuse for runBlocking and Unconfined dispatchers (#889)

EventLoop integration and reuse for runBlocking and Unconfined dispatchers

* Event loop that is created by runBlocking or by Unconfined dispatcher
  is reused across the same thread to prevent blocking of the loop
* Semantics of runBlocking and Unconfined are fully retained
* DefaultExecutor also registers itself as running event loop and thus
  cannot be blocked by runBlocking
* Consolidates thread-local handling for native
* Also fixes thread-local memory leak on JVM (does not use custom class)
* Restore BlockingEventLoop class name for runBlocking event loop impl
* Internal API for custom waiting loops to be used by kotlinx-io

Fixes #860
Fixes #850 | 2018-12-21 13:41:39 | 51738243c980165ad4fb426105baf6e00d02f87b

Dokka links fixed | 2018-12-18 13:26:58 | 89d43afab3f1090a25697c1e8cebd7faac6612c1

Debug improvements (#900)

Debug improvements

* Rename printHierarchy to printJob and hierarchyToString to jobToString, introduce corresponding methods for scope to simplify scopes debugging
* Remove CoroutineState.job in favor of CoroutineState.jobOrNull
* Use runCatching in Continuation.toDebugString to avoid crashes on some Androids with R8 issue

Addresses #858 | 2018-12-18 09:47:50 | 115a13933adbce880a72c1653b7be94eba566202

Ignore exception on cancel/fail race in CancellableContinuation

There seems to be no other way to satisfactory fix the problem of
a race between cancellation on CancellationContinuation and
concurrent failure of the corresponding background process in a
way the distinguishes "failure from cancellation attempt" from
a "true failure" without placing undue burden on anyone who is
implementing `await()` extension function for various future types.

- Added testTimeoutCancellationFailRace that works as a perfect litmus
  test; being allowed to run for a while it reliably detects various
  problems in alternative approaches.
- Optimized CancellableContinuationImpl; merged its code with
  AbstractContinuation class that is not needed as a separate
  class and removed.
- Deprecated and hidden CancellableContinuation.initCancellability();
  it is now always invoked after the end of the block that was
  passed to suspendCancellableCoroutine.
- Deprecated `holdCancellability` parameter to an internal
  suspendAtomicCancellableCoroutine function.

Fixes #892
Fixes #830 | 2018-12-15 11:12:47 | 876e9bab95d34f311be030a0706497564f96d95a

Introduce test module with testable main dispatcher (#749)

Introduce kotlinx-coroutines-test module with API to set Dispatchers.Main 

  * Dispatchers.setMain and Dispatchers.resetMain extensions
  * Use real factory in HandlerDispatcher instead of using initialized-once statics (prevent ExceptionInInitializerError)
  * Improve MissingCoroutineDispatcher diagnostic
  * Do not cache failed results in test dispatcher to allow reusing it between tests 
  * Deprecate HandlerDispatcher.Main (was accessible only fom Java API)

Fixes #746
Fixed #810 | 2018-12-17 16:49:12 | 4327b2120558c0e232b522b32b3427dc2ad02bf5

fix small typo of async method | 2018-12-16 07:09:02 | 054fcc2b68f9d9933981d65c485af88dba8f89d6

After merge fix: resolve clashes between type alias CoroutineStackFrame and jvm.internal.CoroutineStackFrame | 2018-12-13 09:57:37 | cd162d356e7dbb8a6ed8e02ceae0133af2df95b5

Merge pull request #876 from Kotlin/debug-agent

Coroutines debug agent

Fixes #772 | 2018-12-13 09:39:45 | a5a7cdb86a10d6fcda61c2b9fc55963b86ca8947

Repackage byte-buddy along with debug agent (so it shouldn't be a dependency of target process), use shadow plugin for that to avoid clashes with other byte-buddy versions and publish shadow jar instead of regular one for debug module | 2018-12-13 08:58:29 | 3781a821a11a64670b5a3ffa3c276f1533332ad7

Reknit after docs fix | 2018-12-13 08:58:24 | 75f634c56e3655d475bd93c4d7a5fc7242744d69

Speedup linerizability tests, make conflation part of helpClose (fixes nightly stress failure) | 2018-11-19 16:31:51 | b733f7d0cfd3c8fcca234d7d49f4350dfeb36264

Debug agent cleanup

  * Readme
  * Do not fail on Windows during signal handler installation
  * Do not warn about missing artificial stackframe | 2018-12-12 16:08:32 | 7a6fd89c04b3ee972136c0648700f8500dfb0f23

Rephrase default dispatcher documentation | 2018-12-12 10:36:54 | e06585a482f0f94d2819c24af8ac42582d38af6a

Get rid of top level 'debug' folder | 2018-12-11 16:49:07 | 7520c978464e2f3b1cc075dea36a9f11088e2d85

Unreachable code fix | 2018-12-11 16:44:49 | f64bcde03b4c5e46d63f19d5dcb3b1738c59eefa

Debug agent code style | 2018-12-11 16:20:39 | 12695b763715338149e0bcaa3633a6e0296fc361

Code style in test code fixed | 2018-12-10 13:11:06 | 8e9e4d1706083dd5fb6fcc4c89d2a65caa33914c

Debug agent optimizations

  * Do not store creation stacktrace of the coroutine, recover it from ArtificialStackFrame
  * Reduce lock window where possible to avoid contention
  * Avoid stacktrace copying where possible | 2018-12-10 17:19:35 | 5a80d2a0b0c52121a0788acc036030812fea9f59

Debug agent to track alive coroutines

  * Can be installed dynamically or from command line
  * Captures coroutine creation stacktrace and stores it in completion, automatically enhancing stacktrace recovery mechanism
  * Allows to dump and introspect all active coroutines
  * Allows to dump Job hierarchy
  * When installed from command line, dumps all coroutines on kill -5
  * Probe support in undispatched coroutines | 2018-12-10 08:41:00 | c7239ac4915df344add7386c8aa19038499f5e4b

Scoped builders and exception stacktraces synergy

  * Recover stacktraces via both fast and slow paths in scoped builders
  * Merge stracktraces of nested scoped builders, eliminate common prefix so it looks like a flat profile
  * Optimize stacktrace-related machinery
  * Copy meaningful part of original exception into recovered one, rename "Current coroutine stacktrace" to "Coroutien boundary"
  * Rename Exception.kt to StackTraceRecovery.kt to avoid name clash with another Exception.kt | 2018-11-27 15:13:47 | 1032f5801a9719fbe67325daec944104eff793a9

Initialize JavaFx more accurately, do not leave dispatcher in uninitialized state in case of unexpected failure

Fixes #816 | 2018-11-27 12:57:16 | 69a2d9273288dec1e29a81f2c314ccf23ae99093

Fix: default dispatcher doesn't work with jsdom | 2018-11-06 16:46:00 | bb0ad4ae2772c9c4af0e3b44b129423cf5ae0c58

Sanitize class names received from Kotlin debug metadata | 2018-11-12 17:04:35 | 25a886e9ee0047f755e8d32f496ced3760e7ec64

Debug optimizations:

  * Extract call to suspendCoroutineUninterceptedOrReturn behind recoverability check
  * Cache exceptions constructors into WeakHashMap in order to avoid expensive ctor lookup | 2018-11-02 17:06:14 | e3b80d9c7198728a5566cb2c74da61ee115e61d6

Basic exception stacktrace recovery mechanism

  * Implement CoroutineStackFrame in CancellableContinuationImpl, DispatchedContinuation and ScopeCoroutine
  * On coroutine resumption try to reflectively instantiate exception instance of the same type, but with augmented stacktrace
  * Recover stacktrace by walking over CoroutineStackFrame
  * Recover stacktrace on fast-path exceptions without CoroutineStackFrame walking to provide more context to an exception
  * Unwrap exceptions when doing aggregation in JobSupport
  * Add kill-switch to disable stacktrace recovery, introduce method to recover stacktrace on the exceptional fast-path
  * Add `suspendCoroutineOrReturn` on exceptional fast-path in await in order to provide "real" stacktrace

Design rationale:
All recovery of *suspended* continuations takes place in Dispatched.kt file, the only place where all calls to "resume*" ends up, so we don't have to remember about stacktrace recovery in every primitive we are implementing. But to provide more accurate stacktraces we *have to* recover it on every fast-path for better debuggability.

Fixes #493 | 2018-11-02 12:55:20 | 675c30c4b96533a374ae36b144dbe6b26634b97b

Merge pull request #791 from Kotlin/undispatched-cancellation

Use final Job state in undispatched coroutine completion | 2018-11-06 12:55:53 | 666ea6e554fa52ea03504ab618543ca26e20ce3b

Add ExperimentalCoroutineDispatcher to binary compatibility check, restore binary compatibility in Ktor | 2018-11-06 11:03:39 | e3ab2a692a6da18ee9213a124a4c111235046c75

Add scheduler name to ExperimentalCoroutineDispatcher

Fixes #661 | 2018-10-31 13:15:35 | 92327322442d4c8be225067ff6e16c6827f8b38e

fix link | 2018-11-05 16:56:31 | 64f2b2006b5a7cf2a760ec976dd28e988ce122d0

fixed typo | 2018-11-05 14:28:47 | ace91872cc56113fa10e844069f46eb3bbec9c95

Use final Job state in undispatched coroutine completion

  * When using in-place coroutine builders, startUndispatchedOrReturn will return block's final value on fast-path. This is not correct because if any of the children had failed, whether or not exception is thrown depend only on child timings. Moreover, in the face of such race exception may be ignored if scope owner wasn't cancelled or is missing.
  * Introduce special hack for withTimeout and withTimeoutOrNull to ignore TimeoutCancellationException on the fast path
  * withContext, coroutineScope, supervisorScope, withTimeout and withTimeoutOrNull are affected and now check cancellation on fast-path | 2018-11-04 12:32:34 | 78832e3bb38560f4c4d55cdba436bf7bc9b761ca

SchedulerTask is now an abstract class with optimizations for jvm

* It removes the need for a separate SchedulerTaskBase
* submissionTime and taskContext are marked as @JvmField
* DispatchedTask is also an abstract class
* resumeMode is marked as @JvmField | 2018-11-01 21:10:39 | aa374a95dc7e6df4fd6458fe6d8abe95e2953fce

Scheduler: capture TaskContext for afterTask before running it

This is not strictly needed, since the reusable Task instances
(DispatchedTask) should be always reused in the same context, but
this makes the code more resilient to future changes. | 2018-10-22 02:31:23 | e64d9b706cb5180260e4d95fa3a990449163da51

Avoid allocation of CoroutineScheduler task object

* DispatchedContinuation and CancellableContinuationImpl have all
  the necessarily field to be scheduled | 2018-10-21 17:08:49 | 16e20347dc5557063742ea8a06dbe5162a211c25

Publish: Comments style fixed | 2018-10-26 20:02:08 | f18b9f580faff47af054cb6c0942cd15ccc7675d

Fixed exception handling for publish builder

* Test that ensures proper parent cancellation
* Stress test to ensure that exception in publisher always handled
  by parent
* Also fixed race between request & signal completion that did not
  reproduce before | 2018-10-23 05:28:12 | ac848e872da94e01ed60a6bfecbfe3926229f44f

Reactive streams integration conformance to TCK verified & fixed

* Throw NPE on null subscriber
* Throw IAE when requested n <= 0 elements
* Do not sent any notification after cancel() | 2018-10-20 16:50:05 | 8cced247b1d83f7885f21be8c9b0354dab0fd1f3

fix minor typo | 2018-10-30 19:14:20 | a223f351c1dac80443b02ab905d46acbf4a66720

Implement yield for unconfined dispatchers, documentation improvements

Fixes #737 | 2018-10-23 09:29:56 | c33ef61d4502b71e0cdc354337f261917102d1c6

fix: make snippet as non-runnable | 2018-10-23 12:33:12 | 0661d477332205c23defe65d51e4063cd009e023

Prevent temporary leaks in HandlerDispatcher by properly handling
cancellations in scheduleResumeAfterDelay() implementation | 2018-10-16 22:30:40 | e321394c359758659a07ad1c98429ec2acd8ea59

fixed typo | 2018-10-19 21:16:57 | d981966acf780078119493c1f64e30dc9fa6e02e

Merge branch 'release-candidate' into develop

# Conflicts:
#	core/kotlinx-coroutines-core/test/RunBlockingTest.kt
#	docs/coroutine-context-and-dispatchers.md | 2018-10-18 14:40:10 | a7e10146781744f6df3865a1a33fa4e7cbc2c0b6

Merge branch 'context-elements-opto' into release-candidate

# Conflicts:
#	common/kotlinx-coroutines-core-common/src/Dispatched.kt | 2018-10-18 13:59:46 | cd37d8e8b30656a92a883b646fe050ff479bafdd

Minor optimizations of UndispatchedEventLoop | 2018-10-18 12:17:25 | 23d435b17a1aaaba86cc71656a4080547c4c727e

Do not step into thread-local event-loop on CancellableContinuation#dispatch fast-path | 2018-10-18 08:54:56 | faa477496bc2c05dad4034847a3f7d3f6aae3818

Use FIFO queue in undispatched event loop | 2018-10-17 16:51:50 | 09b9d6c157c9d7c6ec84052c16e64d3eebd0bc8e

Move undispatched thread-local event loop to dispatched continuation, execute all undispatched tasks in that loop to avoid SOE in user-supplied unconfined dispatchers and 'immediate' main dispatchers. | 2018-10-17 15:37:36 | fd54bc4882357771d0bec29abbd6e99dfccab725

Rework Dispatchers.Unconfined to use thread-local event loop

Fixes #704 | 2018-10-17 07:57:30 | 7ee722a595b416023c69d987fb7e4682ac0ffe91

Cache result of ThreadContext#foldAll in the field of DispatchedCoroutine to avoid context fold in tight loops

Fixes #537 | 2018-10-16 12:47:26 | ae85797805f93f98bfad64f5f91ba97e4f2c1fbc

Dokka fixes

  * Provide module with Kotlin 1.3 API because Kotlin 1.2 from Dokka can't read classes marked as "from the future"
  * Add runConfiguration dokkaStubs which is included only during dokka task with some classpath magic for Kotlin 1.3
  * Add package.list for slf4j
  * Fix unresolved types/links in documentation
  * Suppress all internal/inherited API | 2018-10-13 12:40:32 | 706e39363b586127b29e28fd97d476129c22fe93

Make EventLoop internal, @JvmName("from") for ExecutorService.asCoroutineDispatcher | 2018-10-11 16:09:44 | b6eca2a62158b2dc8d9b41d86040924095dca662

Use toString implementation for continuations to leverage debug metadata

Fixes #679 | 2018-10-10 11:46:53 | 4220ca2106bea653f2831f19c2c93752ea0e468a

Cleanup: get rid of workarounds, cleanup guide, suppress/fix compilation warnings | 2018-10-10 08:56:41 | 1bdbb3ef364006515157b5884dc663d9c3172c6c

Experimental annotation revisit:

  * Mark our API annotation as experimental with corresponding warning or error
  * Get rid of workaround for new inference bug
  * Migrate to compiler arguments instead of annotations | 2018-10-09 16:06:29 | e6e82391c33716033996ef6718756feab641816c

Restore TOC in the root coroutines-guide.md file with links to individual files

* Knit supports new TOC_REF directive for that.
* Reknit docs (also fixed out-of-date sample file). | 2018-10-08 17:20:12 | 715acd33e564dbff128a12b10ec2c6e24240d330

Migrate to Kotlin 1.3 coroutines, drop experimental from package

* Features based on version 0.30.0
* Uses Kotlin version 1.3.0-rc-57
* Uses Kotlin/Native version 0.9.2
* Uses AtomicFu 0.11.9-eap13
* Replace SuccessOrFailure with Result
* Replace buildSequence and buildIterator with sequence and iterator
* Apply @BuilderInference on all builders (including extension methods to workaround inference bug) | 2018-07-13 07:33:25 | 0950dfa1fe114e3682a546e3e53ef34dec9dfd4a

Fix lost exception from dispatched withContext on cancelled job

Fixes #675 | 2018-10-08 13:13:01 | 0f94304c6ae46c8f0cec24dde29d2e7af9ae7e97

Mark newSingle/FixedThreadPoolContext as obsolete, document the reason

* The will be replaced by another mechanism in the future.
  See #261 for details.
* The proposed replacement is to use the standard java API:
  Executors.newSingleThreadExecutor/newFixedThreadPool
  and convert to dispatcher via asCoroutineDispatcher() extension. | 2018-10-06 13:36:13 | f5126d0a9263f0b73a57d17031c340f78e3a25bd

Lazily load Dispatchers.Main and provide a stub impl on failure

Also specified explicit public visibility for Dispatchers object.

Fixes #658
Fixes #665 | 2018-10-06 14:09:05 | 0ece3885d445b60d254dc0fb21c7c05c7ebfb1bf

fix grammar typo

removed repeated 'for' | 2018-10-05 13:16:33 | e7a0723e930d52c4cb4665c5a3918f883287c039

Short Dispatchers.Default.toString value ("DefaultDispatcher") | 2018-10-02 09:59:11 | ec8cbd252d20adcdc91149ae9129149b252d945c

Move UI dispatcher to common Dispatchers.Main (#641)

* Main thread dispatchers are grouped under Dispatchers object and are discoverable via ServiceLoader

  * Dispatchers.Main can be consistently used and easily discovered, its implementation is discovered with ServiceLoader
  * It allows us to add iOS Dispatchers.Main implementation in the future thus opening the door for multiplatform UI-dispatched code
  * Workaround for #626, now Android users can start migration to RC coroutines

Fixed #626 | 2018-10-01 16:01:16 | cfe699fb59d799ab22da23aae983cc34b1164f29

Never loose coroutines when CoroutineScheduler is closed

* CoroutineScheduler close/shutdown sequence now guaranteed that a
  submitted task is either executed by the scheduler that is being
  concurrently shutdown or RejectedExecutionException is thrown.
* RejectedExecutionException is caught by the coroutine dispatcher
  implementation and coroutines are rescheduled into DefaultExecutor
  if a (custom) instance  of CoroutineScheduler is being shutdown.
* Added stress test for coroutine scheduler closing. | 2018-10-01 07:52:56 | 4b0f4dec24b93db4e0e0abbfe59b115e886a30c1

Coroutine scheduler is used by default instead of deprecated CommonPool

* Documentation and guide are updated correspondingly
* "DefaultDispatcher" is used as a public name of the default impl
* Implementation is integrated with virtual time-source
* Shutdown sequence is reimplemented in a safe way for tests,
  makes "close" safe to use on custom instances.
* "close" on DefaultDispatcher throws exception just in case
* -Dkotlinx.coroutines.scheduler=off can be used to switch back to
  CommonPool

Fixes #198 | 2018-09-28 09:20:49 | 303708b27f8d997ae482e3106679a7d170bc16d7

Exception unwrapping logic rework, do not unwrap cancellation exception if parent can handle exceptions

It allows to properly handle only relevant exceptions by child without reporting the same exception multiple times, fixes suppressions hierarchy and allows to implement supervisorScope properly | 2018-09-28 09:29:21 | 88e72f9973810119f105f78768b59e19f6a49c26

Introduce SupervisorJob & supervisorScope

This change also fixes propagation of cancellation for Job() constructor.
When both Job() and SupervisorJob() are cancelled with exception (fail),
they cancel their parent, too. So we have similar behavior between:
* Job() and coroutineScope { ... }
* SupervisorJob() and supervisorScope { ... }

Fixes #576 | 2018-09-23 16:16:04 | 21f171c8cb09831e25acdeab5c667cf3c15a9692

Avoid OOM in thread-pool dispatchers, try to reflectively invoke setRemoveFutureOnCancel on executor instance and use default dispatcher if attempt failed

Fixes #571 | 2018-09-25 12:45:53 | e29f49799d118b5c3feb38886af3030d027e7b60

async and async-like builders cancel parent on failure

* Affects async, CompletableDeferred, and all Rx integration builders.
* This makes all coroutine builders totally consistent. They all
  cancel parent on failure, but they all consider "CancellationException"
  to be the case of "normal cancellation" that does not propagate to
  parent. The only missing case is Job() that should be fixed together
  with introduction of SupervisorJob().
* Note that "scoping" builders don't "cancel the parent", but rethrow
  the corresponding exception instead, so it that is how it gets
  propagated up the stack.
* This makes parallel decomposition exception-safe. You
  cannot loose an exception as along as default (child async)
  behavior is not overridden.

Fixes #552 | 2018-09-27 16:17:16 | 52bfdabfa1476f55c1b3880d43f49977fc8df943

Copy deprecated annotations on Job member to inheritors

* Makes them easier to find for cleanup
* Avoids bug with light classes | 2018-09-28 09:41:58 | ffda1da6aec27b51f0bc8640f0e48c8fcd1e8f59

Restore binary compatibility of Executor.asCoroutineDispatcher

Fixes #629 | 2018-09-27 18:19:38 | 18cc588106ff7f4c680831809e5af8d75063c689

fix broken links for kotlin web site (#628)

* fix broken links for Kotlin web site | 2018-09-27 15:42:04 | cbeef1039d7402939bac8ec4674e1a7b1adf993a

Merge pull request #588 from Kotlin/handle-exception-fix

Handle exceptions fix | 2018-09-25 21:00:29 | 25b4388ef2f94909acac51cf1e0206975cc4b84a

Add name parameter to Handler.asCoroutineDispatcher

Fixes #580 | 2018-09-25 13:40:30 | a180ff75e9f7c97189a2651e96f4212bff0b105e

Fix lost exception during cancellation in produce, fix integration with play services after rebase | 2018-09-25 16:16:02 | 1b22af7e462272cbc33fd019975ee3ec5dbf1b78

Merge branch 'develop' into handle-exception-fix | 2018-09-25 13:10:26 | 1e0a2f0ad358c49d97602ee01ecf76602721fa4f

fix compilation | 2018-09-24 17:29:00 | f30715955637d2006e17fda7f99d002877fedc1c

Docs for context/coroutineContext in AbstractCoroutine are fixed | 2018-09-24 17:29:42 | 2d8cad05755d47af7987f39385527d3bddb15377

Fix exception aggregation to ensure atomic handling of exceptions

* Removed legacy onFinishing handler support from JobSupport.
  - It is no longer needed, because handleJobException covers #208
* Fixed bugs that were masked by cancelling parent from onFinishing.
* Consistent "Finishing" state was introduced in internal machinery:
  - Job enters finishing state when it is failing or it is completing
    and has children
  - Finishing state cleanly aggregates all failures, tracks cancellation
    and completion status
* Job.isFailed is introduced as a consistent way to query the "failing"
  state of the job that was previously only implicitly available via
  invokeOnCompletion handler (cause != null means a failed job) and
  the documentation for both Job & Deferred is updated to reflect that.
* Source-incompatible change: Job.invokeOnCompletion boolean parameter is
  change to onFailing. Such handlers are now invoked as soon as the job
  starts failing and the root cause exception of the failure is consistently
  passed to all the handlers.
* The following internal methods were introduced to facilitate this:
  - Job.failParent(exception) is used by child to signal failure to parent
  - Job.cancelChild(parentJob) is used by parent to cancel child.
* Child never aggregates exception received from it parent, but uses
  it as it root cause if there is no other exception.
* JobSupport.handleJobException() logic for launch/actor is split into:
  - failParent - can be invoked multiple times on race;
  - handleJobException which is invoked exactly once.
* Exception materiazization is much lazier now, which should
  significantly improve performance when cancelling large hierarchies.
* Other minor perf improvements in JobSupport code.

Fixes #585 | 2018-09-14 09:52:50 | ecbc85cbdad134d868698e22c0fdd7220eaced0f

Typo fixed | 2018-09-22 13:28:37 | 63e3896d85f827f2e403ffd25593ac5d9af54715

Fix typo in deprecation message of JavaFx dispatcher | 2018-09-20 17:10:30 | 39a2c559b538b8681c0724d5ec3ee6058af4e1c3

Cosmetic fixes | 2018-09-20 08:25:56 | 2dd53204e7047e970f145281c11a9c834021b3a9

Improve HandlerDispatcherTest, check that jobs are actually executed | 2018-09-19 11:30:51 | 847eba7c935ed784e918d976c9c43464179a2df9

Reknit guide, fixed TOC in Knit with comma & verify mode in example-context-09 | 2018-09-19 11:49:42 | bca98f4e9ea3c485c8691209be32fee487f812fe

CoroutineScheduler: fixed race between createNewWorker & shutdown for tests | 2018-09-14 12:17:12 | 241e74e6a2cdadaa2753f40a326c732e95fac2d0

Fixed sporadic test crashes related to withTimeout and children

- The bug only manifested when withTimeout coroutine had children working
  in a different dispatcher
- A separate stress-test that reproduces this problem with much higher
  probability | 2018-09-16 12:31:13 | fa9586bc283d60427ad3e9162de7962da4b0ec1d

Updated dispatchers references in readmes and docs | 2018-09-11 16:16:49 | f189cec57d7d0751464a5939f1bbcbd32e15d7c0

Dispatchers are renamed and grouped in the Dispatchers object

* Dispatchers.Default — a default dispatcher for background asynchronous tasks
  (currently backed by FJP commonPool, a new dispatcher in the future).
* Dispatchers.IO — a dispatcher for blocking background operations (#79).
* Dispatchers.Main — a dispatcher for Android Main Thread (#533).
* Dispatchers.Swing — a dispatcher for Swing Event Dispatch Thread.
* Dispatchers.JavaFx — a dispatcher for JavaFx Application Thread.
* Old dispatchers are deprecated, CommonPool is deprecated, too.
* awaitPulse() in JavaFx and awaitFrame() in Android are top-level funs.
* Introduced HandlerDispatcher, SwingDispatcher, and JavaFxDispatcher types
  in the corresponding UI modules for type-safety and future extensions

Fixes #41
Fixes #533 | 2018-09-11 15:42:03 | dc29b071d4784e3739f89223ced2333ecd5408ad

Fixed hangs during thread termination in IO dispatcher

Fixes #524
Fixes #525 | 2018-09-11 12:38:14 | 750d468b3281570910d0cd4000d4e29702b25020

Invoke handler using invokeIt to avoid JS bugs | 2018-09-07 11:36:05 | c430e0797e87af77f812bbcfb8751e4a0e31ffc6

AtomicFU 0.11.5 to fix Windows compilation | 2018-09-04 14:58:45 | 61abcd224a13f674bffae096afa7250de262df87

typo fixed | 2018-08-24 12:24:02 | 1a1237083b14d5de8f13f66b7a4ba6d9e26183d7

Introduce IO dispatcher to offload blocking I/O-intensive tasks

Fixes #79 | 2018-08-23 14:27:19 | f5e67ba597acdfb90ef84d29e4d6028f3f17a6ba

Introduce ThreadContextElement API to integrate with thread-local sensitive code

* Debug thread name is redesigned using ThreadContextElement API
  where the name of thread reflects the name of currently coroutine.
* Intrinsics for startCoroutineUndispatched that correspond to
  CoroutineStart.UNDISPATCHED properly update coroutine context.
* New intrinsics named startCoroutineUnintercepted are introduced.
  They do not update thread context.
* withContext logic is fixed properly update context is various situations.
* DebugThreadNameTest is introduced.
* Reporting of unhandled errors in TestBase is improved.
  Its CoroutineExceptionHandler records but does not rethrow exception.
  This makes sure that failed tests actually fail and do not hang in
  recursive attempt to handle unhandled coroutine exception.

Fixes #119 | 2018-07-25 09:22:46 | 7587eba96a230f3f0ab0c04f52723e926f7a845d

AtomicFu version 0.11.3 (bug fix) | 2018-08-23 11:05:46 | be065fd2c566acf4f600de23d45d70cf9f2144bc

Introduce ExecutorCoroutineDispatcher instead of CloseableCoroutineDispatcher

Fixes #385 | 2018-08-15 10:03:23 | b517f0529fe4a2066ca8ac985c08206cd4587758

Add workaround for K/N bug | 2018-08-22 09:37:41 | bbe6d8a915b2be9c0a7ff9d92677c878718fa219

Implement withTimeoutOrNull via withTimeout to avoid timing bugs and races.
Remove deprecated API

Fixes #498 | 2018-08-21 16:45:29 | 988eb26469819f7cc8cb1ba26c3a76a6805e8387

Provide API to create limited view of experimental dispatcher

Fixes #475 | 2018-08-15 09:06:06 | cac1a0f13c5b81cdfa3c2d1020e8d86ac8cd0029

Additional debug output for CoroutineSchedulerStressTest | 2018-08-10 17:38:41 | 21ce9c066c752adf4db1e8388a9d38a390b5f08b

Execute EventLoop#invokeOnTimeout in DefaultDispatcher to allow busy-wait loops

Fixes #479 | 2018-08-08 15:04:59 | e90cdb031ffab87d9f7671cc9e856b2a9534d59e

Scheduler tests fixed:

[temporary] Ignore flaky tests
Fix benchmark compilation
Fix WorkQueueStressTest | 2018-07-26 17:02:03 | 9542f1ce4f84d08ef2b33d14ce3ae79a8a93fa86

Scheduler improvements:

Fix (one more) ABA problem in tryUnpark
Global TaskContext to speedup CPU tasks
Documentation improvements
Stress tests constants tuned to be more robust and faster on local machine (and when ran from IDEA)
Style fixes | 2018-07-26 10:57:04 | e50fb89c4e80d7accb9bdfff3ce54c59d2857c26

Scheduler tests infrastructure

Support "kotlinx.coroutines.scheduler" property to change DefaultDispatcher
Updated scheduler shrink test with custom idleWorkerKeepAliveNs config,
so that they execute faster
Fix submissions from another instance of CoroutineScheduler
Run JDK16 tests and tests under new scheduler tests only during nightly stress test | 2018-07-20 20:57:57 | 5c7454b8a872d925f206f418c16d9880bf23e25f

Removed wrapper from LimitingBlockingDispatcher by introducing TaskContext | 2018-07-23 09:38:06 | 216e4d30a2b225361a4f3e59465c079a0f116379

Fixed ABA problem in parkedWorkersStack and other stress improvements

* Workers are now numbered starting from 1, zero is used as sentinel
* Workers are lazily created (no threads initially)
* Close/shutdown of the scheduler also clears state so that subsequent
  rogue attempt to dispatch anything fails.
* Work stealing is more predictable. It starts at random index but
  then goes linearly via workers array. | 2018-07-20 20:25:58 | db22e4023442341d39d0c3797de73e74efb25882

Scheduler cosmetics

Stealing logic cleaned up a bit (mostly style)
Update worker thread names when worker threads are terminated to maintain
consistency between their index in array and name;
Improved debugging info (toString)
Merged yield and spin counters, parkTimeNs is in Int | 2018-07-19 11:12:31 | bba6e8918e32d521109583a9024b3d5e82da53f5

Improved management of parkedWorkersStack in terms of ABA/concurrency;
Also includes documentation, naming and packaging fixes | 2018-07-18 10:12:31 | 1d3b0191ecbf498965d81257c80ad6f87e583552

Improved tasks dispatching:

Merge blocking and created workers into single state variable
Replace j.u.c. queue of parked workers with intrusive stack to support shrinking and increase performance
Replace j.u.c. global queue with Michael & Scott queue which supports conditional polling
Poll for blocking tasks from global queue when CPU token is not available
Make last ditch effort before thread termination
Idle reset on requestCpuWorker | 2018-05-03 11:52:00 | 18a91347466560b63144d0097f248d9edb029780

Fix ordering bug in QuasarTest | 2018-07-25 16:16:23 | a608a335ff57e969f69985c43ee70c30da1dba8f

Get rid of compiler bugs workarounds | 2018-07-25 13:27:14 | 5f73827f3131332018c02650057eff4aa2886ae7

Channels concurrency improvement:

Make close, cancel, isClosedForSend, isClosedForReceive and offer linearizable with other operations
Fix bug when send operation can be stuck in channel forever
New concurrency tests

Fixes #359 | 2018-07-17 15:39:20 | ea651aa5badbc20f911c844db2a57ea4f68fc38b

Access to PlatformImpl in JavaFx dispatcher, on Java 9 it's an internal module which should be explicitly exported

Fixes #443 | 2018-07-20 12:07:28 | 5557245405f965ec5ca26083301559066a1be147

Minor grammatical changes to the Coroutines guide

Minor fixes for the English grammar in the coroutines guide to help ensure new readers understand coroutines properly. | 2018-07-19 20:01:40 | 977ada1e74e0ae9b011fb219891433a6d36e9ef3

Validate FJP.commonPool parallelism to avoid pathological bugs

Also always construct private FJP pool if
kotlinx.coroutines.default.parallelism is explicitly specified.

Fixes #432, #288 | 2018-07-11 10:36:07 | 1e12210cd2bccdfd866b1c9649cd19e40663fb5f

Change order of handlers in JobSupport and CancellableContinuation
1) Invoke handlers before dispatching in CancellableContinuation to make behaviour timing-independent and Unconfined doesn't produce unexpected results
2) Invoke onCancellation -> handlers -> onCompletion in Job to make behaviour timing-independent

Fixes #415 | 2018-07-03 08:11:21 | b10287ecb35463f471ac120367a0a4f56f6b5c49

Typo fixed | 2018-06-26 11:58:39 | 7981999a156918abced59de696b02d9bc731f808

IO: fix joining and continuous writing byte array interference | 2018-06-13 16:49:45 | 9faa0395afd26a3c29cd67de5dce635a7882cf5c

Update ThreadPoolDispatcher.kt

Fixed typos. | 2018-06-09 17:01:53 | 517a2592077b067032d6c0379226d0467d7662f1

IO: fix continuous writing session interfered with joining | 2018-06-01 14:23:47 | e15eae8e3537080a82078873d762ad9de61f50f4

Typo fix | 2018-06-03 23:34:22 | e185ed6f918a1df082832c9059a091505b9a5cf9

Introduce deprecated ReceiveChannel#use to preserve backward compatibility with SubscriptionReceiveChannel, fix reactive samples | 2018-06-01 12:30:34 | 313978cf6b3901b1d7fbfb5d1f688c068a072c09

LockFreeMPSCQueue optimized & fixed

* no need for REMOVE token to hurry up GC
* Placeholder logic is fixed to avoid potential data loss on wraparound
* Stress test for resize/copy added | 2018-05-30 18:58:02 | c22a1c748e93db6e7d4e73f9118e8435edbeb698

Leaking handles in awaitAll are fixed | 2018-04-28 16:22:29 | e0b6db04b3bd86e942bc7e40081a82aedd8fd200

Delay bug fixes:
Invoke clearTimeout on cancellation in JSDispatcher
Remove delayed task on cancellation from ThreadSafeHeap on cancellation to avoid memory leak | 2018-04-26 13:03:40 | cd00643b92c9698ca728f92a66f52b30b3811d05

Documentation for debug property values | 2018-04-11 19:21:23 | 590c8889c2bb5341f15ee20e440c5599342fe34b

typo fixed | 2018-04-04 06:59:33 | 905a512625ad96dcd45c789f983babd93dfde011

Add extension to ExecutorService to return closeable CoroutineDispatcher

Fixes #278 | 2018-03-20 19:28:52 | 26f4b9ecd1bdd03299b668541f7c7c9ecaf9ab7c

Debug toString for channels

Fixes #185 | 2018-03-06 10:37:42 | e4b6f09af7c0d0b6963fa8611e867ff3292fad0e

rx-example: Added application plugin & fixed to use runBlocking | 2018-03-05 14:58:59 | 00560e8b0add1628bd0a32202b6f3cc301b35af3

Use NodeDispatcher on ReactNative

Fixes #236 | 2018-03-05 09:01:07 | ecc68f13141d1353aa2bb1d027a077e0fd7be4fb

Check for undefined `window.addEventListener` when choosing default coroutine dispatcher.

Fixes #230 | 2018-02-10 19:35:58 | 54d57e0c1fff22fe1d72c762f2bdbf01995395ca

Update README.md

Minor typo and typography fixes. | 2018-02-04 00:30:58 | 7dd6b66eced47e4ddf0b2c76c974ac19612b827c

IO: fix error propagation in blocking adapter | 2018-02-02 14:18:47 | f0c1d99e2c5c5978da7ace9d58c61a5648ed7687

Update coroutines-guide.md

This tutorial suggests just Async suffix:
https://github.com/Kotlin/kotlin-coroutines/blob/master/kotlin-coroutines-informal.md#asynchronous-programming-styles
Also, there was "of" instead of "or" | 2018-01-29 17:39:02 | 7e94e70734f6e01b0522d11071e6825879a221e7

runBlocking is improved to properly support specified dispatchers,
so that `runBlocking(UI) { ... }` can be used outside of UI thread.

Fixes #209 | 2018-01-29 15:07:21 | cb78787638039096804bc1b97031bcb9801c0547

Workarounds for KT-21968 to fix JS tests | 2018-01-24 20:31:22 | dfeba242b9e328f7528507f9349623671a00333c

IO: fix joining sequence, avoid infinite joinTo suspension | 2018-01-23 20:16:54 | d1842c6301d8debca8509809d473ce7e889b1d7b

IO: make reusable cancellable continuation implement DispatchedTask | 2018-01-12 15:46:22 | 4d01f7ec3b33f7633f3737a5ab3a3fc90703f57f

JS: Introduce Window.asCoroutineDispatcher and use custom queue in
Window.awaitAnimationFrame to align all animations | 2018-01-13 08:20:32 | 1867f6de0fb39077d0cb13fdc0400dd4568f717b

Actually fixed startup/shutdown of DefaultExecutor for tests to prevent
thread leak. Includes test-case. | 2018-01-12 15:28:24 | 9483301695f4c0784d663238ecd0ef04bbfcbea3

MPP: Debug toString should not depend on kotlin-reflect | 2018-01-11 16:04:12 | b79277b4fab5353680445f36dd9b19a740828203

IO: Use TestBase in all tests and fix leaking threads in tests | 2018-01-11 10:48:19 | c45f5fa3b636d66b824351c8d8d9368b8ee4e37f

MPP: Ported DispatchedTask perf improvements to JS and more code is made common | 2018-01-11 09:39:36 | f29203c158a526f90ae8574abfc1ba6dd5249262

Performance: Remove DispatchTask, store value in DispatchedContinuation | 2018-01-10 13:25:25 | f2239e191f55883486d5ce04ffb0c6f75cdc3468

Update coroutines-guide.md

Correct `Dispatcher` spelling | 2018-01-08 13:56:54 | fa13beba79e6ebb68588ba2167b67a77196907d3

Optimize creation of DispatchTask for cancellable continuations (fixed) | 2017-12-28 09:21:14 | bdf23f28c425ea391baa7ddbc3ba012d15e6dfa5

Optimize creation of DispatchTask for cancellable continuations | 2017-12-27 22:09:43 | ac48070de5e20b727b6d9ffd5cc7c259426fb6fb

MPP: DefaultDispatcher internal impl class renamed to JSDispatcher | 2017-12-27 10:14:54 | a919827885289271a6c598ab47fdf4434a8e0da3

fix typos | 2017-12-24 19:55:06 | d2d42ea802b54d2ede23f3edf3c18521ae46a3e9

IO: fix accidentally used tryResumeWithException | 2017-12-06 14:09:01 | 9ef4e0c05168acdb2c955079e2ee857cfec9de06

IO: fix spuriously hanging pipe tests | 2017-12-05 12:41:42 | 4adac45480b33664d79b24f7a779e7d4c1da68b1

IO: fix joining with different write byte orders | 2017-12-05 09:35:56 | 8af8937a34e893661dfe15f9be598eac50b101df

IO: fix infinite writeSuspend loop caused by auto-resuming flush | 2017-12-05 09:27:09 | e6764086ef4a03ec610245740b379f5da617224c

Bug fix: start hangs on lazy coroutine with attached invokeOnCompletion | 2017-11-30 13:41:47 | 5610e1df2eb3f67be8b45633b5d6ffbf73ec6bb8

Add DefaultDispatcher on some reactive operators | 2017-11-29 21:12:35 | e19ee04ca72316f9d67a58d35b8be398b059f1f5

IO: fix too expensive joinTo fast-path | 2017-11-23 09:39:27 | 060f36a06d341f43c0f9e77fd6706bf71f94972c

IO: fix typo in test name | 2017-11-20 08:43:26 | 9a6ca1a006debfa08392027508d03a141ae53841

Introduced ReceiveChannel.cancel method;
all operators on ReceiveChannel fully consume the original channel
using a helper consume extension, which is reflected in docs;
removed `suspend` modifier from intermediate channel operators;
consistently renamed channel type param to <E>;
added two versions for xxxTo fun -- with MutableList & SendChannel;
added tests for all channel operators;
dropped/deprecated ActorJob/ProducerJob, fixes #127 | 2017-08-17 18:01:33 | b555d91193d9e76710062451cf94a94d14820e98

IO: fix race in closeWaitJob of JoiningState | 2017-11-17 16:30:22 | 47d92bafe90d899dfb53cd0f8bf7eae75504047e

IO: fix accidentally missed it | 2017-11-17 16:29:49 | d42bdadc8520ec490d5b37f5f160b54d4541d2f8

IO: fix race in ByteBufferChannel.write(lambda) | 2017-11-17 15:39:03 | 7bf4fa9e3b19a8200450fabe396a0ff854615596

IO: fix joining of already closed but not empty channel | 2017-11-14 11:52:32 | 9e9929d376d2b92cd5fda2f21f7cc1eb51f66ca8

IO: fix lincheck dependency | 2017-11-10 20:22:53 | b94ce42827dc5f9294f19b99da356ad585fb01ea

IO: fixed awaitClose and copyDirect | 2017-11-10 09:22:23 | 373d590e103f3203f61b2fb93b3b82bcce1de13e

IO: fix race in joined flush once again | 2017-11-09 18:18:05 | 8e9138ca4a297189f49bece8e739b6584f69e061

IO: fix joined close/flush | 2017-11-08 13:50:13 | 2fdb5aa4867b60f7c659cf4d950babfd2a43a67a

IO: fixed joined channel flush | 2017-11-08 03:15:39 | 625c1fefa57f95af2b723b7c7e3b1a5319c69faf

IO: fixed joined ByteChannel close | 2017-11-08 03:11:53 | ca8762b2f6a1043103a45153357a5f9e5dc010af

IO: fix writeByte BufferOverflowException

it is important to setup buffer's positions again after suspension
it is not the case if we don't hold writing state during suspension | 2017-11-07 16:42:15 | bab9f7927ca780b242c794578c02ddf63db40375

IO: fix race in readSuspend

consider state change:
writer: IDLE(empty) -> !do write -> IDLE(buffer) -> !close -> closed = C
reader:  !suspend -> resumed -> closed = C -> [here]

here reader can see that there is closed state however to see published
written state it should read state again rather than simply use already
readen state to get happens-before guarantee | 2017-11-07 16:18:16 | 32c90b169d05bd372317f90ae5ad511bbcb05bc5

IO: rewrite if/else/return code to identical

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 11:23:34 | fde1a646fe5a60c8aa211764d63527ec429672c3

IO: eliminate tail suspend calls in when blocks

to workaround known compiler bug and get rid of redundant state machines | 2017-10-10 10:54:47 | 4eccfba8d4cbe55ce49ac7b70c40eea1d0adf7c9

No Job in newSingleThreadContext and newFixedThreadPoolContext anymore

* This resolves the common issue of using `run(ctx)` where ctx comes from
either `newSingleThreadContext` or `newFixedThreadPoolContext`
invocation. They both used to return a combination of dispatcher + job,
and this job was overriding the parent job, thus preventing propagation
of cancellation. Not anymore.
* ThreadPoolDispatcher class is now public and is the result type for
both functions. It has the `close` method to release the thread pool.

Fixes #149
Fixes #151 | 2017-10-20 09:36:56 | d9ae2bcb88403e0854b895ba46c2417b4c0a4752

run uses cancelling state & propagates exceptions when cancelled

* When coroutine that was switched into a different dispatcher using
`run` is cancelled, the run invocation does not complete immediately,
but waits until the body completes.
* If the body completes with exception, then this exception is
propagated.

Fixes #147 | 2017-10-20 08:42:06 | bcdd8e17fed40097f9bb8fdb3e218f95ff8603a9

Exception propagation logic from cancelled coroutines is adjusted

* When cancelled coroutine crashes due to some other exception, this
other exception becomes the cancellation reason of the coroutine, while
the original cancellation reason is suppressed.
* UnexpectedCoroutineException is no longer used to report those cases
as is removed.
* This fixes a race between crash of CPU-consuming coroutine and
cancellation which resulted in an unhandled exception and lead to
crashes on Android.

Fixes #152 | 2017-10-20 06:00:50 | 6aed878a67e6f707e6c3afb0879beb8822a95d6f

Fixed Reactor docs (Scheduler.asCoroutineDispatcher) | 2017-10-07 19:58:40 | 8348b8c31d5b07541bd3d268ca2a186b0fe1ad6f

Failed parent Job cancels all children jobs, then waits them

Also improved debug output a little bit | 2017-10-07 12:44:48 | a36ab94253bb9945c6377eb43db0cb1071019c40

IO: eliminate race in close

I knew that I'll hit this bug anyway. Here we MUST flush twice as
flush at read suspend is not enough. If a writer closes then the first
flush does flush and it closes so all readers will see all pending data.
If a foreign thread does close then the first flush is makes no
difference however the second is required for proper cleanup and
to do tryTerminate | 2017-10-04 18:34:18 | ad68c06c1200f2038c26adeab2abf801a2a2114b

IO: fix verifying pool usage

buffer view doesn't hold original pool reference to make
pool chaining working | 2017-09-29 15:18:00 | ccf8dde980a4701b9cd30e1df23e5cbefdd93b53

IO: fix writing byte packet | 2017-09-28 07:58:15 | 754a19b188dc6d486d73b8e3a2f0c483c3f88f9b

Documentation for DefaultDispatcher in the guide | 2017-09-29 18:39:03 | 66f018c489c6b0ec0831fa9953db34da3edff5f3

DefaultDispatcher is introduced | 2017-09-28 11:27:05 | c0d559b594fce802f1d1be9a6feef49019d17160

IO: fix ByteWritePacket.writePacket size update | 2017-09-17 19:48:26 | 5ca0d12c1e8a9672d40fe83cd31d1b2426f397e7

IO: fix writer scope type | 2017-09-11 10:06:54 | ea3a418f84f3731e92658cedfa11878a8828500c

IO: fix byte channel readX operations return -1 during close+flush

Read operation should try flush before return -1 if closed because
the close operation setting close status first then do flush
so reader could see closed status but not-yet-flushed byte counters | 2017-09-11 07:31:08 | e4d3ce750ed8b864a435fb0926d0d77e9c02b208

IO: add more byte packet tests and fix few bugs | 2017-09-06 18:50:51 | 5feaf6973c23fae3c5a8df64748e2181c50dd0d6

IO: fix delimiter lookahead | 2017-09-06 15:52:04 | 1cc86083e7be17ce53f7c80cfa6ba67e8569e33e

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 99cdb380bf6391db7e7d08e8673c627c554074d8

ProGuard config

Fixes https://github.com/Kotlin/kotlinx.coroutines/issues/103,
suggested by ProGuard team here: https://sourceforge.net/p/proguard/bugs/660/ | 2017-08-31 08:04:20 | 776b370d58883e9bce0c309ebb4919ef4cdac13c

IO: fix byte packet write buffer leak | 2017-08-25 08:39:00 | 974cbb3b21b8d7613c41ee2221ce435e347b068f

IO: fix byte channel close with error buffer leak | 2017-08-25 08:06:59 | 24b040f1345db27b45589a975daab45bf9325494

IO: fix CR-only line endings processing + tests | 2017-08-23 11:39:41 | a9a936d1a325ee0baf36df444414e1e17ac539da

IO: rename writeStringUtf8, fix implementation + tests | 2017-08-23 09:26:18 | fbcba264a37580b5c47f3314395e5146afb38287

IO: fix copyAndClose + tests | 2017-08-23 09:11:55 | fc84a634ff9a1acca04e09fa5a031b904c5c8838

IO: byte packet readLine support + bugfixes | 2017-07-26 09:59:16 | 0b12ffc0178844e813223039adf5d7510703485d

Fixed bug in LockFreeLinkedList (invariant & lock-freedom violation)
Migrated atomic ops to AtomicFU library for ease of code maintenance
Implement lock-freedom testing in LockFreeLinkedListAtomicStressLFTest | 2017-08-10 18:09:26 | 7eb41efbacd498704f25465e2a58f4892c16aa32

Typo fixed | 2017-07-24 13:42:34 | a448903dcac25e450d87c49705e7a6693a300d29

Use CompletableDeferred in the guide section on coroutines;
fix (reknit) broken links to factory functions that are now top-level | 2017-07-21 22:00:30 | 256812a1c09511744575ed3d2c64fec27979f391

More documentation on CompletableDeferred states and style fixes | 2017-07-21 15:04:23 | 8e2ae9964614e35295a8d695114b00c35f5fc755

Better debug strings for continuations | 2017-07-12 12:22:21 | 69d9c852289f1a4a9ffe107dc75cc71871cfe34e

ObservableBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 10:16:30 | ed6985459318209be084ff807676cb722387fb6f

PublisherBackpressureTest fixed to account for immediate onComplete
when publisher coroutine is cancelled | 2017-07-12 09:58:44 | 58246ca7e7727632ba50c41d0314df47ba9e3fc0

Fixed IllegalStateException in select that concurrently selects, which
was due a problem with Job concurrent cancel and dispose of handle.
The bug was introduced by addition of Cancelling state for a Job.

Original stack trace in select was:
java.lang.IllegalStateException: Check failed.
	at kotlinx.coroutines.experimental.internal.LockFreeLinkedListNode.remove(LockFreeLinkedList.kt:236)
	at kotlinx.coroutines.experimental.JobSupport.removeNode$kotlinx_coroutines_core(Job.kt:734)
	at kotlinx.coroutines.experimental.JobNode.dispose(Job.kt:995)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.initCancellability(Select.kt:294)
	at kotlinx.coroutines.experimental.selects.SelectBuilderImpl.getResult(Select.kt:273) | 2017-07-11 09:50:00 | e9f64491787433b3d53ad5800456524820058d5f

typo fixed | 2017-07-10 10:46:13 | d28cc872fb7815b51ceb7c84a4e77117fce380c7

typo fixed | 2017-07-10 10:44:07 | 8b0b07ab81f12bc605462a6a1333b61abce547cb

typo fixed | 2017-07-10 10:43:20 | 93f7e8e22019643caaf14ae480c05ab0a349064d

Bug fixed on waitTimeoutOrNull (was flaky testOuterTimeoutTest) | 2017-07-10 10:38:54 | 769d48217f8787c7f64c07da6e53c27b2d703274

Refactor DispatchTask to reuse it for dispatchYield | 2017-07-10 10:16:20 | 2a93646a8054ce7819e9bdbff8d28849a19e874b

Fix SecurityException when trying to read "kotlinx.coroutines.debug" prop | 2017-07-10 07:15:40 | e824eaaab9d053ff0f2cc028c7413bb83adcacc0

A fix & optimization for select impl helping scheme | 2017-07-05 06:53:29 | 907074f1f63871ed29feab3173a2e38b30d8fbb6

Reactive tests fixed for cancellation logic change | 2017-06-26 11:25:56 | 7a7b00938934ef7d0855eb24ec93a06d0b0c97e7

Fix typo: debugging more -> debugging mode | 2017-06-24 21:03:35 | ed5ed49913498b4e880415d2f0fb9004e20e1b5a

Typo fixed | 2017-06-23 10:27:02 | 6c18dfd15f6e1703db57531422bc0df3cb7d08ff

fix typo.

somethine -> something | 2017-06-18 07:37:59 | 81a6f23ca68d7ed37f36dcb966fe74e3bc53de57

Typo fixed | 2017-06-09 17:25:03 | c3c2f3269220f5d7ae20e7592ca1253061b50a95

CoroutineExceptionHandlerTest fixed | 2017-06-09 15:59:25 | 866521b83ed0676d0203dec35de5fb797bc9a59d

SimpleSendReceiveTest is fixed to account for close conflation | 2017-06-06 11:36:38 | 9ff32644381bf1a692d9a935170a9f7b7023f244

Fixed lock-freedom of send/offer on closed channels and related bugs.
Conflated[Broadcast]Channel hang of concurrent offer/close is fixed. | 2017-06-05 14:04:39 | e6e8ce8d46cee273e00ee130334239880734dc2f

Integration readme title fixed | 2017-05-17 11:59:49 | 0c2e25d7c38f50bd3c9866ea1fc2c12d5d74251a

launched jobs and await can be cancelled while waiting in dispatch queue

* suspendAtomicCancellableCoroutine function is introduced for funs like
  send/receive/receiveOrNull that require atomic cancellation
  (they cannot be cancelled after decision was made)
* Coroutines started with default mode (CoroutineStart.ATOMIC) using
  async/launch/actor builders can be cancelled before execution starts.
* CoroutineStart.ATOMIC is introduced as a start mode to specify that
  coroutine cannot be cancelled before its execution start. | 2017-05-11 17:15:18 | a74eb5f8b08e84f904e75aa71da4547c9178da8d

Fix withTimeout/OrNull bug with spurious concurrency on cancellation | 2017-04-20 16:23:18 | ca9d5be31a30c5f6a20875438f9ae40db4183f4c

Refactored ThreadPoolDispatcher to reuse code of ExecutorCoroutineDispatcher | 2017-04-18 12:28:35 | f04f51d5b05a0aec7c97acc202d180096a095fbf

equals/hashCode for wrapper CoroutineDispatcher impls | 2017-04-11 10:50:03 | 30dd5c129c493ca7b1a3b2b80437e8a7ec68f3ec

Starting coroutine in UI event handlers without dispatch in UI guide | 2017-04-07 15:06:22 | f724f6e2fe7c20cb48b69cd7b19b2658313231e4

Nicer toString implementations for CommonPool & Unconfined dispatchers | 2017-04-07 07:35:28 | dc9fd1c2d18da2f23d9907148b4674cda6418e49

Few minor docs & build fixes for reactor support | 2017-04-06 19:15:35 | 523516abd2023f8d968d389b32dee713130a9f83

Merge pull request #53 from mkobit/patch-1

Correct typo in coroutines-guide-reactive.md | 2017-04-05 09:41:56 | 7676e2239947273c6cbb4cb77536042bd9f2ce43

Fix repository urls

need to be reverted once bintray will fix jcenter sync issue | 2017-03-23 14:45:39 | 78fd3cb8932410af9beab4effc04bdeea4343732

Merge pull request #42 from jakiejj/master

fix typos in comments to Nio functions | 2017-03-20 07:16:24 | 9ef792fec6775bb5cdb08c84511488f324db3322

fix typos in comments | 2017-03-17 20:48:39 | 4d927c76488b96abaae7ba003f8064ad84b8334e

Typo fixed | 2017-03-14 17:39:50 | 81a5b7144484dcc8ebc89cd98fd9bd8a2d45afbe

startUndispatchedCoroutine is renamed to startCoroutineUndispatched for consistency with coroutine intrinsics | 2017-03-14 16:39:26 | 4638d79097a3d5b0c1b32c1e468ad723cc4b2bd9

Fixed bug with sometimes missing `onComplete` in `publish`, `rxObservable`, and `rxFlowable` builders | 2017-03-13 09:03:35 | d14a3901f365f622d9a7ba96fc00900011c9c009

Scheduler.asCoroutineDispatcher extension for Rx 2.x | 2017-03-10 12:06:01 | a1fe3da17907024afa50a35cbfcc72639d62bf78

not -> no typo fixed | 2017-03-09 09:57:57 | 228d084bfb87f967e216b84029b58649fcbe7472

Executor.toCoroutineDispatcher is renamed to asCoroutineDispatcher | 2017-03-09 09:03:39 | 38b5ea18e36f1a53d4cde27bf3fd21522727cbbb

Fixed dispatching logic of `withTimeout` (removed extra dispatch) | 2017-03-02 21:15:21 | 43d831f61f33262dcb4621069451d1699898d1cb

More links and typos fixed | 2017-03-01 14:21:48 | cc63363ead9d82f4e246a319ca3e0cb9f15e3a14

top-level readme links fixed to produce & co | 2017-02-22 12:04:28 | 40e89f689f89ae643f68c68efc57aebd8f8284ed

Jon.onJoin select clause is implemented, lazy onAwait/onJoin & dispatch fixed | 2017-02-22 11:56:58 | d84dbc2d75927fe8446098a225a3fbb884683bde

startUndispatchedCoroutine utility functions | 2017-02-22 06:53:49 | ee88fbef2d78e4b25f741efffabf4756bff8e7f3

buildChannel deprecation template fixed | 2017-02-20 12:53:30 | de8b9e9b336491ff0dbf107fe35d9efa030d92d3

Merge pull request #31 from gildor/on-completion-deprecation-fix

Job.onCompletion deprecation template fixed | 2017-02-20 12:49:41 | 85923e2de75ed522903cc3d64aef2ad178c1cbf8

Job.onCompletion deprecation template fixed | 2017-02-19 13:26:29 | c8f9ca308abe963cafa5f676410402fc287cfa5a

Delay implementation in Swing, JavaFx, and scheduled executors is fixed to avoid an extra dispatch
CancellableContinuation.resumeUndispatched is introduced to make this efficient implementation possible
Additional documentation for CoroutineDispatcher implementors | 2017-02-10 10:30:38 | a198bad7365a508baf1041993e9a14007f9d5aa3

Doc fixed | 2017-02-10 10:14:35 | 8c8551e7dbea7c2467060c2d3c6aa1c54c721e68

Merge pull request #29 from cbeust/patch-1

Update coroutines-guide.md | 2017-02-07 17:52:01 | 4d821e3901d038f005850b38d1e4954506306383

Merge pull request #28 from erokhins/patch-1

Update 1.1.0-beta-37 to 1.1.0-beta-38 | 2017-02-02 19:24:36 | 40f69cf704e7b31cec9c8a935317d8c173e79623

Added deprecated (with error level) plus operators on Job and CoroutineDispatcher to catch potential problem with their incorrect use at compile time | 2017-02-01 15:43:32 | 79a2868295127b81056f66d644da72db5a40d772

Merge pull request #27 from tairrzayev/readme-fix

Fixes the typo in the coroutines-guide.md | 2017-02-02 06:15:26 | 9d844fa1733f83e5e1b85c3e762a69729d3c5ef2

Dispatchers default behaviour is changed to schedule new coroutine for execution later.
Job.getInactiveCancellationException is introduced.
yield is cancellable while it is waiting to executed.
core tutorial is expanded. | 2017-01-29 18:58:33 | 7cf452eab59cdca570227f071cba2da374f77110

Finer grained control on debugging facilities | 2017-01-24 07:29:53 | aecb9aa1606b79243c8e93221de9713c164ce015

Added context parameter to CoroutineDispatcher methods, implemented Executor.toCoroutineDispatcher | 2017-01-23 13:47:20 | 67891d867da022d608d4589859002f256d9a313e

Fixed initialization of Job with parent (initParentJob), fixed handling on uncaught exceptions in standalone coroutines | 2017-01-20 09:19:52 | 58a7add417403811e822a4f6f7689ae3fd0e2018

Minor: fix version of maven-deploy-plugin, fix pom warnings | 2016-12-21 17:21:30 | c4ad15fc6246b7496d610da7419441020dfe1c56

