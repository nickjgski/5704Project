Enable Gradle metadata publishing (#604)

* Enable Gradle metadata publishing

* Update Node plugin

* Add workaround for Node plugin bug

* Correct version of the workaround | 2019-05-01 15:33:28 | a54054aaaa264a7bcf190f625bbe0b98e0312ace

Merge pull request #603 from square/egorand/190430/fix-snapshot-publishing

Fix snapshot publishing command | 2019-04-30 17:03:19 | bdb1e33d249e578a5752dde3be1a6fa0ad389bc3

Merge pull request #602 from jaredsburrows/patch-1

Update README.md - fix broken proguard link | 2019-04-30 12:57:24 | cb440ffb53a2a4527675f738789aa75b298a1321

Update README.md - fix broken proguard link | 2019-04-30 04:10:46 | 90295b16aabea3ea560ac71fbeaef7bc86eba551

Peek the minimum number of bytes to return a result

The contract for read() is to return at least 1 byte, but we were
attempting to read the full request. That caused us to prematurely
do a blocking read on the upstream source.

This fixes that code to defer the blocking read.

Closes: https://github.com/square/okio/issues/594 | 2019-04-28 21:50:51 | 86e479564373d6872941bfc031c7169d9cb91417

Update japicmp plugin

This bumps japicmp to 0.13.1 which still doesn't contain the effectively-final fix, but at least provides compatibility with newer japicmp versions so that we can upgrade once that change is released. | 2019-04-05 13:57:48 | 031ea7a5118b8077904a6cdc12e273dab4e50b13

Kotlin Gradle MPP 1.3 (#544)

* Basic setup

* Ignore failing test

* Gradle 5.0

* Better native config

* Fix jvm tests

* JS testing setup

* Native config

* Use EAP dependencies

* Japicmp setup

* Correct path to japicmp report

* Basic JVM + AnimalSniffer setup

* Enable samples module

* Use jvmWithJava for running Java tests

* Include more Native platforms to force test task generation

* Use internal UTF-8 decoder for Kotlin/Native

* Kotlin 1.3.20

* Gradle 5.1

* Move JMH setup into a separate module

* Properly configure jmhJar task

* Remove old jvm build.gradle

* Replace publishing plugin with SQLDelight's custom script

* Use default artifactId for JVM target

* Revert JVM build.gradle rename, use new DSL for defining targets

* Remove old module definitions in settings

* Feedback fixes | 2019-01-30 12:50:19 | 0078fca7b325a8d9454715ada316e0a3d6e99115

Merge pull request #542 from NightlyNexus/patch-1

Fix some indices in Buffer.UnsafeCursor docs. | 2019-01-16 03:02:01 | 7dd5bde7b0eb160ecdcb2a32477b8e9f313a0b8b

Merge pull request #504 from square/egorand/0830/ktlint-fixes

Fix ktlint issues in platform modules | 2018-09-01 03:43:34 | ea0dd569ef0cbe3cc6288264c36bc6fde02074af

Hide Base64, ByteStringKt, Platform, and Util code from Java

These are 'internal' in Kotlin but 'public' to Java callers. Changing
class names to prefix with '-' prevents Java from calling through. | 2018-08-26 13:45:15 | b518b5b2cf40147105a30bd37cf91c810ff59450

Make Buffer exceptions consistent with RealBufferedSource

This is inspired by ksperling's work on improving exception-consistency
between Buffer and RealBufferedSource. I wasn't willing to make an
exception-signature change for a 1.x release, but the 2.x release is a
good opportunity to fix this longstanding problem. | 2018-07-24 20:55:10 | 487a1f2392d8a9f017dceaca15656a82ab4ed46d

Retain interrupted state when throwing InterruptedIOException (Okio 2.x)

This fixes Okio 2.x. A separate fix is required for Okio 1.x. | 2018-07-06 02:35:23 | 264829dae36198c2e5454a6c2ae1d4aa208c5815

Merge pull request #463 from GianfrancoMS/patch-1

Update README.md | 2018-06-04 20:06:26 | fffc9d42244254899bb934ca400c8a88a65ea224

Merge pull request #462 from hendrawd/patch-1

Update README.md | 2018-05-29 17:14:54 | 105c2411448a726fe2d2a90c2e13d7e30ff79f43

Merge pull request #449 from yinyinnie/patch-1

Update README.md | 2018-05-13 15:11:04 | 4b567e1f0dfeeb6c506f5b2497444d8de8ecbc47

Merge pull request #424 from square/jwilson.0430.no_performance_bug

Add a test for the off-by-one bug in Buffer.seek(). | 2018-05-02 13:03:23 | bf4ae6cc0b967204ebdc629b62773fa8202962fc

Add a test for the off-by-one bug in Buffer.seek().

There was a performance bug here, where it would return one segment too early. | 2018-05-01 03:53:32 | c2b251cc189f128071d6357e30ccba6a091adadf

Merge pull request #312 from square/jwilson.0522.actually_split

Fix a performance bug in AsyncTimeout.sink().write(). | 2017-05-22 14:42:26 | 20e259c08af6c96508387540a5ea53f89b1d01f5

Fix a performance bug in AsyncTimeout.sink().write().

Previously the behavior was correct but the intended behavior was less
efficient than intended. In particular there were two problems:

 * The loop to find a segment boundary may have made more iterations
   than necessary if the first segment was very small
 * The sink write may not have been on a segment boundary, causing more
   data than necessary to be copied.

Closes: https://github.com/square/okio/issues/311 | 2017-05-22 12:14:32 | 80f3aa2e7bb9ac9691e62ec619e6b53259d78958

Import jsr305 and use it to mark @Nullable stuff.

The result is that IntelliJ + Kotlin correctly infers the right nullability
for Okio's APIs. I used IntelliJ's "Specify types explicitly" quick fix on
the 'a' and 'b' variables below and it did the right thing.

    fun specifyTypeExplicitly(source: BufferedSource) {
      val a: String? = source.readUtf8Line()
      val b: String = source.readUtf8LineStrict()
    } | 2017-05-02 02:39:52 | 2320c7f6ad9d05c1b65fb1e8cc43e257965792b4

Merge pull request #274 from larsgrefer/patch-1

endsWith -> suffix | 2016-12-07 22:57:38 | d412a4a2f9034a9bc59a8637e477822bd54d4504

endsWith -> suffix | 2016-12-07 22:54:57 | 032ad9948d5df69ee49367c90ad30f8823fc200b

Merge pull request #259 from square/jwilson.0829.substring

Fix a major bug where writeString() didn't always respect offsets. | 2016-08-29 12:54:40 | 927902b565479277178bdb7b0c986ce8beca07a3

Fix a major bug where writeString() didn't always respect offsets.

Closes: https://github.com/square/okio/issues/258 | 2016-08-29 12:16:03 | 8f5ae7376486990db25696304367f8e8b16f5534

Merge pull request #253 from square/jwilson.0814.fix_gzip_sink

Fix GzipSink for symmetry. | 2016-08-14 16:17:04 | 838a215b2bdbd77550ee876bc8870a61ad7219df

Merge pull request #252 from square/jwilson.0813.gzip_fix

Fix GzipSource to handle large files on AOSP. | 2016-08-14 04:32:14 | 4934879155da13b82be1775ac9840dbbd6b5c0cf

Merge pull request #247 from cketti/base64_encode_buffer_size_fix

Don't overallocate when base64-encoding. | 2016-08-07 00:11:57 | 834a35c2c8ff533f9e6d476714e7410c53cfd971

Import org.junit.Assert.fail instead of junit.framework.TestCase.fail

Use the JUnit 4 version in the couple of places were JUnit 3 imports
still existed; this makes the imports more consistent and also fixes
compilation if the JUnit 3 version is not available. | 2016-07-28 12:32:38 | 2f6e7783503aeb68d58fd7d50c47b7985d80203d

Merge pull request #227 from square/jwilson.0618.hashfail

Fix a major bug where HashingSource is incorrect for large writes. | 2016-06-19 01:58:13 | 2244048477890e33893613affc8f1fc82230c178

Fix a major bug where HashingSource is incorrect for large writes.

There was a bug where it wasn't traversing through the segments of
the buffer being hashed. This means that HashingSource was returning
incorrect answers for any writes that spanned multiple segment
boundaries.

The problem wasn't detected by our test cases because although
we have tests for non-uniform segments, and for buffers that
span multiple segments, we don't have tests for non-uniform
buffers that span multiple segments. This has been fixed too. | 2016-06-18 22:04:20 | 657278fff2ebb521659a330d0f7fc2b66d99cfbd

Merge pull request #210 from aried3r/patch-1

Fix typo in changelog | 2016-04-11 16:45:29 | 2c92d8261bc932473f4580bc62f22818a76acb47

Merge pull request #209 from chrisdoc/master

fix wrong changelog date for Version 1.7.0 | 2016-04-11 05:19:36 | 33cb196bb5182ebcad50303660f9e44635071696

fix wrong date for Version 1.7.0 | 2016-04-11 05:15:07 | 52dd9f5665f840dd4b6b4be93ac09f6c8252a791

Merge pull request #695 from square/jwilson.0128.bugcrowd

Migrate bug bounty URL to bugcrowd | 2020-01-28 20:31:51 | 33db3f1414089a8ab693a54f5f10d96ce00d9cf1

Migrate bug bounty URL to bugcrowd | 2020-01-28 18:26:31 | e0609669b213ae90171aa68a5d6a5e3b49f3aac9

Merge pull request #655 from emanonwzy/fix_readme

Fix socks url in README | 2019-09-10 10:59:15 | 273357a2b70d815e30a8a4bde520f6bb8204e1cc

Enable Gradle metadata publishing (#604)

* Enable Gradle metadata publishing

* Update Node plugin

* Add workaround for Node plugin bug

* Correct version of the workaround | 2019-05-01 15:33:28 | a54054aaaa264a7bcf190f625bbe0b98e0312ace

Merge pull request #603 from square/egorand/190430/fix-snapshot-publishing

Fix snapshot publishing command | 2019-04-30 17:03:19 | bdb1e33d249e578a5752dde3be1a6fa0ad389bc3

Merge pull request #602 from jaredsburrows/patch-1

Update README.md - fix broken proguard link | 2019-04-30 12:57:24 | cb440ffb53a2a4527675f738789aa75b298a1321

Update README.md - fix broken proguard link | 2019-04-30 04:10:46 | 90295b16aabea3ea560ac71fbeaef7bc86eba551

Peek the minimum number of bytes to return a result

The contract for read() is to return at least 1 byte, but we were
attempting to read the full request. That caused us to prematurely
do a blocking read on the upstream source.

This fixes that code to defer the blocking read.

Closes: https://github.com/square/okio/issues/594 | 2019-04-28 21:50:51 | 86e479564373d6872941bfc031c7169d9cb91417

Update japicmp plugin

This bumps japicmp to 0.13.1 which still doesn't contain the effectively-final fix, but at least provides compatibility with newer japicmp versions so that we can upgrade once that change is released. | 2019-04-05 13:57:48 | 031ea7a5118b8077904a6cdc12e273dab4e50b13

Kotlin Gradle MPP 1.3 (#544)

* Basic setup

* Ignore failing test

* Gradle 5.0

* Better native config

* Fix jvm tests

* JS testing setup

* Native config

* Use EAP dependencies

* Japicmp setup

* Correct path to japicmp report

* Basic JVM + AnimalSniffer setup

* Enable samples module

* Use jvmWithJava for running Java tests

* Include more Native platforms to force test task generation

* Use internal UTF-8 decoder for Kotlin/Native

* Kotlin 1.3.20

* Gradle 5.1

* Move JMH setup into a separate module

* Properly configure jmhJar task

* Remove old jvm build.gradle

* Replace publishing plugin with SQLDelight's custom script

* Use default artifactId for JVM target

* Revert JVM build.gradle rename, use new DSL for defining targets

* Remove old module definitions in settings

* Feedback fixes | 2019-01-30 12:50:19 | 0078fca7b325a8d9454715ada316e0a3d6e99115

Merge pull request #542 from NightlyNexus/patch-1

Fix some indices in Buffer.UnsafeCursor docs. | 2019-01-16 03:02:01 | 7dd5bde7b0eb160ecdcb2a32477b8e9f313a0b8b

Merge pull request #504 from square/egorand/0830/ktlint-fixes

Fix ktlint issues in platform modules | 2018-09-01 03:43:34 | ea0dd569ef0cbe3cc6288264c36bc6fde02074af

Hide Base64, ByteStringKt, Platform, and Util code from Java

These are 'internal' in Kotlin but 'public' to Java callers. Changing
class names to prefix with '-' prevents Java from calling through. | 2018-08-26 13:45:15 | b518b5b2cf40147105a30bd37cf91c810ff59450

Make Buffer exceptions consistent with RealBufferedSource

This is inspired by ksperling's work on improving exception-consistency
between Buffer and RealBufferedSource. I wasn't willing to make an
exception-signature change for a 1.x release, but the 2.x release is a
good opportunity to fix this longstanding problem. | 2018-07-24 20:55:10 | 487a1f2392d8a9f017dceaca15656a82ab4ed46d

Retain interrupted state when throwing InterruptedIOException (Okio 2.x)

This fixes Okio 2.x. A separate fix is required for Okio 1.x. | 2018-07-06 02:35:23 | 264829dae36198c2e5454a6c2ae1d4aa208c5815

Merge pull request #463 from GianfrancoMS/patch-1

Update README.md | 2018-06-04 20:06:26 | fffc9d42244254899bb934ca400c8a88a65ea224

Merge pull request #462 from hendrawd/patch-1

Update README.md | 2018-05-29 17:14:54 | 105c2411448a726fe2d2a90c2e13d7e30ff79f43

Merge pull request #449 from yinyinnie/patch-1

Update README.md | 2018-05-13 15:11:04 | 4b567e1f0dfeeb6c506f5b2497444d8de8ecbc47

Merge pull request #424 from square/jwilson.0430.no_performance_bug

Add a test for the off-by-one bug in Buffer.seek(). | 2018-05-02 13:03:23 | bf4ae6cc0b967204ebdc629b62773fa8202962fc

Add a test for the off-by-one bug in Buffer.seek().

There was a performance bug here, where it would return one segment too early. | 2018-05-01 03:53:32 | c2b251cc189f128071d6357e30ccba6a091adadf

Merge pull request #312 from square/jwilson.0522.actually_split

Fix a performance bug in AsyncTimeout.sink().write(). | 2017-05-22 14:42:26 | 20e259c08af6c96508387540a5ea53f89b1d01f5

Fix a performance bug in AsyncTimeout.sink().write().

Previously the behavior was correct but the intended behavior was less
efficient than intended. In particular there were two problems:

 * The loop to find a segment boundary may have made more iterations
   than necessary if the first segment was very small
 * The sink write may not have been on a segment boundary, causing more
   data than necessary to be copied.

Closes: https://github.com/square/okio/issues/311 | 2017-05-22 12:14:32 | 80f3aa2e7bb9ac9691e62ec619e6b53259d78958

Import jsr305 and use it to mark @Nullable stuff.

The result is that IntelliJ + Kotlin correctly infers the right nullability
for Okio's APIs. I used IntelliJ's "Specify types explicitly" quick fix on
the 'a' and 'b' variables below and it did the right thing.

    fun specifyTypeExplicitly(source: BufferedSource) {
      val a: String? = source.readUtf8Line()
      val b: String = source.readUtf8LineStrict()
    } | 2017-05-02 02:39:52 | 2320c7f6ad9d05c1b65fb1e8cc43e257965792b4

Merge pull request #274 from larsgrefer/patch-1

endsWith -> suffix | 2016-12-07 22:57:38 | d412a4a2f9034a9bc59a8637e477822bd54d4504

endsWith -> suffix | 2016-12-07 22:54:57 | 032ad9948d5df69ee49367c90ad30f8823fc200b

Merge pull request #259 from square/jwilson.0829.substring

Fix a major bug where writeString() didn't always respect offsets. | 2016-08-29 12:54:40 | 927902b565479277178bdb7b0c986ce8beca07a3

Fix a major bug where writeString() didn't always respect offsets.

Closes: https://github.com/square/okio/issues/258 | 2016-08-29 12:16:03 | 8f5ae7376486990db25696304367f8e8b16f5534

Merge pull request #253 from square/jwilson.0814.fix_gzip_sink

Fix GzipSink for symmetry. | 2016-08-14 16:17:04 | 838a215b2bdbd77550ee876bc8870a61ad7219df

Merge pull request #252 from square/jwilson.0813.gzip_fix

Fix GzipSource to handle large files on AOSP. | 2016-08-14 04:32:14 | 4934879155da13b82be1775ac9840dbbd6b5c0cf

Merge pull request #247 from cketti/base64_encode_buffer_size_fix

Don't overallocate when base64-encoding. | 2016-08-07 00:11:57 | 834a35c2c8ff533f9e6d476714e7410c53cfd971

Import org.junit.Assert.fail instead of junit.framework.TestCase.fail

Use the JUnit 4 version in the couple of places were JUnit 3 imports
still existed; this makes the imports more consistent and also fixes
compilation if the JUnit 3 version is not available. | 2016-07-28 12:32:38 | 2f6e7783503aeb68d58fd7d50c47b7985d80203d

Merge pull request #227 from square/jwilson.0618.hashfail

Fix a major bug where HashingSource is incorrect for large writes. | 2016-06-19 01:58:13 | 2244048477890e33893613affc8f1fc82230c178

Fix a major bug where HashingSource is incorrect for large writes.

There was a bug where it wasn't traversing through the segments of
the buffer being hashed. This means that HashingSource was returning
incorrect answers for any writes that spanned multiple segment
boundaries.

The problem wasn't detected by our test cases because although
we have tests for non-uniform segments, and for buffers that
span multiple segments, we don't have tests for non-uniform
buffers that span multiple segments. This has been fixed too. | 2016-06-18 22:04:20 | 657278fff2ebb521659a330d0f7fc2b66d99cfbd

Merge pull request #210 from aried3r/patch-1

Fix typo in changelog | 2016-04-11 16:45:29 | 2c92d8261bc932473f4580bc62f22818a76acb47

Merge pull request #209 from chrisdoc/master

fix wrong changelog date for Version 1.7.0 | 2016-04-11 05:19:36 | 33cb196bb5182ebcad50303660f9e44635071696

fix wrong date for Version 1.7.0 | 2016-04-11 05:15:07 | 52dd9f5665f840dd4b6b4be93ac09f6c8252a791

Merge pull request #695 from square/jwilson.0128.bugcrowd

Migrate bug bounty URL to bugcrowd | 2020-01-28 20:31:51 | 33db3f1414089a8ab693a54f5f10d96ce00d9cf1

Migrate bug bounty URL to bugcrowd | 2020-01-28 18:26:31 | e0609669b213ae90171aa68a5d6a5e3b49f3aac9

Merge pull request #655 from emanonwzy/fix_readme

Fix socks url in README | 2019-09-10 10:59:15 | 273357a2b70d815e30a8a4bde520f6bb8204e1cc

Enable Gradle metadata publishing (#604)

* Enable Gradle metadata publishing

* Update Node plugin

* Add workaround for Node plugin bug

* Correct version of the workaround | 2019-05-01 15:33:28 | a54054aaaa264a7bcf190f625bbe0b98e0312ace

Merge pull request #603 from square/egorand/190430/fix-snapshot-publishing

Fix snapshot publishing command | 2019-04-30 17:03:19 | bdb1e33d249e578a5752dde3be1a6fa0ad389bc3

Merge pull request #602 from jaredsburrows/patch-1

Update README.md - fix broken proguard link | 2019-04-30 12:57:24 | cb440ffb53a2a4527675f738789aa75b298a1321

Update README.md - fix broken proguard link | 2019-04-30 04:10:46 | 90295b16aabea3ea560ac71fbeaef7bc86eba551

Peek the minimum number of bytes to return a result

The contract for read() is to return at least 1 byte, but we were
attempting to read the full request. That caused us to prematurely
do a blocking read on the upstream source.

This fixes that code to defer the blocking read.

Closes: https://github.com/square/okio/issues/594 | 2019-04-28 21:50:51 | 86e479564373d6872941bfc031c7169d9cb91417

Update japicmp plugin

This bumps japicmp to 0.13.1 which still doesn't contain the effectively-final fix, but at least provides compatibility with newer japicmp versions so that we can upgrade once that change is released. | 2019-04-05 13:57:48 | 031ea7a5118b8077904a6cdc12e273dab4e50b13

Kotlin Gradle MPP 1.3 (#544)

* Basic setup

* Ignore failing test

* Gradle 5.0

* Better native config

* Fix jvm tests

* JS testing setup

* Native config

* Use EAP dependencies

* Japicmp setup

* Correct path to japicmp report

* Basic JVM + AnimalSniffer setup

* Enable samples module

* Use jvmWithJava for running Java tests

* Include more Native platforms to force test task generation

* Use internal UTF-8 decoder for Kotlin/Native

* Kotlin 1.3.20

* Gradle 5.1

* Move JMH setup into a separate module

* Properly configure jmhJar task

* Remove old jvm build.gradle

* Replace publishing plugin with SQLDelight's custom script

* Use default artifactId for JVM target

* Revert JVM build.gradle rename, use new DSL for defining targets

* Remove old module definitions in settings

* Feedback fixes | 2019-01-30 12:50:19 | 0078fca7b325a8d9454715ada316e0a3d6e99115

Merge pull request #542 from NightlyNexus/patch-1

Fix some indices in Buffer.UnsafeCursor docs. | 2019-01-16 03:02:01 | 7dd5bde7b0eb160ecdcb2a32477b8e9f313a0b8b

Merge pull request #504 from square/egorand/0830/ktlint-fixes

Fix ktlint issues in platform modules | 2018-09-01 03:43:34 | ea0dd569ef0cbe3cc6288264c36bc6fde02074af

Hide Base64, ByteStringKt, Platform, and Util code from Java

These are 'internal' in Kotlin but 'public' to Java callers. Changing
class names to prefix with '-' prevents Java from calling through. | 2018-08-26 13:45:15 | b518b5b2cf40147105a30bd37cf91c810ff59450

Make Buffer exceptions consistent with RealBufferedSource

This is inspired by ksperling's work on improving exception-consistency
between Buffer and RealBufferedSource. I wasn't willing to make an
exception-signature change for a 1.x release, but the 2.x release is a
good opportunity to fix this longstanding problem. | 2018-07-24 20:55:10 | 487a1f2392d8a9f017dceaca15656a82ab4ed46d

Retain interrupted state when throwing InterruptedIOException (Okio 2.x)

This fixes Okio 2.x. A separate fix is required for Okio 1.x. | 2018-07-06 02:35:23 | 264829dae36198c2e5454a6c2ae1d4aa208c5815

Merge pull request #463 from GianfrancoMS/patch-1

Update README.md | 2018-06-04 20:06:26 | fffc9d42244254899bb934ca400c8a88a65ea224

Merge pull request #462 from hendrawd/patch-1

Update README.md | 2018-05-29 17:14:54 | 105c2411448a726fe2d2a90c2e13d7e30ff79f43

Merge pull request #449 from yinyinnie/patch-1

Update README.md | 2018-05-13 15:11:04 | 4b567e1f0dfeeb6c506f5b2497444d8de8ecbc47

Merge pull request #424 from square/jwilson.0430.no_performance_bug

Add a test for the off-by-one bug in Buffer.seek(). | 2018-05-02 13:03:23 | bf4ae6cc0b967204ebdc629b62773fa8202962fc

Add a test for the off-by-one bug in Buffer.seek().

There was a performance bug here, where it would return one segment too early. | 2018-05-01 03:53:32 | c2b251cc189f128071d6357e30ccba6a091adadf

Merge pull request #312 from square/jwilson.0522.actually_split

Fix a performance bug in AsyncTimeout.sink().write(). | 2017-05-22 14:42:26 | 20e259c08af6c96508387540a5ea53f89b1d01f5

Fix a performance bug in AsyncTimeout.sink().write().

Previously the behavior was correct but the intended behavior was less
efficient than intended. In particular there were two problems:

 * The loop to find a segment boundary may have made more iterations
   than necessary if the first segment was very small
 * The sink write may not have been on a segment boundary, causing more
   data than necessary to be copied.

Closes: https://github.com/square/okio/issues/311 | 2017-05-22 12:14:32 | 80f3aa2e7bb9ac9691e62ec619e6b53259d78958

Import jsr305 and use it to mark @Nullable stuff.

The result is that IntelliJ + Kotlin correctly infers the right nullability
for Okio's APIs. I used IntelliJ's "Specify types explicitly" quick fix on
the 'a' and 'b' variables below and it did the right thing.

    fun specifyTypeExplicitly(source: BufferedSource) {
      val a: String? = source.readUtf8Line()
      val b: String = source.readUtf8LineStrict()
    } | 2017-05-02 02:39:52 | 2320c7f6ad9d05c1b65fb1e8cc43e257965792b4

Merge pull request #274 from larsgrefer/patch-1

endsWith -> suffix | 2016-12-07 22:57:38 | d412a4a2f9034a9bc59a8637e477822bd54d4504

endsWith -> suffix | 2016-12-07 22:54:57 | 032ad9948d5df69ee49367c90ad30f8823fc200b

Merge pull request #259 from square/jwilson.0829.substring

Fix a major bug where writeString() didn't always respect offsets. | 2016-08-29 12:54:40 | 927902b565479277178bdb7b0c986ce8beca07a3

Fix a major bug where writeString() didn't always respect offsets.

Closes: https://github.com/square/okio/issues/258 | 2016-08-29 12:16:03 | 8f5ae7376486990db25696304367f8e8b16f5534

Merge pull request #253 from square/jwilson.0814.fix_gzip_sink

Fix GzipSink for symmetry. | 2016-08-14 16:17:04 | 838a215b2bdbd77550ee876bc8870a61ad7219df

Merge pull request #252 from square/jwilson.0813.gzip_fix

Fix GzipSource to handle large files on AOSP. | 2016-08-14 04:32:14 | 4934879155da13b82be1775ac9840dbbd6b5c0cf

Merge pull request #247 from cketti/base64_encode_buffer_size_fix

Don't overallocate when base64-encoding. | 2016-08-07 00:11:57 | 834a35c2c8ff533f9e6d476714e7410c53cfd971

Import org.junit.Assert.fail instead of junit.framework.TestCase.fail

Use the JUnit 4 version in the couple of places were JUnit 3 imports
still existed; this makes the imports more consistent and also fixes
compilation if the JUnit 3 version is not available. | 2016-07-28 12:32:38 | 2f6e7783503aeb68d58fd7d50c47b7985d80203d

Merge pull request #227 from square/jwilson.0618.hashfail

Fix a major bug where HashingSource is incorrect for large writes. | 2016-06-19 01:58:13 | 2244048477890e33893613affc8f1fc82230c178

Fix a major bug where HashingSource is incorrect for large writes.

There was a bug where it wasn't traversing through the segments of
the buffer being hashed. This means that HashingSource was returning
incorrect answers for any writes that spanned multiple segment
boundaries.

The problem wasn't detected by our test cases because although
we have tests for non-uniform segments, and for buffers that
span multiple segments, we don't have tests for non-uniform
buffers that span multiple segments. This has been fixed too. | 2016-06-18 22:04:20 | 657278fff2ebb521659a330d0f7fc2b66d99cfbd

Merge pull request #210 from aried3r/patch-1

Fix typo in changelog | 2016-04-11 16:45:29 | 2c92d8261bc932473f4580bc62f22818a76acb47

Merge pull request #209 from chrisdoc/master

fix wrong changelog date for Version 1.7.0 | 2016-04-11 05:19:36 | 33cb196bb5182ebcad50303660f9e44635071696

fix wrong date for Version 1.7.0 | 2016-04-11 05:15:07 | 52dd9f5665f840dd4b6b4be93ac09f6c8252a791

Enable Gradle metadata publishing (#604)

* Enable Gradle metadata publishing

* Update Node plugin

* Add workaround for Node plugin bug

* Correct version of the workaround | 2019-05-01 15:33:28 | a54054aaaa264a7bcf190f625bbe0b98e0312ace

Merge pull request #603 from square/egorand/190430/fix-snapshot-publishing

Fix snapshot publishing command | 2019-04-30 17:03:19 | bdb1e33d249e578a5752dde3be1a6fa0ad389bc3

Merge pull request #602 from jaredsburrows/patch-1

Update README.md - fix broken proguard link | 2019-04-30 12:57:24 | cb440ffb53a2a4527675f738789aa75b298a1321

Update README.md - fix broken proguard link | 2019-04-30 04:10:46 | 90295b16aabea3ea560ac71fbeaef7bc86eba551

Peek the minimum number of bytes to return a result

The contract for read() is to return at least 1 byte, but we were
attempting to read the full request. That caused us to prematurely
do a blocking read on the upstream source.

This fixes that code to defer the blocking read.

Closes: https://github.com/square/okio/issues/594 | 2019-04-28 21:50:51 | 86e479564373d6872941bfc031c7169d9cb91417

Update japicmp plugin

This bumps japicmp to 0.13.1 which still doesn't contain the effectively-final fix, but at least provides compatibility with newer japicmp versions so that we can upgrade once that change is released. | 2019-04-05 13:57:48 | 031ea7a5118b8077904a6cdc12e273dab4e50b13

Kotlin Gradle MPP 1.3 (#544)

* Basic setup

* Ignore failing test

* Gradle 5.0

* Better native config

* Fix jvm tests

* JS testing setup

* Native config

* Use EAP dependencies

* Japicmp setup

* Correct path to japicmp report

* Basic JVM + AnimalSniffer setup

* Enable samples module

* Use jvmWithJava for running Java tests

* Include more Native platforms to force test task generation

* Use internal UTF-8 decoder for Kotlin/Native

* Kotlin 1.3.20

* Gradle 5.1

* Move JMH setup into a separate module

* Properly configure jmhJar task

* Remove old jvm build.gradle

* Replace publishing plugin with SQLDelight's custom script

* Use default artifactId for JVM target

* Revert JVM build.gradle rename, use new DSL for defining targets

* Remove old module definitions in settings

* Feedback fixes | 2019-01-30 12:50:19 | 0078fca7b325a8d9454715ada316e0a3d6e99115

Merge pull request #542 from NightlyNexus/patch-1

Fix some indices in Buffer.UnsafeCursor docs. | 2019-01-16 03:02:01 | 7dd5bde7b0eb160ecdcb2a32477b8e9f313a0b8b

Merge pull request #504 from square/egorand/0830/ktlint-fixes

Fix ktlint issues in platform modules | 2018-09-01 03:43:34 | ea0dd569ef0cbe3cc6288264c36bc6fde02074af

Hide Base64, ByteStringKt, Platform, and Util code from Java

These are 'internal' in Kotlin but 'public' to Java callers. Changing
class names to prefix with '-' prevents Java from calling through. | 2018-08-26 13:45:15 | b518b5b2cf40147105a30bd37cf91c810ff59450

Make Buffer exceptions consistent with RealBufferedSource

This is inspired by ksperling's work on improving exception-consistency
between Buffer and RealBufferedSource. I wasn't willing to make an
exception-signature change for a 1.x release, but the 2.x release is a
good opportunity to fix this longstanding problem. | 2018-07-24 20:55:10 | 487a1f2392d8a9f017dceaca15656a82ab4ed46d

Retain interrupted state when throwing InterruptedIOException (Okio 2.x)

This fixes Okio 2.x. A separate fix is required for Okio 1.x. | 2018-07-06 02:35:23 | 264829dae36198c2e5454a6c2ae1d4aa208c5815

Merge pull request #463 from GianfrancoMS/patch-1

Update README.md | 2018-06-04 20:06:26 | fffc9d42244254899bb934ca400c8a88a65ea224

Merge pull request #462 from hendrawd/patch-1

Update README.md | 2018-05-29 17:14:54 | 105c2411448a726fe2d2a90c2e13d7e30ff79f43

Merge pull request #449 from yinyinnie/patch-1

Update README.md | 2018-05-13 15:11:04 | 4b567e1f0dfeeb6c506f5b2497444d8de8ecbc47

Merge pull request #424 from square/jwilson.0430.no_performance_bug

Add a test for the off-by-one bug in Buffer.seek(). | 2018-05-02 13:03:23 | bf4ae6cc0b967204ebdc629b62773fa8202962fc

Add a test for the off-by-one bug in Buffer.seek().

There was a performance bug here, where it would return one segment too early. | 2018-05-01 03:53:32 | c2b251cc189f128071d6357e30ccba6a091adadf

Merge pull request #312 from square/jwilson.0522.actually_split

Fix a performance bug in AsyncTimeout.sink().write(). | 2017-05-22 14:42:26 | 20e259c08af6c96508387540a5ea53f89b1d01f5

Fix a performance bug in AsyncTimeout.sink().write().

Previously the behavior was correct but the intended behavior was less
efficient than intended. In particular there were two problems:

 * The loop to find a segment boundary may have made more iterations
   than necessary if the first segment was very small
 * The sink write may not have been on a segment boundary, causing more
   data than necessary to be copied.

Closes: https://github.com/square/okio/issues/311 | 2017-05-22 12:14:32 | 80f3aa2e7bb9ac9691e62ec619e6b53259d78958

Import jsr305 and use it to mark @Nullable stuff.

The result is that IntelliJ + Kotlin correctly infers the right nullability
for Okio's APIs. I used IntelliJ's "Specify types explicitly" quick fix on
the 'a' and 'b' variables below and it did the right thing.

    fun specifyTypeExplicitly(source: BufferedSource) {
      val a: String? = source.readUtf8Line()
      val b: String = source.readUtf8LineStrict()
    } | 2017-05-02 02:39:52 | 2320c7f6ad9d05c1b65fb1e8cc43e257965792b4

Merge pull request #274 from larsgrefer/patch-1

endsWith -> suffix | 2016-12-07 22:57:38 | d412a4a2f9034a9bc59a8637e477822bd54d4504

endsWith -> suffix | 2016-12-07 22:54:57 | 032ad9948d5df69ee49367c90ad30f8823fc200b

Merge pull request #259 from square/jwilson.0829.substring

Fix a major bug where writeString() didn't always respect offsets. | 2016-08-29 12:54:40 | 927902b565479277178bdb7b0c986ce8beca07a3

Fix a major bug where writeString() didn't always respect offsets.

Closes: https://github.com/square/okio/issues/258 | 2016-08-29 12:16:03 | 8f5ae7376486990db25696304367f8e8b16f5534

Merge pull request #253 from square/jwilson.0814.fix_gzip_sink

Fix GzipSink for symmetry. | 2016-08-14 16:17:04 | 838a215b2bdbd77550ee876bc8870a61ad7219df

Merge pull request #252 from square/jwilson.0813.gzip_fix

Fix GzipSource to handle large files on AOSP. | 2016-08-14 04:32:14 | 4934879155da13b82be1775ac9840dbbd6b5c0cf

Merge pull request #247 from cketti/base64_encode_buffer_size_fix

Don't overallocate when base64-encoding. | 2016-08-07 00:11:57 | 834a35c2c8ff533f9e6d476714e7410c53cfd971

Import org.junit.Assert.fail instead of junit.framework.TestCase.fail

Use the JUnit 4 version in the couple of places were JUnit 3 imports
still existed; this makes the imports more consistent and also fixes
compilation if the JUnit 3 version is not available. | 2016-07-28 12:32:38 | 2f6e7783503aeb68d58fd7d50c47b7985d80203d

Merge pull request #227 from square/jwilson.0618.hashfail

Fix a major bug where HashingSource is incorrect for large writes. | 2016-06-19 01:58:13 | 2244048477890e33893613affc8f1fc82230c178

Fix a major bug where HashingSource is incorrect for large writes.

There was a bug where it wasn't traversing through the segments of
the buffer being hashed. This means that HashingSource was returning
incorrect answers for any writes that spanned multiple segment
boundaries.

The problem wasn't detected by our test cases because although
we have tests for non-uniform segments, and for buffers that
span multiple segments, we don't have tests for non-uniform
buffers that span multiple segments. This has been fixed too. | 2016-06-18 22:04:20 | 657278fff2ebb521659a330d0f7fc2b66d99cfbd

Merge pull request #210 from aried3r/patch-1

Fix typo in changelog | 2016-04-11 16:45:29 | 2c92d8261bc932473f4580bc62f22818a76acb47

Merge pull request #209 from chrisdoc/master

fix wrong changelog date for Version 1.7.0 | 2016-04-11 05:19:36 | 33cb196bb5182ebcad50303660f9e44635071696

fix wrong date for Version 1.7.0 | 2016-04-11 05:15:07 | 52dd9f5665f840dd4b6b4be93ac09f6c8252a791

Enable Gradle metadata publishing (#604)

* Enable Gradle metadata publishing

* Update Node plugin

* Add workaround for Node plugin bug

* Correct version of the workaround | 2019-05-01 15:33:28 | a54054aaaa264a7bcf190f625bbe0b98e0312ace

Merge pull request #603 from square/egorand/190430/fix-snapshot-publishing

Fix snapshot publishing command | 2019-04-30 17:03:19 | bdb1e33d249e578a5752dde3be1a6fa0ad389bc3

Merge pull request #602 from jaredsburrows/patch-1

Update README.md - fix broken proguard link | 2019-04-30 12:57:24 | cb440ffb53a2a4527675f738789aa75b298a1321

Update README.md - fix broken proguard link | 2019-04-30 04:10:46 | 90295b16aabea3ea560ac71fbeaef7bc86eba551

Peek the minimum number of bytes to return a result

The contract for read() is to return at least 1 byte, but we were
attempting to read the full request. That caused us to prematurely
do a blocking read on the upstream source.

This fixes that code to defer the blocking read.

Closes: https://github.com/square/okio/issues/594 | 2019-04-28 21:50:51 | 86e479564373d6872941bfc031c7169d9cb91417

Update japicmp plugin

This bumps japicmp to 0.13.1 which still doesn't contain the effectively-final fix, but at least provides compatibility with newer japicmp versions so that we can upgrade once that change is released. | 2019-04-05 13:57:48 | 031ea7a5118b8077904a6cdc12e273dab4e50b13

Kotlin Gradle MPP 1.3 (#544)

* Basic setup

* Ignore failing test

* Gradle 5.0

* Better native config

* Fix jvm tests

* JS testing setup

* Native config

* Use EAP dependencies

* Japicmp setup

* Correct path to japicmp report

* Basic JVM + AnimalSniffer setup

* Enable samples module

* Use jvmWithJava for running Java tests

* Include more Native platforms to force test task generation

* Use internal UTF-8 decoder for Kotlin/Native

* Kotlin 1.3.20

* Gradle 5.1

* Move JMH setup into a separate module

* Properly configure jmhJar task

* Remove old jvm build.gradle

* Replace publishing plugin with SQLDelight's custom script

* Use default artifactId for JVM target

* Revert JVM build.gradle rename, use new DSL for defining targets

* Remove old module definitions in settings

* Feedback fixes | 2019-01-30 12:50:19 | 0078fca7b325a8d9454715ada316e0a3d6e99115

Merge pull request #542 from NightlyNexus/patch-1

Fix some indices in Buffer.UnsafeCursor docs. | 2019-01-16 03:02:01 | 7dd5bde7b0eb160ecdcb2a32477b8e9f313a0b8b

Merge pull request #504 from square/egorand/0830/ktlint-fixes

Fix ktlint issues in platform modules | 2018-09-01 03:43:34 | ea0dd569ef0cbe3cc6288264c36bc6fde02074af

Hide Base64, ByteStringKt, Platform, and Util code from Java

These are 'internal' in Kotlin but 'public' to Java callers. Changing
class names to prefix with '-' prevents Java from calling through. | 2018-08-26 13:45:15 | b518b5b2cf40147105a30bd37cf91c810ff59450

Make Buffer exceptions consistent with RealBufferedSource

This is inspired by ksperling's work on improving exception-consistency
between Buffer and RealBufferedSource. I wasn't willing to make an
exception-signature change for a 1.x release, but the 2.x release is a
good opportunity to fix this longstanding problem. | 2018-07-24 20:55:10 | 487a1f2392d8a9f017dceaca15656a82ab4ed46d

Retain interrupted state when throwing InterruptedIOException (Okio 2.x)

This fixes Okio 2.x. A separate fix is required for Okio 1.x. | 2018-07-06 02:35:23 | 264829dae36198c2e5454a6c2ae1d4aa208c5815

Merge pull request #463 from GianfrancoMS/patch-1

Update README.md | 2018-06-04 20:06:26 | fffc9d42244254899bb934ca400c8a88a65ea224

Merge pull request #462 from hendrawd/patch-1

Update README.md | 2018-05-29 17:14:54 | 105c2411448a726fe2d2a90c2e13d7e30ff79f43

Merge pull request #449 from yinyinnie/patch-1

Update README.md | 2018-05-13 15:11:04 | 4b567e1f0dfeeb6c506f5b2497444d8de8ecbc47

Merge pull request #424 from square/jwilson.0430.no_performance_bug

Add a test for the off-by-one bug in Buffer.seek(). | 2018-05-02 13:03:23 | bf4ae6cc0b967204ebdc629b62773fa8202962fc

Add a test for the off-by-one bug in Buffer.seek().

There was a performance bug here, where it would return one segment too early. | 2018-05-01 03:53:32 | c2b251cc189f128071d6357e30ccba6a091adadf

Merge pull request #312 from square/jwilson.0522.actually_split

Fix a performance bug in AsyncTimeout.sink().write(). | 2017-05-22 14:42:26 | 20e259c08af6c96508387540a5ea53f89b1d01f5

Fix a performance bug in AsyncTimeout.sink().write().

Previously the behavior was correct but the intended behavior was less
efficient than intended. In particular there were two problems:

 * The loop to find a segment boundary may have made more iterations
   than necessary if the first segment was very small
 * The sink write may not have been on a segment boundary, causing more
   data than necessary to be copied.

Closes: https://github.com/square/okio/issues/311 | 2017-05-22 12:14:32 | 80f3aa2e7bb9ac9691e62ec619e6b53259d78958

Import jsr305 and use it to mark @Nullable stuff.

The result is that IntelliJ + Kotlin correctly infers the right nullability
for Okio's APIs. I used IntelliJ's "Specify types explicitly" quick fix on
the 'a' and 'b' variables below and it did the right thing.

    fun specifyTypeExplicitly(source: BufferedSource) {
      val a: String? = source.readUtf8Line()
      val b: String = source.readUtf8LineStrict()
    } | 2017-05-02 02:39:52 | 2320c7f6ad9d05c1b65fb1e8cc43e257965792b4

Merge pull request #274 from larsgrefer/patch-1

endsWith -> suffix | 2016-12-07 22:57:38 | d412a4a2f9034a9bc59a8637e477822bd54d4504

endsWith -> suffix | 2016-12-07 22:54:57 | 032ad9948d5df69ee49367c90ad30f8823fc200b

Merge pull request #259 from square/jwilson.0829.substring

Fix a major bug where writeString() didn't always respect offsets. | 2016-08-29 12:54:40 | 927902b565479277178bdb7b0c986ce8beca07a3

Fix a major bug where writeString() didn't always respect offsets.

Closes: https://github.com/square/okio/issues/258 | 2016-08-29 12:16:03 | 8f5ae7376486990db25696304367f8e8b16f5534

Merge pull request #253 from square/jwilson.0814.fix_gzip_sink

Fix GzipSink for symmetry. | 2016-08-14 16:17:04 | 838a215b2bdbd77550ee876bc8870a61ad7219df

Merge pull request #252 from square/jwilson.0813.gzip_fix

Fix GzipSource to handle large files on AOSP. | 2016-08-14 04:32:14 | 4934879155da13b82be1775ac9840dbbd6b5c0cf

Merge pull request #247 from cketti/base64_encode_buffer_size_fix

Don't overallocate when base64-encoding. | 2016-08-07 00:11:57 | 834a35c2c8ff533f9e6d476714e7410c53cfd971

Import org.junit.Assert.fail instead of junit.framework.TestCase.fail

Use the JUnit 4 version in the couple of places were JUnit 3 imports
still existed; this makes the imports more consistent and also fixes
compilation if the JUnit 3 version is not available. | 2016-07-28 12:32:38 | 2f6e7783503aeb68d58fd7d50c47b7985d80203d

Merge pull request #227 from square/jwilson.0618.hashfail

Fix a major bug where HashingSource is incorrect for large writes. | 2016-06-19 01:58:13 | 2244048477890e33893613affc8f1fc82230c178

Fix a major bug where HashingSource is incorrect for large writes.

There was a bug where it wasn't traversing through the segments of
the buffer being hashed. This means that HashingSource was returning
incorrect answers for any writes that spanned multiple segment
boundaries.

The problem wasn't detected by our test cases because although
we have tests for non-uniform segments, and for buffers that
span multiple segments, we don't have tests for non-uniform
buffers that span multiple segments. This has been fixed too. | 2016-06-18 22:04:20 | 657278fff2ebb521659a330d0f7fc2b66d99cfbd

Merge pull request #210 from aried3r/patch-1

Fix typo in changelog | 2016-04-11 16:45:29 | 2c92d8261bc932473f4580bc62f22818a76acb47

Merge pull request #209 from chrisdoc/master

fix wrong changelog date for Version 1.7.0 | 2016-04-11 05:19:36 | 33cb196bb5182ebcad50303660f9e44635071696

fix wrong date for Version 1.7.0 | 2016-04-11 05:15:07 | 52dd9f5665f840dd4b6b4be93ac09f6c8252a791

Kotlin Gradle MPP 1.3 (#544)

* Basic setup

* Ignore failing test

* Gradle 5.0

* Better native config

* Fix jvm tests

* JS testing setup

* Native config

* Use EAP dependencies

* Japicmp setup

* Correct path to japicmp report

* Basic JVM + AnimalSniffer setup

* Enable samples module

* Use jvmWithJava for running Java tests

* Include more Native platforms to force test task generation

* Use internal UTF-8 decoder for Kotlin/Native

* Kotlin 1.3.20

* Gradle 5.1

* Move JMH setup into a separate module

* Properly configure jmhJar task

* Remove old jvm build.gradle

* Replace publishing plugin with SQLDelight's custom script

* Use default artifactId for JVM target

* Revert JVM build.gradle rename, use new DSL for defining targets

* Remove old module definitions in settings

* Feedback fixes | 2019-01-30 12:50:19 | 0078fca7b325a8d9454715ada316e0a3d6e99115

Merge pull request #542 from NightlyNexus/patch-1

Fix some indices in Buffer.UnsafeCursor docs. | 2019-01-16 03:02:01 | 7dd5bde7b0eb160ecdcb2a32477b8e9f313a0b8b

Merge pull request #504 from square/egorand/0830/ktlint-fixes

Fix ktlint issues in platform modules | 2018-09-01 03:43:34 | ea0dd569ef0cbe3cc6288264c36bc6fde02074af

Hide Base64, ByteStringKt, Platform, and Util code from Java

These are 'internal' in Kotlin but 'public' to Java callers. Changing
class names to prefix with '-' prevents Java from calling through. | 2018-08-26 13:45:15 | b518b5b2cf40147105a30bd37cf91c810ff59450

Make Buffer exceptions consistent with RealBufferedSource

This is inspired by ksperling's work on improving exception-consistency
between Buffer and RealBufferedSource. I wasn't willing to make an
exception-signature change for a 1.x release, but the 2.x release is a
good opportunity to fix this longstanding problem. | 2018-07-24 20:55:10 | 487a1f2392d8a9f017dceaca15656a82ab4ed46d

Retain interrupted state when throwing InterruptedIOException (Okio 2.x)

This fixes Okio 2.x. A separate fix is required for Okio 1.x. | 2018-07-06 02:35:23 | 264829dae36198c2e5454a6c2ae1d4aa208c5815

Merge pull request #463 from GianfrancoMS/patch-1

Update README.md | 2018-06-04 20:06:26 | fffc9d42244254899bb934ca400c8a88a65ea224

Merge pull request #462 from hendrawd/patch-1

Update README.md | 2018-05-29 17:14:54 | 105c2411448a726fe2d2a90c2e13d7e30ff79f43

Merge pull request #449 from yinyinnie/patch-1

Update README.md | 2018-05-13 15:11:04 | 4b567e1f0dfeeb6c506f5b2497444d8de8ecbc47

Merge pull request #424 from square/jwilson.0430.no_performance_bug

Add a test for the off-by-one bug in Buffer.seek(). | 2018-05-02 13:03:23 | bf4ae6cc0b967204ebdc629b62773fa8202962fc

Add a test for the off-by-one bug in Buffer.seek().

There was a performance bug here, where it would return one segment too early. | 2018-05-01 03:53:32 | c2b251cc189f128071d6357e30ccba6a091adadf

Merge pull request #312 from square/jwilson.0522.actually_split

Fix a performance bug in AsyncTimeout.sink().write(). | 2017-05-22 14:42:26 | 20e259c08af6c96508387540a5ea53f89b1d01f5

Fix a performance bug in AsyncTimeout.sink().write().

Previously the behavior was correct but the intended behavior was less
efficient than intended. In particular there were two problems:

 * The loop to find a segment boundary may have made more iterations
   than necessary if the first segment was very small
 * The sink write may not have been on a segment boundary, causing more
   data than necessary to be copied.

Closes: https://github.com/square/okio/issues/311 | 2017-05-22 12:14:32 | 80f3aa2e7bb9ac9691e62ec619e6b53259d78958

Import jsr305 and use it to mark @Nullable stuff.

The result is that IntelliJ + Kotlin correctly infers the right nullability
for Okio's APIs. I used IntelliJ's "Specify types explicitly" quick fix on
the 'a' and 'b' variables below and it did the right thing.

    fun specifyTypeExplicitly(source: BufferedSource) {
      val a: String? = source.readUtf8Line()
      val b: String = source.readUtf8LineStrict()
    } | 2017-05-02 02:39:52 | 2320c7f6ad9d05c1b65fb1e8cc43e257965792b4

Merge pull request #274 from larsgrefer/patch-1

endsWith -> suffix | 2016-12-07 22:57:38 | d412a4a2f9034a9bc59a8637e477822bd54d4504

endsWith -> suffix | 2016-12-07 22:54:57 | 032ad9948d5df69ee49367c90ad30f8823fc200b

Merge pull request #259 from square/jwilson.0829.substring

Fix a major bug where writeString() didn't always respect offsets. | 2016-08-29 12:54:40 | 927902b565479277178bdb7b0c986ce8beca07a3

Fix a major bug where writeString() didn't always respect offsets.

Closes: https://github.com/square/okio/issues/258 | 2016-08-29 12:16:03 | 8f5ae7376486990db25696304367f8e8b16f5534

Merge pull request #253 from square/jwilson.0814.fix_gzip_sink

Fix GzipSink for symmetry. | 2016-08-14 16:17:04 | 838a215b2bdbd77550ee876bc8870a61ad7219df

Merge pull request #252 from square/jwilson.0813.gzip_fix

Fix GzipSource to handle large files on AOSP. | 2016-08-14 04:32:14 | 4934879155da13b82be1775ac9840dbbd6b5c0cf

Merge pull request #247 from cketti/base64_encode_buffer_size_fix

Don't overallocate when base64-encoding. | 2016-08-07 00:11:57 | 834a35c2c8ff533f9e6d476714e7410c53cfd971

Import org.junit.Assert.fail instead of junit.framework.TestCase.fail

Use the JUnit 4 version in the couple of places were JUnit 3 imports
still existed; this makes the imports more consistent and also fixes
compilation if the JUnit 3 version is not available. | 2016-07-28 12:32:38 | 2f6e7783503aeb68d58fd7d50c47b7985d80203d

Merge pull request #227 from square/jwilson.0618.hashfail

Fix a major bug where HashingSource is incorrect for large writes. | 2016-06-19 01:58:13 | 2244048477890e33893613affc8f1fc82230c178

Fix a major bug where HashingSource is incorrect for large writes.

There was a bug where it wasn't traversing through the segments of
the buffer being hashed. This means that HashingSource was returning
incorrect answers for any writes that spanned multiple segment
boundaries.

The problem wasn't detected by our test cases because although
we have tests for non-uniform segments, and for buffers that
span multiple segments, we don't have tests for non-uniform
buffers that span multiple segments. This has been fixed too. | 2016-06-18 22:04:20 | 657278fff2ebb521659a330d0f7fc2b66d99cfbd

Merge pull request #210 from aried3r/patch-1

Fix typo in changelog | 2016-04-11 16:45:29 | 2c92d8261bc932473f4580bc62f22818a76acb47

Merge pull request #209 from chrisdoc/master

fix wrong changelog date for Version 1.7.0 | 2016-04-11 05:19:36 | 33cb196bb5182ebcad50303660f9e44635071696

fix wrong date for Version 1.7.0 | 2016-04-11 05:15:07 | 52dd9f5665f840dd4b6b4be93ac09f6c8252a791

Enable Gradle metadata publishing (#604)

* Enable Gradle metadata publishing

* Update Node plugin

* Add workaround for Node plugin bug

* Correct version of the workaround | 2019-05-01 15:33:28 | a54054aaaa264a7bcf190f625bbe0b98e0312ace

Merge pull request #603 from square/egorand/190430/fix-snapshot-publishing

Fix snapshot publishing command | 2019-04-30 17:03:19 | bdb1e33d249e578a5752dde3be1a6fa0ad389bc3

Merge pull request #602 from jaredsburrows/patch-1

Update README.md - fix broken proguard link | 2019-04-30 12:57:24 | cb440ffb53a2a4527675f738789aa75b298a1321

Update README.md - fix broken proguard link | 2019-04-30 04:10:46 | 90295b16aabea3ea560ac71fbeaef7bc86eba551

Peek the minimum number of bytes to return a result

The contract for read() is to return at least 1 byte, but we were
attempting to read the full request. That caused us to prematurely
do a blocking read on the upstream source.

This fixes that code to defer the blocking read.

Closes: https://github.com/square/okio/issues/594 | 2019-04-28 21:50:51 | 86e479564373d6872941bfc031c7169d9cb91417

Update japicmp plugin

This bumps japicmp to 0.13.1 which still doesn't contain the effectively-final fix, but at least provides compatibility with newer japicmp versions so that we can upgrade once that change is released. | 2019-04-05 13:57:48 | 031ea7a5118b8077904a6cdc12e273dab4e50b13

Kotlin Gradle MPP 1.3 (#544)

* Basic setup

* Ignore failing test

* Gradle 5.0

* Better native config

* Fix jvm tests

* JS testing setup

* Native config

* Use EAP dependencies

* Japicmp setup

* Correct path to japicmp report

* Basic JVM + AnimalSniffer setup

* Enable samples module

* Use jvmWithJava for running Java tests

* Include more Native platforms to force test task generation

* Use internal UTF-8 decoder for Kotlin/Native

* Kotlin 1.3.20

* Gradle 5.1

* Move JMH setup into a separate module

* Properly configure jmhJar task

* Remove old jvm build.gradle

* Replace publishing plugin with SQLDelight's custom script

* Use default artifactId for JVM target

* Revert JVM build.gradle rename, use new DSL for defining targets

* Remove old module definitions in settings

* Feedback fixes | 2019-01-30 12:50:19 | 0078fca7b325a8d9454715ada316e0a3d6e99115

Merge pull request #542 from NightlyNexus/patch-1

Fix some indices in Buffer.UnsafeCursor docs. | 2019-01-16 03:02:01 | 7dd5bde7b0eb160ecdcb2a32477b8e9f313a0b8b

Merge pull request #504 from square/egorand/0830/ktlint-fixes

Fix ktlint issues in platform modules | 2018-09-01 03:43:34 | ea0dd569ef0cbe3cc6288264c36bc6fde02074af

Hide Base64, ByteStringKt, Platform, and Util code from Java

These are 'internal' in Kotlin but 'public' to Java callers. Changing
class names to prefix with '-' prevents Java from calling through. | 2018-08-26 13:45:15 | b518b5b2cf40147105a30bd37cf91c810ff59450

Make Buffer exceptions consistent with RealBufferedSource

This is inspired by ksperling's work on improving exception-consistency
between Buffer and RealBufferedSource. I wasn't willing to make an
exception-signature change for a 1.x release, but the 2.x release is a
good opportunity to fix this longstanding problem. | 2018-07-24 20:55:10 | 487a1f2392d8a9f017dceaca15656a82ab4ed46d

Retain interrupted state when throwing InterruptedIOException (Okio 2.x)

This fixes Okio 2.x. A separate fix is required for Okio 1.x. | 2018-07-06 02:35:23 | 264829dae36198c2e5454a6c2ae1d4aa208c5815

Merge pull request #463 from GianfrancoMS/patch-1

Update README.md | 2018-06-04 20:06:26 | fffc9d42244254899bb934ca400c8a88a65ea224

Merge pull request #462 from hendrawd/patch-1

Update README.md | 2018-05-29 17:14:54 | 105c2411448a726fe2d2a90c2e13d7e30ff79f43

Merge pull request #449 from yinyinnie/patch-1

Update README.md | 2018-05-13 15:11:04 | 4b567e1f0dfeeb6c506f5b2497444d8de8ecbc47

Merge pull request #424 from square/jwilson.0430.no_performance_bug

Add a test for the off-by-one bug in Buffer.seek(). | 2018-05-02 13:03:23 | bf4ae6cc0b967204ebdc629b62773fa8202962fc

Add a test for the off-by-one bug in Buffer.seek().

There was a performance bug here, where it would return one segment too early. | 2018-05-01 03:53:32 | c2b251cc189f128071d6357e30ccba6a091adadf

Merge pull request #312 from square/jwilson.0522.actually_split

Fix a performance bug in AsyncTimeout.sink().write(). | 2017-05-22 14:42:26 | 20e259c08af6c96508387540a5ea53f89b1d01f5

Fix a performance bug in AsyncTimeout.sink().write().

Previously the behavior was correct but the intended behavior was less
efficient than intended. In particular there were two problems:

 * The loop to find a segment boundary may have made more iterations
   than necessary if the first segment was very small
 * The sink write may not have been on a segment boundary, causing more
   data than necessary to be copied.

Closes: https://github.com/square/okio/issues/311 | 2017-05-22 12:14:32 | 80f3aa2e7bb9ac9691e62ec619e6b53259d78958

Import jsr305 and use it to mark @Nullable stuff.

The result is that IntelliJ + Kotlin correctly infers the right nullability
for Okio's APIs. I used IntelliJ's "Specify types explicitly" quick fix on
the 'a' and 'b' variables below and it did the right thing.

    fun specifyTypeExplicitly(source: BufferedSource) {
      val a: String? = source.readUtf8Line()
      val b: String = source.readUtf8LineStrict()
    } | 2017-05-02 02:39:52 | 2320c7f6ad9d05c1b65fb1e8cc43e257965792b4

Merge pull request #274 from larsgrefer/patch-1

endsWith -> suffix | 2016-12-07 22:57:38 | d412a4a2f9034a9bc59a8637e477822bd54d4504

endsWith -> suffix | 2016-12-07 22:54:57 | 032ad9948d5df69ee49367c90ad30f8823fc200b

Merge pull request #259 from square/jwilson.0829.substring

Fix a major bug where writeString() didn't always respect offsets. | 2016-08-29 12:54:40 | 927902b565479277178bdb7b0c986ce8beca07a3

Fix a major bug where writeString() didn't always respect offsets.

Closes: https://github.com/square/okio/issues/258 | 2016-08-29 12:16:03 | 8f5ae7376486990db25696304367f8e8b16f5534

Merge pull request #253 from square/jwilson.0814.fix_gzip_sink

Fix GzipSink for symmetry. | 2016-08-14 16:17:04 | 838a215b2bdbd77550ee876bc8870a61ad7219df

Merge pull request #252 from square/jwilson.0813.gzip_fix

Fix GzipSource to handle large files on AOSP. | 2016-08-14 04:32:14 | 4934879155da13b82be1775ac9840dbbd6b5c0cf

Merge pull request #247 from cketti/base64_encode_buffer_size_fix

Don't overallocate when base64-encoding. | 2016-08-07 00:11:57 | 834a35c2c8ff533f9e6d476714e7410c53cfd971

Import org.junit.Assert.fail instead of junit.framework.TestCase.fail

Use the JUnit 4 version in the couple of places were JUnit 3 imports
still existed; this makes the imports more consistent and also fixes
compilation if the JUnit 3 version is not available. | 2016-07-28 12:32:38 | 2f6e7783503aeb68d58fd7d50c47b7985d80203d

Merge pull request #227 from square/jwilson.0618.hashfail

Fix a major bug where HashingSource is incorrect for large writes. | 2016-06-19 01:58:13 | 2244048477890e33893613affc8f1fc82230c178

Fix a major bug where HashingSource is incorrect for large writes.

There was a bug where it wasn't traversing through the segments of
the buffer being hashed. This means that HashingSource was returning
incorrect answers for any writes that spanned multiple segment
boundaries.

The problem wasn't detected by our test cases because although
we have tests for non-uniform segments, and for buffers that
span multiple segments, we don't have tests for non-uniform
buffers that span multiple segments. This has been fixed too. | 2016-06-18 22:04:20 | 657278fff2ebb521659a330d0f7fc2b66d99cfbd

Merge pull request #210 from aried3r/patch-1

Fix typo in changelog | 2016-04-11 16:45:29 | 2c92d8261bc932473f4580bc62f22818a76acb47

Merge pull request #209 from chrisdoc/master

fix wrong changelog date for Version 1.7.0 | 2016-04-11 05:19:36 | 33cb196bb5182ebcad50303660f9e44635071696

fix wrong date for Version 1.7.0 | 2016-04-11 05:15:07 | 52dd9f5665f840dd4b6b4be93ac09f6c8252a791

Enable Gradle metadata publishing (#604)

* Enable Gradle metadata publishing

* Update Node plugin

* Add workaround for Node plugin bug

* Correct version of the workaround | 2019-05-01 15:33:28 | a54054aaaa264a7bcf190f625bbe0b98e0312ace

Merge pull request #603 from square/egorand/190430/fix-snapshot-publishing

Fix snapshot publishing command | 2019-04-30 17:03:19 | bdb1e33d249e578a5752dde3be1a6fa0ad389bc3

Merge pull request #602 from jaredsburrows/patch-1

Update README.md - fix broken proguard link | 2019-04-30 12:57:24 | cb440ffb53a2a4527675f738789aa75b298a1321

Update README.md - fix broken proguard link | 2019-04-30 04:10:46 | 90295b16aabea3ea560ac71fbeaef7bc86eba551

Peek the minimum number of bytes to return a result

The contract for read() is to return at least 1 byte, but we were
attempting to read the full request. That caused us to prematurely
do a blocking read on the upstream source.

This fixes that code to defer the blocking read.

Closes: https://github.com/square/okio/issues/594 | 2019-04-28 21:50:51 | 86e479564373d6872941bfc031c7169d9cb91417

Update japicmp plugin

This bumps japicmp to 0.13.1 which still doesn't contain the effectively-final fix, but at least provides compatibility with newer japicmp versions so that we can upgrade once that change is released. | 2019-04-05 13:57:48 | 031ea7a5118b8077904a6cdc12e273dab4e50b13

Kotlin Gradle MPP 1.3 (#544)

* Basic setup

* Ignore failing test

* Gradle 5.0

* Better native config

* Fix jvm tests

* JS testing setup

* Native config

* Use EAP dependencies

* Japicmp setup

* Correct path to japicmp report

* Basic JVM + AnimalSniffer setup

* Enable samples module

* Use jvmWithJava for running Java tests

* Include more Native platforms to force test task generation

* Use internal UTF-8 decoder for Kotlin/Native

* Kotlin 1.3.20

* Gradle 5.1

* Move JMH setup into a separate module

* Properly configure jmhJar task

* Remove old jvm build.gradle

* Replace publishing plugin with SQLDelight's custom script

* Use default artifactId for JVM target

* Revert JVM build.gradle rename, use new DSL for defining targets

* Remove old module definitions in settings

* Feedback fixes | 2019-01-30 12:50:19 | 0078fca7b325a8d9454715ada316e0a3d6e99115

Merge pull request #542 from NightlyNexus/patch-1

Fix some indices in Buffer.UnsafeCursor docs. | 2019-01-16 03:02:01 | 7dd5bde7b0eb160ecdcb2a32477b8e9f313a0b8b

Merge pull request #504 from square/egorand/0830/ktlint-fixes

Fix ktlint issues in platform modules | 2018-09-01 03:43:34 | ea0dd569ef0cbe3cc6288264c36bc6fde02074af

Hide Base64, ByteStringKt, Platform, and Util code from Java

These are 'internal' in Kotlin but 'public' to Java callers. Changing
class names to prefix with '-' prevents Java from calling through. | 2018-08-26 13:45:15 | b518b5b2cf40147105a30bd37cf91c810ff59450

Make Buffer exceptions consistent with RealBufferedSource

This is inspired by ksperling's work on improving exception-consistency
between Buffer and RealBufferedSource. I wasn't willing to make an
exception-signature change for a 1.x release, but the 2.x release is a
good opportunity to fix this longstanding problem. | 2018-07-24 20:55:10 | 487a1f2392d8a9f017dceaca15656a82ab4ed46d

Retain interrupted state when throwing InterruptedIOException (Okio 2.x)

This fixes Okio 2.x. A separate fix is required for Okio 1.x. | 2018-07-06 02:35:23 | 264829dae36198c2e5454a6c2ae1d4aa208c5815

Merge pull request #463 from GianfrancoMS/patch-1

Update README.md | 2018-06-04 20:06:26 | fffc9d42244254899bb934ca400c8a88a65ea224

Merge pull request #462 from hendrawd/patch-1

Update README.md | 2018-05-29 17:14:54 | 105c2411448a726fe2d2a90c2e13d7e30ff79f43

Merge pull request #449 from yinyinnie/patch-1

Update README.md | 2018-05-13 15:11:04 | 4b567e1f0dfeeb6c506f5b2497444d8de8ecbc47

Merge pull request #424 from square/jwilson.0430.no_performance_bug

Add a test for the off-by-one bug in Buffer.seek(). | 2018-05-02 13:03:23 | bf4ae6cc0b967204ebdc629b62773fa8202962fc

Add a test for the off-by-one bug in Buffer.seek().

There was a performance bug here, where it would return one segment too early. | 2018-05-01 03:53:32 | c2b251cc189f128071d6357e30ccba6a091adadf

Merge pull request #312 from square/jwilson.0522.actually_split

Fix a performance bug in AsyncTimeout.sink().write(). | 2017-05-22 14:42:26 | 20e259c08af6c96508387540a5ea53f89b1d01f5

Fix a performance bug in AsyncTimeout.sink().write().

Previously the behavior was correct but the intended behavior was less
efficient than intended. In particular there were two problems:

 * The loop to find a segment boundary may have made more iterations
   than necessary if the first segment was very small
 * The sink write may not have been on a segment boundary, causing more
   data than necessary to be copied.

Closes: https://github.com/square/okio/issues/311 | 2017-05-22 12:14:32 | 80f3aa2e7bb9ac9691e62ec619e6b53259d78958

Import jsr305 and use it to mark @Nullable stuff.

The result is that IntelliJ + Kotlin correctly infers the right nullability
for Okio's APIs. I used IntelliJ's "Specify types explicitly" quick fix on
the 'a' and 'b' variables below and it did the right thing.

    fun specifyTypeExplicitly(source: BufferedSource) {
      val a: String? = source.readUtf8Line()
      val b: String = source.readUtf8LineStrict()
    } | 2017-05-02 02:39:52 | 2320c7f6ad9d05c1b65fb1e8cc43e257965792b4

Merge pull request #274 from larsgrefer/patch-1

endsWith -> suffix | 2016-12-07 22:57:38 | d412a4a2f9034a9bc59a8637e477822bd54d4504

endsWith -> suffix | 2016-12-07 22:54:57 | 032ad9948d5df69ee49367c90ad30f8823fc200b

Merge pull request #259 from square/jwilson.0829.substring

Fix a major bug where writeString() didn't always respect offsets. | 2016-08-29 12:54:40 | 927902b565479277178bdb7b0c986ce8beca07a3

Fix a major bug where writeString() didn't always respect offsets.

Closes: https://github.com/square/okio/issues/258 | 2016-08-29 12:16:03 | 8f5ae7376486990db25696304367f8e8b16f5534

Merge pull request #253 from square/jwilson.0814.fix_gzip_sink

Fix GzipSink for symmetry. | 2016-08-14 16:17:04 | 838a215b2bdbd77550ee876bc8870a61ad7219df

Merge pull request #252 from square/jwilson.0813.gzip_fix

Fix GzipSource to handle large files on AOSP. | 2016-08-14 04:32:14 | 4934879155da13b82be1775ac9840dbbd6b5c0cf

Merge pull request #247 from cketti/base64_encode_buffer_size_fix

Don't overallocate when base64-encoding. | 2016-08-07 00:11:57 | 834a35c2c8ff533f9e6d476714e7410c53cfd971

Import org.junit.Assert.fail instead of junit.framework.TestCase.fail

Use the JUnit 4 version in the couple of places were JUnit 3 imports
still existed; this makes the imports more consistent and also fixes
compilation if the JUnit 3 version is not available. | 2016-07-28 12:32:38 | 2f6e7783503aeb68d58fd7d50c47b7985d80203d

Merge pull request #227 from square/jwilson.0618.hashfail

Fix a major bug where HashingSource is incorrect for large writes. | 2016-06-19 01:58:13 | 2244048477890e33893613affc8f1fc82230c178

Fix a major bug where HashingSource is incorrect for large writes.

There was a bug where it wasn't traversing through the segments of
the buffer being hashed. This means that HashingSource was returning
incorrect answers for any writes that spanned multiple segment
boundaries.

The problem wasn't detected by our test cases because although
we have tests for non-uniform segments, and for buffers that
span multiple segments, we don't have tests for non-uniform
buffers that span multiple segments. This has been fixed too. | 2016-06-18 22:04:20 | 657278fff2ebb521659a330d0f7fc2b66d99cfbd

Merge pull request #210 from aried3r/patch-1

Fix typo in changelog | 2016-04-11 16:45:29 | 2c92d8261bc932473f4580bc62f22818a76acb47

Merge pull request #209 from chrisdoc/master

fix wrong changelog date for Version 1.7.0 | 2016-04-11 05:19:36 | 33cb196bb5182ebcad50303660f9e44635071696

fix wrong date for Version 1.7.0 | 2016-04-11 05:15:07 | 52dd9f5665f840dd4b6b4be93ac09f6c8252a791

Enable Gradle metadata publishing (#604)

* Enable Gradle metadata publishing

* Update Node plugin

* Add workaround for Node plugin bug

* Correct version of the workaround | 2019-05-01 15:33:28 | a54054aaaa264a7bcf190f625bbe0b98e0312ace

Merge pull request #603 from square/egorand/190430/fix-snapshot-publishing

Fix snapshot publishing command | 2019-04-30 17:03:19 | bdb1e33d249e578a5752dde3be1a6fa0ad389bc3

Merge pull request #602 from jaredsburrows/patch-1

Update README.md - fix broken proguard link | 2019-04-30 12:57:24 | cb440ffb53a2a4527675f738789aa75b298a1321

Update README.md - fix broken proguard link | 2019-04-30 04:10:46 | 90295b16aabea3ea560ac71fbeaef7bc86eba551

Peek the minimum number of bytes to return a result

The contract for read() is to return at least 1 byte, but we were
attempting to read the full request. That caused us to prematurely
do a blocking read on the upstream source.

This fixes that code to defer the blocking read.

Closes: https://github.com/square/okio/issues/594 | 2019-04-28 21:50:51 | 86e479564373d6872941bfc031c7169d9cb91417

Update japicmp plugin

This bumps japicmp to 0.13.1 which still doesn't contain the effectively-final fix, but at least provides compatibility with newer japicmp versions so that we can upgrade once that change is released. | 2019-04-05 13:57:48 | 031ea7a5118b8077904a6cdc12e273dab4e50b13

Kotlin Gradle MPP 1.3 (#544)

* Basic setup

* Ignore failing test

* Gradle 5.0

* Better native config

* Fix jvm tests

* JS testing setup

* Native config

* Use EAP dependencies

* Japicmp setup

* Correct path to japicmp report

* Basic JVM + AnimalSniffer setup

* Enable samples module

* Use jvmWithJava for running Java tests

* Include more Native platforms to force test task generation

* Use internal UTF-8 decoder for Kotlin/Native

* Kotlin 1.3.20

* Gradle 5.1

* Move JMH setup into a separate module

* Properly configure jmhJar task

* Remove old jvm build.gradle

* Replace publishing plugin with SQLDelight's custom script

* Use default artifactId for JVM target

* Revert JVM build.gradle rename, use new DSL for defining targets

* Remove old module definitions in settings

* Feedback fixes | 2019-01-30 12:50:19 | 0078fca7b325a8d9454715ada316e0a3d6e99115

Merge pull request #542 from NightlyNexus/patch-1

Fix some indices in Buffer.UnsafeCursor docs. | 2019-01-16 03:02:01 | 7dd5bde7b0eb160ecdcb2a32477b8e9f313a0b8b

Merge pull request #504 from square/egorand/0830/ktlint-fixes

Fix ktlint issues in platform modules | 2018-09-01 03:43:34 | ea0dd569ef0cbe3cc6288264c36bc6fde02074af

Hide Base64, ByteStringKt, Platform, and Util code from Java

These are 'internal' in Kotlin but 'public' to Java callers. Changing
class names to prefix with '-' prevents Java from calling through. | 2018-08-26 13:45:15 | b518b5b2cf40147105a30bd37cf91c810ff59450

Make Buffer exceptions consistent with RealBufferedSource

This is inspired by ksperling's work on improving exception-consistency
between Buffer and RealBufferedSource. I wasn't willing to make an
exception-signature change for a 1.x release, but the 2.x release is a
good opportunity to fix this longstanding problem. | 2018-07-24 20:55:10 | 487a1f2392d8a9f017dceaca15656a82ab4ed46d

Retain interrupted state when throwing InterruptedIOException (Okio 2.x)

This fixes Okio 2.x. A separate fix is required for Okio 1.x. | 2018-07-06 02:35:23 | 264829dae36198c2e5454a6c2ae1d4aa208c5815

Merge pull request #463 from GianfrancoMS/patch-1

Update README.md | 2018-06-04 20:06:26 | fffc9d42244254899bb934ca400c8a88a65ea224

Merge pull request #462 from hendrawd/patch-1

Update README.md | 2018-05-29 17:14:54 | 105c2411448a726fe2d2a90c2e13d7e30ff79f43

Merge pull request #449 from yinyinnie/patch-1

Update README.md | 2018-05-13 15:11:04 | 4b567e1f0dfeeb6c506f5b2497444d8de8ecbc47

Merge pull request #424 from square/jwilson.0430.no_performance_bug

Add a test for the off-by-one bug in Buffer.seek(). | 2018-05-02 13:03:23 | bf4ae6cc0b967204ebdc629b62773fa8202962fc

Add a test for the off-by-one bug in Buffer.seek().

There was a performance bug here, where it would return one segment too early. | 2018-05-01 03:53:32 | c2b251cc189f128071d6357e30ccba6a091adadf

Merge pull request #312 from square/jwilson.0522.actually_split

Fix a performance bug in AsyncTimeout.sink().write(). | 2017-05-22 14:42:26 | 20e259c08af6c96508387540a5ea53f89b1d01f5

Fix a performance bug in AsyncTimeout.sink().write().

Previously the behavior was correct but the intended behavior was less
efficient than intended. In particular there were two problems:

 * The loop to find a segment boundary may have made more iterations
   than necessary if the first segment was very small
 * The sink write may not have been on a segment boundary, causing more
   data than necessary to be copied.

Closes: https://github.com/square/okio/issues/311 | 2017-05-22 12:14:32 | 80f3aa2e7bb9ac9691e62ec619e6b53259d78958

Import jsr305 and use it to mark @Nullable stuff.

The result is that IntelliJ + Kotlin correctly infers the right nullability
for Okio's APIs. I used IntelliJ's "Specify types explicitly" quick fix on
the 'a' and 'b' variables below and it did the right thing.

    fun specifyTypeExplicitly(source: BufferedSource) {
      val a: String? = source.readUtf8Line()
      val b: String = source.readUtf8LineStrict()
    } | 2017-05-02 02:39:52 | 2320c7f6ad9d05c1b65fb1e8cc43e257965792b4

Merge pull request #274 from larsgrefer/patch-1

endsWith -> suffix | 2016-12-07 22:57:38 | d412a4a2f9034a9bc59a8637e477822bd54d4504

endsWith -> suffix | 2016-12-07 22:54:57 | 032ad9948d5df69ee49367c90ad30f8823fc200b

Merge pull request #259 from square/jwilson.0829.substring

Fix a major bug where writeString() didn't always respect offsets. | 2016-08-29 12:54:40 | 927902b565479277178bdb7b0c986ce8beca07a3

Fix a major bug where writeString() didn't always respect offsets.

Closes: https://github.com/square/okio/issues/258 | 2016-08-29 12:16:03 | 8f5ae7376486990db25696304367f8e8b16f5534

Merge pull request #253 from square/jwilson.0814.fix_gzip_sink

Fix GzipSink for symmetry. | 2016-08-14 16:17:04 | 838a215b2bdbd77550ee876bc8870a61ad7219df

Merge pull request #252 from square/jwilson.0813.gzip_fix

Fix GzipSource to handle large files on AOSP. | 2016-08-14 04:32:14 | 4934879155da13b82be1775ac9840dbbd6b5c0cf

Merge pull request #247 from cketti/base64_encode_buffer_size_fix

Don't overallocate when base64-encoding. | 2016-08-07 00:11:57 | 834a35c2c8ff533f9e6d476714e7410c53cfd971

Import org.junit.Assert.fail instead of junit.framework.TestCase.fail

Use the JUnit 4 version in the couple of places were JUnit 3 imports
still existed; this makes the imports more consistent and also fixes
compilation if the JUnit 3 version is not available. | 2016-07-28 12:32:38 | 2f6e7783503aeb68d58fd7d50c47b7985d80203d

Merge pull request #227 from square/jwilson.0618.hashfail

Fix a major bug where HashingSource is incorrect for large writes. | 2016-06-19 01:58:13 | 2244048477890e33893613affc8f1fc82230c178

Fix a major bug where HashingSource is incorrect for large writes.

There was a bug where it wasn't traversing through the segments of
the buffer being hashed. This means that HashingSource was returning
incorrect answers for any writes that spanned multiple segment
boundaries.

The problem wasn't detected by our test cases because although
we have tests for non-uniform segments, and for buffers that
span multiple segments, we don't have tests for non-uniform
buffers that span multiple segments. This has been fixed too. | 2016-06-18 22:04:20 | 657278fff2ebb521659a330d0f7fc2b66d99cfbd

Merge pull request #210 from aried3r/patch-1

Fix typo in changelog | 2016-04-11 16:45:29 | 2c92d8261bc932473f4580bc62f22818a76acb47

Merge pull request #209 from chrisdoc/master

fix wrong changelog date for Version 1.7.0 | 2016-04-11 05:19:36 | 33cb196bb5182ebcad50303660f9e44635071696

fix wrong date for Version 1.7.0 | 2016-04-11 05:15:07 | 52dd9f5665f840dd4b6b4be93ac09f6c8252a791

Try expect interfaces for Closeable, Flushable

This fails due to a crashing bug in the Kotlin/JS compiler.

https://youtrack.jetbrains.com/issue/KT-28927 | 2019-07-26 03:42:13 | 1199081224493f48c811708bb31ddd60c88b8417

Enable Gradle metadata publishing (#604)

* Enable Gradle metadata publishing

* Update Node plugin

* Add workaround for Node plugin bug

* Correct version of the workaround | 2019-05-01 15:33:28 | a54054aaaa264a7bcf190f625bbe0b98e0312ace

Merge pull request #603 from square/egorand/190430/fix-snapshot-publishing

Fix snapshot publishing command | 2019-04-30 17:03:19 | bdb1e33d249e578a5752dde3be1a6fa0ad389bc3

Merge pull request #602 from jaredsburrows/patch-1

Update README.md - fix broken proguard link | 2019-04-30 12:57:24 | cb440ffb53a2a4527675f738789aa75b298a1321

Update README.md - fix broken proguard link | 2019-04-30 04:10:46 | 90295b16aabea3ea560ac71fbeaef7bc86eba551

Peek the minimum number of bytes to return a result

The contract for read() is to return at least 1 byte, but we were
attempting to read the full request. That caused us to prematurely
do a blocking read on the upstream source.

This fixes that code to defer the blocking read.

Closes: https://github.com/square/okio/issues/594 | 2019-04-28 21:50:51 | 86e479564373d6872941bfc031c7169d9cb91417

Update japicmp plugin

This bumps japicmp to 0.13.1 which still doesn't contain the effectively-final fix, but at least provides compatibility with newer japicmp versions so that we can upgrade once that change is released. | 2019-04-05 13:57:48 | 031ea7a5118b8077904a6cdc12e273dab4e50b13

Kotlin Gradle MPP 1.3 (#544)

* Basic setup

* Ignore failing test

* Gradle 5.0

* Better native config

* Fix jvm tests

* JS testing setup

* Native config

* Use EAP dependencies

* Japicmp setup

* Correct path to japicmp report

* Basic JVM + AnimalSniffer setup

* Enable samples module

* Use jvmWithJava for running Java tests

* Include more Native platforms to force test task generation

* Use internal UTF-8 decoder for Kotlin/Native

* Kotlin 1.3.20

* Gradle 5.1

* Move JMH setup into a separate module

* Properly configure jmhJar task

* Remove old jvm build.gradle

* Replace publishing plugin with SQLDelight's custom script

* Use default artifactId for JVM target

* Revert JVM build.gradle rename, use new DSL for defining targets

* Remove old module definitions in settings

* Feedback fixes | 2019-01-30 12:50:19 | 0078fca7b325a8d9454715ada316e0a3d6e99115

Merge pull request #542 from NightlyNexus/patch-1

Fix some indices in Buffer.UnsafeCursor docs. | 2019-01-16 03:02:01 | 7dd5bde7b0eb160ecdcb2a32477b8e9f313a0b8b

Merge pull request #504 from square/egorand/0830/ktlint-fixes

Fix ktlint issues in platform modules | 2018-09-01 03:43:34 | ea0dd569ef0cbe3cc6288264c36bc6fde02074af

Hide Base64, ByteStringKt, Platform, and Util code from Java

These are 'internal' in Kotlin but 'public' to Java callers. Changing
class names to prefix with '-' prevents Java from calling through. | 2018-08-26 13:45:15 | b518b5b2cf40147105a30bd37cf91c810ff59450

Make Buffer exceptions consistent with RealBufferedSource

This is inspired by ksperling's work on improving exception-consistency
between Buffer and RealBufferedSource. I wasn't willing to make an
exception-signature change for a 1.x release, but the 2.x release is a
good opportunity to fix this longstanding problem. | 2018-07-24 20:55:10 | 487a1f2392d8a9f017dceaca15656a82ab4ed46d

Retain interrupted state when throwing InterruptedIOException (Okio 2.x)

This fixes Okio 2.x. A separate fix is required for Okio 1.x. | 2018-07-06 02:35:23 | 264829dae36198c2e5454a6c2ae1d4aa208c5815

Merge pull request #463 from GianfrancoMS/patch-1

Update README.md | 2018-06-04 20:06:26 | fffc9d42244254899bb934ca400c8a88a65ea224

Merge pull request #462 from hendrawd/patch-1

Update README.md | 2018-05-29 17:14:54 | 105c2411448a726fe2d2a90c2e13d7e30ff79f43

Merge pull request #449 from yinyinnie/patch-1

Update README.md | 2018-05-13 15:11:04 | 4b567e1f0dfeeb6c506f5b2497444d8de8ecbc47

Merge pull request #424 from square/jwilson.0430.no_performance_bug

Add a test for the off-by-one bug in Buffer.seek(). | 2018-05-02 13:03:23 | bf4ae6cc0b967204ebdc629b62773fa8202962fc

Add a test for the off-by-one bug in Buffer.seek().

There was a performance bug here, where it would return one segment too early. | 2018-05-01 03:53:32 | c2b251cc189f128071d6357e30ccba6a091adadf

Merge pull request #312 from square/jwilson.0522.actually_split

Fix a performance bug in AsyncTimeout.sink().write(). | 2017-05-22 14:42:26 | 20e259c08af6c96508387540a5ea53f89b1d01f5

Fix a performance bug in AsyncTimeout.sink().write().

Previously the behavior was correct but the intended behavior was less
efficient than intended. In particular there were two problems:

 * The loop to find a segment boundary may have made more iterations
   than necessary if the first segment was very small
 * The sink write may not have been on a segment boundary, causing more
   data than necessary to be copied.

Closes: https://github.com/square/okio/issues/311 | 2017-05-22 12:14:32 | 80f3aa2e7bb9ac9691e62ec619e6b53259d78958

Import jsr305 and use it to mark @Nullable stuff.

The result is that IntelliJ + Kotlin correctly infers the right nullability
for Okio's APIs. I used IntelliJ's "Specify types explicitly" quick fix on
the 'a' and 'b' variables below and it did the right thing.

    fun specifyTypeExplicitly(source: BufferedSource) {
      val a: String? = source.readUtf8Line()
      val b: String = source.readUtf8LineStrict()
    } | 2017-05-02 02:39:52 | 2320c7f6ad9d05c1b65fb1e8cc43e257965792b4

Merge pull request #274 from larsgrefer/patch-1

endsWith -> suffix | 2016-12-07 22:57:38 | d412a4a2f9034a9bc59a8637e477822bd54d4504

endsWith -> suffix | 2016-12-07 22:54:57 | 032ad9948d5df69ee49367c90ad30f8823fc200b

Merge pull request #259 from square/jwilson.0829.substring

Fix a major bug where writeString() didn't always respect offsets. | 2016-08-29 12:54:40 | 927902b565479277178bdb7b0c986ce8beca07a3

Fix a major bug where writeString() didn't always respect offsets.

Closes: https://github.com/square/okio/issues/258 | 2016-08-29 12:16:03 | 8f5ae7376486990db25696304367f8e8b16f5534

Merge pull request #253 from square/jwilson.0814.fix_gzip_sink

Fix GzipSink for symmetry. | 2016-08-14 16:17:04 | 838a215b2bdbd77550ee876bc8870a61ad7219df

Merge pull request #252 from square/jwilson.0813.gzip_fix

Fix GzipSource to handle large files on AOSP. | 2016-08-14 04:32:14 | 4934879155da13b82be1775ac9840dbbd6b5c0cf

Merge pull request #247 from cketti/base64_encode_buffer_size_fix

Don't overallocate when base64-encoding. | 2016-08-07 00:11:57 | 834a35c2c8ff533f9e6d476714e7410c53cfd971

Import org.junit.Assert.fail instead of junit.framework.TestCase.fail

Use the JUnit 4 version in the couple of places were JUnit 3 imports
still existed; this makes the imports more consistent and also fixes
compilation if the JUnit 3 version is not available. | 2016-07-28 12:32:38 | 2f6e7783503aeb68d58fd7d50c47b7985d80203d

Merge pull request #227 from square/jwilson.0618.hashfail

Fix a major bug where HashingSource is incorrect for large writes. | 2016-06-19 01:58:13 | 2244048477890e33893613affc8f1fc82230c178

Fix a major bug where HashingSource is incorrect for large writes.

There was a bug where it wasn't traversing through the segments of
the buffer being hashed. This means that HashingSource was returning
incorrect answers for any writes that spanned multiple segment
boundaries.

The problem wasn't detected by our test cases because although
we have tests for non-uniform segments, and for buffers that
span multiple segments, we don't have tests for non-uniform
buffers that span multiple segments. This has been fixed too. | 2016-06-18 22:04:20 | 657278fff2ebb521659a330d0f7fc2b66d99cfbd

Merge pull request #210 from aried3r/patch-1

Fix typo in changelog | 2016-04-11 16:45:29 | 2c92d8261bc932473f4580bc62f22818a76acb47

Merge pull request #209 from chrisdoc/master

fix wrong changelog date for Version 1.7.0 | 2016-04-11 05:19:36 | 33cb196bb5182ebcad50303660f9e44635071696

fix wrong date for Version 1.7.0 | 2016-04-11 05:15:07 | 52dd9f5665f840dd4b6b4be93ac09f6c8252a791

Enable Gradle metadata publishing (#604)

* Enable Gradle metadata publishing

* Update Node plugin

* Add workaround for Node plugin bug

* Correct version of the workaround | 2019-05-01 15:33:28 | a54054aaaa264a7bcf190f625bbe0b98e0312ace

Merge pull request #603 from square/egorand/190430/fix-snapshot-publishing

Fix snapshot publishing command | 2019-04-30 17:03:19 | bdb1e33d249e578a5752dde3be1a6fa0ad389bc3

Merge pull request #602 from jaredsburrows/patch-1

Update README.md - fix broken proguard link | 2019-04-30 12:57:24 | cb440ffb53a2a4527675f738789aa75b298a1321

Update README.md - fix broken proguard link | 2019-04-30 04:10:46 | 90295b16aabea3ea560ac71fbeaef7bc86eba551

Peek the minimum number of bytes to return a result

The contract for read() is to return at least 1 byte, but we were
attempting to read the full request. That caused us to prematurely
do a blocking read on the upstream source.

This fixes that code to defer the blocking read.

Closes: https://github.com/square/okio/issues/594 | 2019-04-28 21:50:51 | 86e479564373d6872941bfc031c7169d9cb91417

Update japicmp plugin

This bumps japicmp to 0.13.1 which still doesn't contain the effectively-final fix, but at least provides compatibility with newer japicmp versions so that we can upgrade once that change is released. | 2019-04-05 13:57:48 | 031ea7a5118b8077904a6cdc12e273dab4e50b13

Kotlin Gradle MPP 1.3 (#544)

* Basic setup

* Ignore failing test

* Gradle 5.0

* Better native config

* Fix jvm tests

* JS testing setup

* Native config

* Use EAP dependencies

* Japicmp setup

* Correct path to japicmp report

* Basic JVM + AnimalSniffer setup

* Enable samples module

* Use jvmWithJava for running Java tests

* Include more Native platforms to force test task generation

* Use internal UTF-8 decoder for Kotlin/Native

* Kotlin 1.3.20

* Gradle 5.1

* Move JMH setup into a separate module

* Properly configure jmhJar task

* Remove old jvm build.gradle

* Replace publishing plugin with SQLDelight's custom script

* Use default artifactId for JVM target

* Revert JVM build.gradle rename, use new DSL for defining targets

* Remove old module definitions in settings

* Feedback fixes | 2019-01-30 12:50:19 | 0078fca7b325a8d9454715ada316e0a3d6e99115

Merge pull request #542 from NightlyNexus/patch-1

Fix some indices in Buffer.UnsafeCursor docs. | 2019-01-16 03:02:01 | 7dd5bde7b0eb160ecdcb2a32477b8e9f313a0b8b

Merge pull request #504 from square/egorand/0830/ktlint-fixes

Fix ktlint issues in platform modules | 2018-09-01 03:43:34 | ea0dd569ef0cbe3cc6288264c36bc6fde02074af

Hide Base64, ByteStringKt, Platform, and Util code from Java

These are 'internal' in Kotlin but 'public' to Java callers. Changing
class names to prefix with '-' prevents Java from calling through. | 2018-08-26 13:45:15 | b518b5b2cf40147105a30bd37cf91c810ff59450

Make Buffer exceptions consistent with RealBufferedSource

This is inspired by ksperling's work on improving exception-consistency
between Buffer and RealBufferedSource. I wasn't willing to make an
exception-signature change for a 1.x release, but the 2.x release is a
good opportunity to fix this longstanding problem. | 2018-07-24 20:55:10 | 487a1f2392d8a9f017dceaca15656a82ab4ed46d

Retain interrupted state when throwing InterruptedIOException (Okio 2.x)

This fixes Okio 2.x. A separate fix is required for Okio 1.x. | 2018-07-06 02:35:23 | 264829dae36198c2e5454a6c2ae1d4aa208c5815

Merge pull request #463 from GianfrancoMS/patch-1

Update README.md | 2018-06-04 20:06:26 | fffc9d42244254899bb934ca400c8a88a65ea224

Merge pull request #462 from hendrawd/patch-1

Update README.md | 2018-05-29 17:14:54 | 105c2411448a726fe2d2a90c2e13d7e30ff79f43

Merge pull request #449 from yinyinnie/patch-1

Update README.md | 2018-05-13 15:11:04 | 4b567e1f0dfeeb6c506f5b2497444d8de8ecbc47

Merge pull request #424 from square/jwilson.0430.no_performance_bug

Add a test for the off-by-one bug in Buffer.seek(). | 2018-05-02 13:03:23 | bf4ae6cc0b967204ebdc629b62773fa8202962fc

Add a test for the off-by-one bug in Buffer.seek().

There was a performance bug here, where it would return one segment too early. | 2018-05-01 03:53:32 | c2b251cc189f128071d6357e30ccba6a091adadf

Merge pull request #312 from square/jwilson.0522.actually_split

Fix a performance bug in AsyncTimeout.sink().write(). | 2017-05-22 14:42:26 | 20e259c08af6c96508387540a5ea53f89b1d01f5

Fix a performance bug in AsyncTimeout.sink().write().

Previously the behavior was correct but the intended behavior was less
efficient than intended. In particular there were two problems:

 * The loop to find a segment boundary may have made more iterations
   than necessary if the first segment was very small
 * The sink write may not have been on a segment boundary, causing more
   data than necessary to be copied.

Closes: https://github.com/square/okio/issues/311 | 2017-05-22 12:14:32 | 80f3aa2e7bb9ac9691e62ec619e6b53259d78958

Import jsr305 and use it to mark @Nullable stuff.

The result is that IntelliJ + Kotlin correctly infers the right nullability
for Okio's APIs. I used IntelliJ's "Specify types explicitly" quick fix on
the 'a' and 'b' variables below and it did the right thing.

    fun specifyTypeExplicitly(source: BufferedSource) {
      val a: String? = source.readUtf8Line()
      val b: String = source.readUtf8LineStrict()
    } | 2017-05-02 02:39:52 | 2320c7f6ad9d05c1b65fb1e8cc43e257965792b4

Merge pull request #274 from larsgrefer/patch-1

endsWith -> suffix | 2016-12-07 22:57:38 | d412a4a2f9034a9bc59a8637e477822bd54d4504

endsWith -> suffix | 2016-12-07 22:54:57 | 032ad9948d5df69ee49367c90ad30f8823fc200b

Merge pull request #259 from square/jwilson.0829.substring

Fix a major bug where writeString() didn't always respect offsets. | 2016-08-29 12:54:40 | 927902b565479277178bdb7b0c986ce8beca07a3

Fix a major bug where writeString() didn't always respect offsets.

Closes: https://github.com/square/okio/issues/258 | 2016-08-29 12:16:03 | 8f5ae7376486990db25696304367f8e8b16f5534

Merge pull request #253 from square/jwilson.0814.fix_gzip_sink

Fix GzipSink for symmetry. | 2016-08-14 16:17:04 | 838a215b2bdbd77550ee876bc8870a61ad7219df

Merge pull request #252 from square/jwilson.0813.gzip_fix

Fix GzipSource to handle large files on AOSP. | 2016-08-14 04:32:14 | 4934879155da13b82be1775ac9840dbbd6b5c0cf

Merge pull request #247 from cketti/base64_encode_buffer_size_fix

Don't overallocate when base64-encoding. | 2016-08-07 00:11:57 | 834a35c2c8ff533f9e6d476714e7410c53cfd971

Import org.junit.Assert.fail instead of junit.framework.TestCase.fail

Use the JUnit 4 version in the couple of places were JUnit 3 imports
still existed; this makes the imports more consistent and also fixes
compilation if the JUnit 3 version is not available. | 2016-07-28 12:32:38 | 2f6e7783503aeb68d58fd7d50c47b7985d80203d

Merge pull request #227 from square/jwilson.0618.hashfail

Fix a major bug where HashingSource is incorrect for large writes. | 2016-06-19 01:58:13 | 2244048477890e33893613affc8f1fc82230c178

Fix a major bug where HashingSource is incorrect for large writes.

There was a bug where it wasn't traversing through the segments of
the buffer being hashed. This means that HashingSource was returning
incorrect answers for any writes that spanned multiple segment
boundaries.

The problem wasn't detected by our test cases because although
we have tests for non-uniform segments, and for buffers that
span multiple segments, we don't have tests for non-uniform
buffers that span multiple segments. This has been fixed too. | 2016-06-18 22:04:20 | 657278fff2ebb521659a330d0f7fc2b66d99cfbd

Merge pull request #210 from aried3r/patch-1

Fix typo in changelog | 2016-04-11 16:45:29 | 2c92d8261bc932473f4580bc62f22818a76acb47

Merge pull request #209 from chrisdoc/master

fix wrong changelog date for Version 1.7.0 | 2016-04-11 05:19:36 | 33cb196bb5182ebcad50303660f9e44635071696

fix wrong date for Version 1.7.0 | 2016-04-11 05:15:07 | 52dd9f5665f840dd4b6b4be93ac09f6c8252a791

Merge pull request #504 from square/egorand/0830/ktlint-fixes

Fix ktlint issues in platform modules | 2018-09-01 03:43:34 | ea0dd569ef0cbe3cc6288264c36bc6fde02074af

Hide Base64, ByteStringKt, Platform, and Util code from Java

These are 'internal' in Kotlin but 'public' to Java callers. Changing
class names to prefix with '-' prevents Java from calling through. | 2018-08-26 13:45:15 | b518b5b2cf40147105a30bd37cf91c810ff59450

Make Buffer exceptions consistent with RealBufferedSource

This is inspired by ksperling's work on improving exception-consistency
between Buffer and RealBufferedSource. I wasn't willing to make an
exception-signature change for a 1.x release, but the 2.x release is a
good opportunity to fix this longstanding problem. | 2018-07-24 20:55:10 | 487a1f2392d8a9f017dceaca15656a82ab4ed46d

Retain interrupted state when throwing InterruptedIOException (Okio 2.x)

This fixes Okio 2.x. A separate fix is required for Okio 1.x. | 2018-07-06 02:35:23 | 264829dae36198c2e5454a6c2ae1d4aa208c5815

Merge pull request #463 from GianfrancoMS/patch-1

Update README.md | 2018-06-04 20:06:26 | fffc9d42244254899bb934ca400c8a88a65ea224

Merge pull request #462 from hendrawd/patch-1

Update README.md | 2018-05-29 17:14:54 | 105c2411448a726fe2d2a90c2e13d7e30ff79f43

Merge pull request #449 from yinyinnie/patch-1

Update README.md | 2018-05-13 15:11:04 | 4b567e1f0dfeeb6c506f5b2497444d8de8ecbc47

Merge pull request #424 from square/jwilson.0430.no_performance_bug

Add a test for the off-by-one bug in Buffer.seek(). | 2018-05-02 13:03:23 | bf4ae6cc0b967204ebdc629b62773fa8202962fc

Add a test for the off-by-one bug in Buffer.seek().

There was a performance bug here, where it would return one segment too early. | 2018-05-01 03:53:32 | c2b251cc189f128071d6357e30ccba6a091adadf

Merge pull request #312 from square/jwilson.0522.actually_split

Fix a performance bug in AsyncTimeout.sink().write(). | 2017-05-22 14:42:26 | 20e259c08af6c96508387540a5ea53f89b1d01f5

Fix a performance bug in AsyncTimeout.sink().write().

Previously the behavior was correct but the intended behavior was less
efficient than intended. In particular there were two problems:

 * The loop to find a segment boundary may have made more iterations
   than necessary if the first segment was very small
 * The sink write may not have been on a segment boundary, causing more
   data than necessary to be copied.

Closes: https://github.com/square/okio/issues/311 | 2017-05-22 12:14:32 | 80f3aa2e7bb9ac9691e62ec619e6b53259d78958

Import jsr305 and use it to mark @Nullable stuff.

The result is that IntelliJ + Kotlin correctly infers the right nullability
for Okio's APIs. I used IntelliJ's "Specify types explicitly" quick fix on
the 'a' and 'b' variables below and it did the right thing.

    fun specifyTypeExplicitly(source: BufferedSource) {
      val a: String? = source.readUtf8Line()
      val b: String = source.readUtf8LineStrict()
    } | 2017-05-02 02:39:52 | 2320c7f6ad9d05c1b65fb1e8cc43e257965792b4

Merge pull request #274 from larsgrefer/patch-1

endsWith -> suffix | 2016-12-07 22:57:38 | d412a4a2f9034a9bc59a8637e477822bd54d4504

endsWith -> suffix | 2016-12-07 22:54:57 | 032ad9948d5df69ee49367c90ad30f8823fc200b

Merge pull request #259 from square/jwilson.0829.substring

Fix a major bug where writeString() didn't always respect offsets. | 2016-08-29 12:54:40 | 927902b565479277178bdb7b0c986ce8beca07a3

Fix a major bug where writeString() didn't always respect offsets.

Closes: https://github.com/square/okio/issues/258 | 2016-08-29 12:16:03 | 8f5ae7376486990db25696304367f8e8b16f5534

Merge pull request #253 from square/jwilson.0814.fix_gzip_sink

Fix GzipSink for symmetry. | 2016-08-14 16:17:04 | 838a215b2bdbd77550ee876bc8870a61ad7219df

Merge pull request #252 from square/jwilson.0813.gzip_fix

Fix GzipSource to handle large files on AOSP. | 2016-08-14 04:32:14 | 4934879155da13b82be1775ac9840dbbd6b5c0cf

Merge pull request #247 from cketti/base64_encode_buffer_size_fix

Don't overallocate when base64-encoding. | 2016-08-07 00:11:57 | 834a35c2c8ff533f9e6d476714e7410c53cfd971

Import org.junit.Assert.fail instead of junit.framework.TestCase.fail

Use the JUnit 4 version in the couple of places were JUnit 3 imports
still existed; this makes the imports more consistent and also fixes
compilation if the JUnit 3 version is not available. | 2016-07-28 12:32:38 | 2f6e7783503aeb68d58fd7d50c47b7985d80203d

Merge pull request #227 from square/jwilson.0618.hashfail

Fix a major bug where HashingSource is incorrect for large writes. | 2016-06-19 01:58:13 | 2244048477890e33893613affc8f1fc82230c178

Fix a major bug where HashingSource is incorrect for large writes.

There was a bug where it wasn't traversing through the segments of
the buffer being hashed. This means that HashingSource was returning
incorrect answers for any writes that spanned multiple segment
boundaries.

The problem wasn't detected by our test cases because although
we have tests for non-uniform segments, and for buffers that
span multiple segments, we don't have tests for non-uniform
buffers that span multiple segments. This has been fixed too. | 2016-06-18 22:04:20 | 657278fff2ebb521659a330d0f7fc2b66d99cfbd

Merge pull request #210 from aried3r/patch-1

Fix typo in changelog | 2016-04-11 16:45:29 | 2c92d8261bc932473f4580bc62f22818a76acb47

Merge pull request #209 from chrisdoc/master

fix wrong changelog date for Version 1.7.0 | 2016-04-11 05:19:36 | 33cb196bb5182ebcad50303660f9e44635071696

fix wrong date for Version 1.7.0 | 2016-04-11 05:15:07 | 52dd9f5665f840dd4b6b4be93ac09f6c8252a791

Peek the minimum number of bytes to return a result (1.x branch)

The contract for read() is to return at least 1 byte, but we were
attempting to read the full request. That caused us to prematurely
do a blocking read on the upstream source.

This fixes that code to defer the blocking read.

Closes: https://github.com/square/okio/issues/594 | 2019-04-28 21:50:51 | c7d18f1577aba178e76289f111337867761abb72

Retain interrupted state when throwing InterruptedIOException

This fixes Okio 1.x. A separate fix is required for Okio 2.x. | 2018-07-06 02:29:16 | 398a695a7d63f9b2647d9d71400a244a3939a362

Merge pull request #312 from square/jwilson.0522.actually_split

Fix a performance bug in AsyncTimeout.sink().write(). | 2017-05-22 14:42:26 | 20e259c08af6c96508387540a5ea53f89b1d01f5

Fix a performance bug in AsyncTimeout.sink().write().

Previously the behavior was correct but the intended behavior was less
efficient than intended. In particular there were two problems:

 * The loop to find a segment boundary may have made more iterations
   than necessary if the first segment was very small
 * The sink write may not have been on a segment boundary, causing more
   data than necessary to be copied.

Closes: https://github.com/square/okio/issues/311 | 2017-05-22 12:14:32 | 80f3aa2e7bb9ac9691e62ec619e6b53259d78958

Import jsr305 and use it to mark @Nullable stuff.

The result is that IntelliJ + Kotlin correctly infers the right nullability
for Okio's APIs. I used IntelliJ's "Specify types explicitly" quick fix on
the 'a' and 'b' variables below and it did the right thing.

    fun specifyTypeExplicitly(source: BufferedSource) {
      val a: String? = source.readUtf8Line()
      val b: String = source.readUtf8LineStrict()
    } | 2017-05-02 02:39:52 | 2320c7f6ad9d05c1b65fb1e8cc43e257965792b4

Merge pull request #274 from larsgrefer/patch-1

endsWith -> suffix | 2016-12-07 22:57:38 | d412a4a2f9034a9bc59a8637e477822bd54d4504

endsWith -> suffix | 2016-12-07 22:54:57 | 032ad9948d5df69ee49367c90ad30f8823fc200b

Merge pull request #259 from square/jwilson.0829.substring

Fix a major bug where writeString() didn't always respect offsets. | 2016-08-29 12:54:40 | 927902b565479277178bdb7b0c986ce8beca07a3

Fix a major bug where writeString() didn't always respect offsets.

Closes: https://github.com/square/okio/issues/258 | 2016-08-29 12:16:03 | 8f5ae7376486990db25696304367f8e8b16f5534

Merge pull request #253 from square/jwilson.0814.fix_gzip_sink

Fix GzipSink for symmetry. | 2016-08-14 16:17:04 | 838a215b2bdbd77550ee876bc8870a61ad7219df

Merge pull request #252 from square/jwilson.0813.gzip_fix

Fix GzipSource to handle large files on AOSP. | 2016-08-14 04:32:14 | 4934879155da13b82be1775ac9840dbbd6b5c0cf

Merge pull request #247 from cketti/base64_encode_buffer_size_fix

Don't overallocate when base64-encoding. | 2016-08-07 00:11:57 | 834a35c2c8ff533f9e6d476714e7410c53cfd971

Import org.junit.Assert.fail instead of junit.framework.TestCase.fail

Use the JUnit 4 version in the couple of places were JUnit 3 imports
still existed; this makes the imports more consistent and also fixes
compilation if the JUnit 3 version is not available. | 2016-07-28 12:32:38 | 2f6e7783503aeb68d58fd7d50c47b7985d80203d

Merge pull request #227 from square/jwilson.0618.hashfail

Fix a major bug where HashingSource is incorrect for large writes. | 2016-06-19 01:58:13 | 2244048477890e33893613affc8f1fc82230c178

Fix a major bug where HashingSource is incorrect for large writes.

There was a bug where it wasn't traversing through the segments of
the buffer being hashed. This means that HashingSource was returning
incorrect answers for any writes that spanned multiple segment
boundaries.

The problem wasn't detected by our test cases because although
we have tests for non-uniform segments, and for buffers that
span multiple segments, we don't have tests for non-uniform
buffers that span multiple segments. This has been fixed too. | 2016-06-18 22:04:20 | 657278fff2ebb521659a330d0f7fc2b66d99cfbd

Merge pull request #210 from aried3r/patch-1

Fix typo in changelog | 2016-04-11 16:45:29 | 2c92d8261bc932473f4580bc62f22818a76acb47

Merge pull request #209 from chrisdoc/master

fix wrong changelog date for Version 1.7.0 | 2016-04-11 05:19:36 | 33cb196bb5182ebcad50303660f9e44635071696

fix wrong date for Version 1.7.0 | 2016-04-11 05:15:07 | 52dd9f5665f840dd4b6b4be93ac09f6c8252a791

Merge pull request #706 from square/egorand/200310/bug-url

Update the URL for the actual typealias issue | 2020-03-20 00:57:34 | 4e9cf347debb0dcc217ccda034aa513479d5ee47

Merge pull request #695 from square/jwilson.0128.bugcrowd

Migrate bug bounty URL to bugcrowd | 2020-01-28 20:31:51 | 33db3f1414089a8ab693a54f5f10d96ce00d9cf1

Migrate bug bounty URL to bugcrowd | 2020-01-28 18:26:31 | e0609669b213ae90171aa68a5d6a5e3b49f3aac9

Merge pull request #655 from emanonwzy/fix_readme

Fix socks url in README | 2019-09-10 10:59:15 | 273357a2b70d815e30a8a4bde520f6bb8204e1cc

Enable Gradle metadata publishing (#604)

* Enable Gradle metadata publishing

* Update Node plugin

* Add workaround for Node plugin bug

* Correct version of the workaround | 2019-05-01 15:33:28 | a54054aaaa264a7bcf190f625bbe0b98e0312ace

Merge pull request #603 from square/egorand/190430/fix-snapshot-publishing

Fix snapshot publishing command | 2019-04-30 17:03:19 | bdb1e33d249e578a5752dde3be1a6fa0ad389bc3

Merge pull request #602 from jaredsburrows/patch-1

Update README.md - fix broken proguard link | 2019-04-30 12:57:24 | cb440ffb53a2a4527675f738789aa75b298a1321

Update README.md - fix broken proguard link | 2019-04-30 04:10:46 | 90295b16aabea3ea560ac71fbeaef7bc86eba551

Peek the minimum number of bytes to return a result

The contract for read() is to return at least 1 byte, but we were
attempting to read the full request. That caused us to prematurely
do a blocking read on the upstream source.

This fixes that code to defer the blocking read.

Closes: https://github.com/square/okio/issues/594 | 2019-04-28 21:50:51 | 86e479564373d6872941bfc031c7169d9cb91417

Update japicmp plugin

This bumps japicmp to 0.13.1 which still doesn't contain the effectively-final fix, but at least provides compatibility with newer japicmp versions so that we can upgrade once that change is released. | 2019-04-05 13:57:48 | 031ea7a5118b8077904a6cdc12e273dab4e50b13

Kotlin Gradle MPP 1.3 (#544)

* Basic setup

* Ignore failing test

* Gradle 5.0

* Better native config

* Fix jvm tests

* JS testing setup

* Native config

* Use EAP dependencies

* Japicmp setup

* Correct path to japicmp report

* Basic JVM + AnimalSniffer setup

* Enable samples module

* Use jvmWithJava for running Java tests

* Include more Native platforms to force test task generation

* Use internal UTF-8 decoder for Kotlin/Native

* Kotlin 1.3.20

* Gradle 5.1

* Move JMH setup into a separate module

* Properly configure jmhJar task

* Remove old jvm build.gradle

* Replace publishing plugin with SQLDelight's custom script

* Use default artifactId for JVM target

* Revert JVM build.gradle rename, use new DSL for defining targets

* Remove old module definitions in settings

* Feedback fixes | 2019-01-30 12:50:19 | 0078fca7b325a8d9454715ada316e0a3d6e99115

Merge pull request #542 from NightlyNexus/patch-1

Fix some indices in Buffer.UnsafeCursor docs. | 2019-01-16 03:02:01 | 7dd5bde7b0eb160ecdcb2a32477b8e9f313a0b8b

Merge pull request #504 from square/egorand/0830/ktlint-fixes

Fix ktlint issues in platform modules | 2018-09-01 03:43:34 | ea0dd569ef0cbe3cc6288264c36bc6fde02074af

Hide Base64, ByteStringKt, Platform, and Util code from Java

These are 'internal' in Kotlin but 'public' to Java callers. Changing
class names to prefix with '-' prevents Java from calling through. | 2018-08-26 13:45:15 | b518b5b2cf40147105a30bd37cf91c810ff59450

Make Buffer exceptions consistent with RealBufferedSource

This is inspired by ksperling's work on improving exception-consistency
between Buffer and RealBufferedSource. I wasn't willing to make an
exception-signature change for a 1.x release, but the 2.x release is a
good opportunity to fix this longstanding problem. | 2018-07-24 20:55:10 | 487a1f2392d8a9f017dceaca15656a82ab4ed46d

Retain interrupted state when throwing InterruptedIOException (Okio 2.x)

This fixes Okio 2.x. A separate fix is required for Okio 1.x. | 2018-07-06 02:35:23 | 264829dae36198c2e5454a6c2ae1d4aa208c5815

Merge pull request #463 from GianfrancoMS/patch-1

Update README.md | 2018-06-04 20:06:26 | fffc9d42244254899bb934ca400c8a88a65ea224

Merge pull request #462 from hendrawd/patch-1

Update README.md | 2018-05-29 17:14:54 | 105c2411448a726fe2d2a90c2e13d7e30ff79f43

Merge pull request #449 from yinyinnie/patch-1

Update README.md | 2018-05-13 15:11:04 | 4b567e1f0dfeeb6c506f5b2497444d8de8ecbc47

Merge pull request #424 from square/jwilson.0430.no_performance_bug

Add a test for the off-by-one bug in Buffer.seek(). | 2018-05-02 13:03:23 | bf4ae6cc0b967204ebdc629b62773fa8202962fc

Add a test for the off-by-one bug in Buffer.seek().

There was a performance bug here, where it would return one segment too early. | 2018-05-01 03:53:32 | c2b251cc189f128071d6357e30ccba6a091adadf

Merge pull request #312 from square/jwilson.0522.actually_split

Fix a performance bug in AsyncTimeout.sink().write(). | 2017-05-22 14:42:26 | 20e259c08af6c96508387540a5ea53f89b1d01f5

Fix a performance bug in AsyncTimeout.sink().write().

Previously the behavior was correct but the intended behavior was less
efficient than intended. In particular there were two problems:

 * The loop to find a segment boundary may have made more iterations
   than necessary if the first segment was very small
 * The sink write may not have been on a segment boundary, causing more
   data than necessary to be copied.

Closes: https://github.com/square/okio/issues/311 | 2017-05-22 12:14:32 | 80f3aa2e7bb9ac9691e62ec619e6b53259d78958

Import jsr305 and use it to mark @Nullable stuff.

The result is that IntelliJ + Kotlin correctly infers the right nullability
for Okio's APIs. I used IntelliJ's "Specify types explicitly" quick fix on
the 'a' and 'b' variables below and it did the right thing.

    fun specifyTypeExplicitly(source: BufferedSource) {
      val a: String? = source.readUtf8Line()
      val b: String = source.readUtf8LineStrict()
    } | 2017-05-02 02:39:52 | 2320c7f6ad9d05c1b65fb1e8cc43e257965792b4

Merge pull request #274 from larsgrefer/patch-1

endsWith -> suffix | 2016-12-07 22:57:38 | d412a4a2f9034a9bc59a8637e477822bd54d4504

endsWith -> suffix | 2016-12-07 22:54:57 | 032ad9948d5df69ee49367c90ad30f8823fc200b

Merge pull request #259 from square/jwilson.0829.substring

Fix a major bug where writeString() didn't always respect offsets. | 2016-08-29 12:54:40 | 927902b565479277178bdb7b0c986ce8beca07a3

Fix a major bug where writeString() didn't always respect offsets.

Closes: https://github.com/square/okio/issues/258 | 2016-08-29 12:16:03 | 8f5ae7376486990db25696304367f8e8b16f5534

Merge pull request #253 from square/jwilson.0814.fix_gzip_sink

Fix GzipSink for symmetry. | 2016-08-14 16:17:04 | 838a215b2bdbd77550ee876bc8870a61ad7219df

Merge pull request #252 from square/jwilson.0813.gzip_fix

Fix GzipSource to handle large files on AOSP. | 2016-08-14 04:32:14 | 4934879155da13b82be1775ac9840dbbd6b5c0cf

Merge pull request #247 from cketti/base64_encode_buffer_size_fix

Don't overallocate when base64-encoding. | 2016-08-07 00:11:57 | 834a35c2c8ff533f9e6d476714e7410c53cfd971

Import org.junit.Assert.fail instead of junit.framework.TestCase.fail

Use the JUnit 4 version in the couple of places were JUnit 3 imports
still existed; this makes the imports more consistent and also fixes
compilation if the JUnit 3 version is not available. | 2016-07-28 12:32:38 | 2f6e7783503aeb68d58fd7d50c47b7985d80203d

Merge pull request #227 from square/jwilson.0618.hashfail

Fix a major bug where HashingSource is incorrect for large writes. | 2016-06-19 01:58:13 | 2244048477890e33893613affc8f1fc82230c178

Fix a major bug where HashingSource is incorrect for large writes.

There was a bug where it wasn't traversing through the segments of
the buffer being hashed. This means that HashingSource was returning
incorrect answers for any writes that spanned multiple segment
boundaries.

The problem wasn't detected by our test cases because although
we have tests for non-uniform segments, and for buffers that
span multiple segments, we don't have tests for non-uniform
buffers that span multiple segments. This has been fixed too. | 2016-06-18 22:04:20 | 657278fff2ebb521659a330d0f7fc2b66d99cfbd

Merge pull request #210 from aried3r/patch-1

Fix typo in changelog | 2016-04-11 16:45:29 | 2c92d8261bc932473f4580bc62f22818a76acb47

Merge pull request #209 from chrisdoc/master

fix wrong changelog date for Version 1.7.0 | 2016-04-11 05:19:36 | 33cb196bb5182ebcad50303660f9e44635071696

fix wrong date for Version 1.7.0 | 2016-04-11 05:15:07 | 52dd9f5665f840dd4b6b4be93ac09f6c8252a791

Merge pull request #694 from edenrox/patch-2

Switch travis to use openjdk8 | 2020-01-13 21:33:25 | 5e92577b611ade4fc40cece2f10e9af1cd7cbb4f

Peek the minimum number of bytes to return a result (1.x branch)

The contract for read() is to return at least 1 byte, but we were
attempting to read the full request. That caused us to prematurely
do a blocking read on the upstream source.

This fixes that code to defer the blocking read.

Closes: https://github.com/square/okio/issues/594 | 2019-04-28 21:50:51 | c7d18f1577aba178e76289f111337867761abb72

Retain interrupted state when throwing InterruptedIOException

This fixes Okio 1.x. A separate fix is required for Okio 2.x. | 2018-07-06 02:29:16 | 398a695a7d63f9b2647d9d71400a244a3939a362

Merge pull request #312 from square/jwilson.0522.actually_split

Fix a performance bug in AsyncTimeout.sink().write(). | 2017-05-22 14:42:26 | 20e259c08af6c96508387540a5ea53f89b1d01f5

Fix a performance bug in AsyncTimeout.sink().write().

Previously the behavior was correct but the intended behavior was less
efficient than intended. In particular there were two problems:

 * The loop to find a segment boundary may have made more iterations
   than necessary if the first segment was very small
 * The sink write may not have been on a segment boundary, causing more
   data than necessary to be copied.

Closes: https://github.com/square/okio/issues/311 | 2017-05-22 12:14:32 | 80f3aa2e7bb9ac9691e62ec619e6b53259d78958

Import jsr305 and use it to mark @Nullable stuff.

The result is that IntelliJ + Kotlin correctly infers the right nullability
for Okio's APIs. I used IntelliJ's "Specify types explicitly" quick fix on
the 'a' and 'b' variables below and it did the right thing.

    fun specifyTypeExplicitly(source: BufferedSource) {
      val a: String? = source.readUtf8Line()
      val b: String = source.readUtf8LineStrict()
    } | 2017-05-02 02:39:52 | 2320c7f6ad9d05c1b65fb1e8cc43e257965792b4

Merge pull request #274 from larsgrefer/patch-1

endsWith -> suffix | 2016-12-07 22:57:38 | d412a4a2f9034a9bc59a8637e477822bd54d4504

endsWith -> suffix | 2016-12-07 22:54:57 | 032ad9948d5df69ee49367c90ad30f8823fc200b

Merge pull request #259 from square/jwilson.0829.substring

Fix a major bug where writeString() didn't always respect offsets. | 2016-08-29 12:54:40 | 927902b565479277178bdb7b0c986ce8beca07a3

Fix a major bug where writeString() didn't always respect offsets.

Closes: https://github.com/square/okio/issues/258 | 2016-08-29 12:16:03 | 8f5ae7376486990db25696304367f8e8b16f5534

Merge pull request #253 from square/jwilson.0814.fix_gzip_sink

Fix GzipSink for symmetry. | 2016-08-14 16:17:04 | 838a215b2bdbd77550ee876bc8870a61ad7219df

Merge pull request #252 from square/jwilson.0813.gzip_fix

Fix GzipSource to handle large files on AOSP. | 2016-08-14 04:32:14 | 4934879155da13b82be1775ac9840dbbd6b5c0cf

Merge pull request #247 from cketti/base64_encode_buffer_size_fix

Don't overallocate when base64-encoding. | 2016-08-07 00:11:57 | 834a35c2c8ff533f9e6d476714e7410c53cfd971

Import org.junit.Assert.fail instead of junit.framework.TestCase.fail

Use the JUnit 4 version in the couple of places were JUnit 3 imports
still existed; this makes the imports more consistent and also fixes
compilation if the JUnit 3 version is not available. | 2016-07-28 12:32:38 | 2f6e7783503aeb68d58fd7d50c47b7985d80203d

Merge pull request #227 from square/jwilson.0618.hashfail

Fix a major bug where HashingSource is incorrect for large writes. | 2016-06-19 01:58:13 | 2244048477890e33893613affc8f1fc82230c178

Fix a major bug where HashingSource is incorrect for large writes.

There was a bug where it wasn't traversing through the segments of
the buffer being hashed. This means that HashingSource was returning
incorrect answers for any writes that spanned multiple segment
boundaries.

The problem wasn't detected by our test cases because although
we have tests for non-uniform segments, and for buffers that
span multiple segments, we don't have tests for non-uniform
buffers that span multiple segments. This has been fixed too. | 2016-06-18 22:04:20 | 657278fff2ebb521659a330d0f7fc2b66d99cfbd

Merge pull request #210 from aried3r/patch-1

Fix typo in changelog | 2016-04-11 16:45:29 | 2c92d8261bc932473f4580bc62f22818a76acb47

Merge pull request #209 from chrisdoc/master

fix wrong changelog date for Version 1.7.0 | 2016-04-11 05:19:36 | 33cb196bb5182ebcad50303660f9e44635071696

fix wrong date for Version 1.7.0 | 2016-04-11 05:15:07 | 52dd9f5665f840dd4b6b4be93ac09f6c8252a791

Merge pull request #312 from square/jwilson.0522.actually_split

Fix a performance bug in AsyncTimeout.sink().write(). | 2017-05-22 14:42:26 | 20e259c08af6c96508387540a5ea53f89b1d01f5

Fix a performance bug in AsyncTimeout.sink().write().

Previously the behavior was correct but the intended behavior was less
efficient than intended. In particular there were two problems:

 * The loop to find a segment boundary may have made more iterations
   than necessary if the first segment was very small
 * The sink write may not have been on a segment boundary, causing more
   data than necessary to be copied.

Closes: https://github.com/square/okio/issues/311 | 2017-05-22 12:14:32 | 80f3aa2e7bb9ac9691e62ec619e6b53259d78958

Import jsr305 and use it to mark @Nullable stuff.

The result is that IntelliJ + Kotlin correctly infers the right nullability
for Okio's APIs. I used IntelliJ's "Specify types explicitly" quick fix on
the 'a' and 'b' variables below and it did the right thing.

    fun specifyTypeExplicitly(source: BufferedSource) {
      val a: String? = source.readUtf8Line()
      val b: String = source.readUtf8LineStrict()
    } | 2017-05-02 02:39:52 | 2320c7f6ad9d05c1b65fb1e8cc43e257965792b4

Merge pull request #274 from larsgrefer/patch-1

endsWith -> suffix | 2016-12-07 22:57:38 | d412a4a2f9034a9bc59a8637e477822bd54d4504

endsWith -> suffix | 2016-12-07 22:54:57 | 032ad9948d5df69ee49367c90ad30f8823fc200b

Merge pull request #259 from square/jwilson.0829.substring

Fix a major bug where writeString() didn't always respect offsets. | 2016-08-29 12:54:40 | 927902b565479277178bdb7b0c986ce8beca07a3

Fix a major bug where writeString() didn't always respect offsets.

Closes: https://github.com/square/okio/issues/258 | 2016-08-29 12:16:03 | 8f5ae7376486990db25696304367f8e8b16f5534

Merge pull request #253 from square/jwilson.0814.fix_gzip_sink

Fix GzipSink for symmetry. | 2016-08-14 16:17:04 | 838a215b2bdbd77550ee876bc8870a61ad7219df

Merge pull request #252 from square/jwilson.0813.gzip_fix

Fix GzipSource to handle large files on AOSP. | 2016-08-14 04:32:14 | 4934879155da13b82be1775ac9840dbbd6b5c0cf

Merge pull request #247 from cketti/base64_encode_buffer_size_fix

Don't overallocate when base64-encoding. | 2016-08-07 00:11:57 | 834a35c2c8ff533f9e6d476714e7410c53cfd971

Import org.junit.Assert.fail instead of junit.framework.TestCase.fail

Use the JUnit 4 version in the couple of places were JUnit 3 imports
still existed; this makes the imports more consistent and also fixes
compilation if the JUnit 3 version is not available. | 2016-07-28 12:32:38 | 2f6e7783503aeb68d58fd7d50c47b7985d80203d

Merge pull request #227 from square/jwilson.0618.hashfail

Fix a major bug where HashingSource is incorrect for large writes. | 2016-06-19 01:58:13 | 2244048477890e33893613affc8f1fc82230c178

Fix a major bug where HashingSource is incorrect for large writes.

There was a bug where it wasn't traversing through the segments of
the buffer being hashed. This means that HashingSource was returning
incorrect answers for any writes that spanned multiple segment
boundaries.

The problem wasn't detected by our test cases because although
we have tests for non-uniform segments, and for buffers that
span multiple segments, we don't have tests for non-uniform
buffers that span multiple segments. This has been fixed too. | 2016-06-18 22:04:20 | 657278fff2ebb521659a330d0f7fc2b66d99cfbd

Merge pull request #210 from aried3r/patch-1

Fix typo in changelog | 2016-04-11 16:45:29 | 2c92d8261bc932473f4580bc62f22818a76acb47

Merge pull request #209 from chrisdoc/master

fix wrong changelog date for Version 1.7.0 | 2016-04-11 05:19:36 | 33cb196bb5182ebcad50303660f9e44635071696

fix wrong date for Version 1.7.0 | 2016-04-11 05:15:07 | 52dd9f5665f840dd4b6b4be93ac09f6c8252a791

Merge pull request #655 from emanonwzy/fix_readme

Fix socks url in README | 2019-09-10 10:59:15 | 273357a2b70d815e30a8a4bde520f6bb8204e1cc

Enable Gradle metadata publishing (#604)

* Enable Gradle metadata publishing

* Update Node plugin

* Add workaround for Node plugin bug

* Correct version of the workaround | 2019-05-01 15:33:28 | a54054aaaa264a7bcf190f625bbe0b98e0312ace

Merge pull request #603 from square/egorand/190430/fix-snapshot-publishing

Fix snapshot publishing command | 2019-04-30 17:03:19 | bdb1e33d249e578a5752dde3be1a6fa0ad389bc3

Merge pull request #602 from jaredsburrows/patch-1

Update README.md - fix broken proguard link | 2019-04-30 12:57:24 | cb440ffb53a2a4527675f738789aa75b298a1321

Update README.md - fix broken proguard link | 2019-04-30 04:10:46 | 90295b16aabea3ea560ac71fbeaef7bc86eba551

Peek the minimum number of bytes to return a result

The contract for read() is to return at least 1 byte, but we were
attempting to read the full request. That caused us to prematurely
do a blocking read on the upstream source.

This fixes that code to defer the blocking read.

Closes: https://github.com/square/okio/issues/594 | 2019-04-28 21:50:51 | 86e479564373d6872941bfc031c7169d9cb91417

Update japicmp plugin

This bumps japicmp to 0.13.1 which still doesn't contain the effectively-final fix, but at least provides compatibility with newer japicmp versions so that we can upgrade once that change is released. | 2019-04-05 13:57:48 | 031ea7a5118b8077904a6cdc12e273dab4e50b13

Kotlin Gradle MPP 1.3 (#544)

* Basic setup

* Ignore failing test

* Gradle 5.0

* Better native config

* Fix jvm tests

* JS testing setup

* Native config

* Use EAP dependencies

* Japicmp setup

* Correct path to japicmp report

* Basic JVM + AnimalSniffer setup

* Enable samples module

* Use jvmWithJava for running Java tests

* Include more Native platforms to force test task generation

* Use internal UTF-8 decoder for Kotlin/Native

* Kotlin 1.3.20

* Gradle 5.1

* Move JMH setup into a separate module

* Properly configure jmhJar task

* Remove old jvm build.gradle

* Replace publishing plugin with SQLDelight's custom script

* Use default artifactId for JVM target

* Revert JVM build.gradle rename, use new DSL for defining targets

* Remove old module definitions in settings

* Feedback fixes | 2019-01-30 12:50:19 | 0078fca7b325a8d9454715ada316e0a3d6e99115

Merge pull request #542 from NightlyNexus/patch-1

Fix some indices in Buffer.UnsafeCursor docs. | 2019-01-16 03:02:01 | 7dd5bde7b0eb160ecdcb2a32477b8e9f313a0b8b

Merge pull request #504 from square/egorand/0830/ktlint-fixes

Fix ktlint issues in platform modules | 2018-09-01 03:43:34 | ea0dd569ef0cbe3cc6288264c36bc6fde02074af

Hide Base64, ByteStringKt, Platform, and Util code from Java

These are 'internal' in Kotlin but 'public' to Java callers. Changing
class names to prefix with '-' prevents Java from calling through. | 2018-08-26 13:45:15 | b518b5b2cf40147105a30bd37cf91c810ff59450

Make Buffer exceptions consistent with RealBufferedSource

This is inspired by ksperling's work on improving exception-consistency
between Buffer and RealBufferedSource. I wasn't willing to make an
exception-signature change for a 1.x release, but the 2.x release is a
good opportunity to fix this longstanding problem. | 2018-07-24 20:55:10 | 487a1f2392d8a9f017dceaca15656a82ab4ed46d

Retain interrupted state when throwing InterruptedIOException (Okio 2.x)

This fixes Okio 2.x. A separate fix is required for Okio 1.x. | 2018-07-06 02:35:23 | 264829dae36198c2e5454a6c2ae1d4aa208c5815

Merge pull request #463 from GianfrancoMS/patch-1

Update README.md | 2018-06-04 20:06:26 | fffc9d42244254899bb934ca400c8a88a65ea224

Merge pull request #462 from hendrawd/patch-1

Update README.md | 2018-05-29 17:14:54 | 105c2411448a726fe2d2a90c2e13d7e30ff79f43

Merge pull request #449 from yinyinnie/patch-1

Update README.md | 2018-05-13 15:11:04 | 4b567e1f0dfeeb6c506f5b2497444d8de8ecbc47

Merge pull request #424 from square/jwilson.0430.no_performance_bug

Add a test for the off-by-one bug in Buffer.seek(). | 2018-05-02 13:03:23 | bf4ae6cc0b967204ebdc629b62773fa8202962fc

Add a test for the off-by-one bug in Buffer.seek().

There was a performance bug here, where it would return one segment too early. | 2018-05-01 03:53:32 | c2b251cc189f128071d6357e30ccba6a091adadf

Merge pull request #312 from square/jwilson.0522.actually_split

Fix a performance bug in AsyncTimeout.sink().write(). | 2017-05-22 14:42:26 | 20e259c08af6c96508387540a5ea53f89b1d01f5

Fix a performance bug in AsyncTimeout.sink().write().

Previously the behavior was correct but the intended behavior was less
efficient than intended. In particular there were two problems:

 * The loop to find a segment boundary may have made more iterations
   than necessary if the first segment was very small
 * The sink write may not have been on a segment boundary, causing more
   data than necessary to be copied.

Closes: https://github.com/square/okio/issues/311 | 2017-05-22 12:14:32 | 80f3aa2e7bb9ac9691e62ec619e6b53259d78958

Import jsr305 and use it to mark @Nullable stuff.

The result is that IntelliJ + Kotlin correctly infers the right nullability
for Okio's APIs. I used IntelliJ's "Specify types explicitly" quick fix on
the 'a' and 'b' variables below and it did the right thing.

    fun specifyTypeExplicitly(source: BufferedSource) {
      val a: String? = source.readUtf8Line()
      val b: String = source.readUtf8LineStrict()
    } | 2017-05-02 02:39:52 | 2320c7f6ad9d05c1b65fb1e8cc43e257965792b4

Merge pull request #274 from larsgrefer/patch-1

endsWith -> suffix | 2016-12-07 22:57:38 | d412a4a2f9034a9bc59a8637e477822bd54d4504

endsWith -> suffix | 2016-12-07 22:54:57 | 032ad9948d5df69ee49367c90ad30f8823fc200b

Merge pull request #259 from square/jwilson.0829.substring

Fix a major bug where writeString() didn't always respect offsets. | 2016-08-29 12:54:40 | 927902b565479277178bdb7b0c986ce8beca07a3

Fix a major bug where writeString() didn't always respect offsets.

Closes: https://github.com/square/okio/issues/258 | 2016-08-29 12:16:03 | 8f5ae7376486990db25696304367f8e8b16f5534

Merge pull request #253 from square/jwilson.0814.fix_gzip_sink

Fix GzipSink for symmetry. | 2016-08-14 16:17:04 | 838a215b2bdbd77550ee876bc8870a61ad7219df

Merge pull request #252 from square/jwilson.0813.gzip_fix

Fix GzipSource to handle large files on AOSP. | 2016-08-14 04:32:14 | 4934879155da13b82be1775ac9840dbbd6b5c0cf

Merge pull request #247 from cketti/base64_encode_buffer_size_fix

Don't overallocate when base64-encoding. | 2016-08-07 00:11:57 | 834a35c2c8ff533f9e6d476714e7410c53cfd971

Import org.junit.Assert.fail instead of junit.framework.TestCase.fail

Use the JUnit 4 version in the couple of places were JUnit 3 imports
still existed; this makes the imports more consistent and also fixes
compilation if the JUnit 3 version is not available. | 2016-07-28 12:32:38 | 2f6e7783503aeb68d58fd7d50c47b7985d80203d

Merge pull request #227 from square/jwilson.0618.hashfail

Fix a major bug where HashingSource is incorrect for large writes. | 2016-06-19 01:58:13 | 2244048477890e33893613affc8f1fc82230c178

Fix a major bug where HashingSource is incorrect for large writes.

There was a bug where it wasn't traversing through the segments of
the buffer being hashed. This means that HashingSource was returning
incorrect answers for any writes that spanned multiple segment
boundaries.

The problem wasn't detected by our test cases because although
we have tests for non-uniform segments, and for buffers that
span multiple segments, we don't have tests for non-uniform
buffers that span multiple segments. This has been fixed too. | 2016-06-18 22:04:20 | 657278fff2ebb521659a330d0f7fc2b66d99cfbd

Merge pull request #210 from aried3r/patch-1

Fix typo in changelog | 2016-04-11 16:45:29 | 2c92d8261bc932473f4580bc62f22818a76acb47

Merge pull request #209 from chrisdoc/master

fix wrong changelog date for Version 1.7.0 | 2016-04-11 05:19:36 | 33cb196bb5182ebcad50303660f9e44635071696

fix wrong date for Version 1.7.0 | 2016-04-11 05:15:07 | 52dd9f5665f840dd4b6b4be93ac09f6c8252a791

Kotlin Gradle MPP 1.3 (#544)

* Basic setup

* Ignore failing test

* Gradle 5.0

* Better native config

* Fix jvm tests

* JS testing setup

* Native config

* Use EAP dependencies

* Japicmp setup

* Correct path to japicmp report

* Basic JVM + AnimalSniffer setup

* Enable samples module

* Use jvmWithJava for running Java tests

* Include more Native platforms to force test task generation

* Use internal UTF-8 decoder for Kotlin/Native

* Kotlin 1.3.20

* Gradle 5.1

* Move JMH setup into a separate module

* Properly configure jmhJar task

* Remove old jvm build.gradle

* Replace publishing plugin with SQLDelight's custom script

* Use default artifactId for JVM target

* Revert JVM build.gradle rename, use new DSL for defining targets

* Remove old module definitions in settings

* Feedback fixes | 2019-01-30 12:50:19 | 0078fca7b325a8d9454715ada316e0a3d6e99115

Merge pull request #542 from NightlyNexus/patch-1

Fix some indices in Buffer.UnsafeCursor docs. | 2019-01-16 03:02:01 | 7dd5bde7b0eb160ecdcb2a32477b8e9f313a0b8b

Merge pull request #504 from square/egorand/0830/ktlint-fixes

Fix ktlint issues in platform modules | 2018-09-01 03:43:34 | ea0dd569ef0cbe3cc6288264c36bc6fde02074af

Hide Base64, ByteStringKt, Platform, and Util code from Java

These are 'internal' in Kotlin but 'public' to Java callers. Changing
class names to prefix with '-' prevents Java from calling through. | 2018-08-26 13:45:15 | b518b5b2cf40147105a30bd37cf91c810ff59450

Make Buffer exceptions consistent with RealBufferedSource

This is inspired by ksperling's work on improving exception-consistency
between Buffer and RealBufferedSource. I wasn't willing to make an
exception-signature change for a 1.x release, but the 2.x release is a
good opportunity to fix this longstanding problem. | 2018-07-24 20:55:10 | 487a1f2392d8a9f017dceaca15656a82ab4ed46d

Retain interrupted state when throwing InterruptedIOException (Okio 2.x)

This fixes Okio 2.x. A separate fix is required for Okio 1.x. | 2018-07-06 02:35:23 | 264829dae36198c2e5454a6c2ae1d4aa208c5815

Merge pull request #463 from GianfrancoMS/patch-1

Update README.md | 2018-06-04 20:06:26 | fffc9d42244254899bb934ca400c8a88a65ea224

Merge pull request #462 from hendrawd/patch-1

Update README.md | 2018-05-29 17:14:54 | 105c2411448a726fe2d2a90c2e13d7e30ff79f43

Merge pull request #449 from yinyinnie/patch-1

Update README.md | 2018-05-13 15:11:04 | 4b567e1f0dfeeb6c506f5b2497444d8de8ecbc47

Merge pull request #424 from square/jwilson.0430.no_performance_bug

Add a test for the off-by-one bug in Buffer.seek(). | 2018-05-02 13:03:23 | bf4ae6cc0b967204ebdc629b62773fa8202962fc

Add a test for the off-by-one bug in Buffer.seek().

There was a performance bug here, where it would return one segment too early. | 2018-05-01 03:53:32 | c2b251cc189f128071d6357e30ccba6a091adadf

Merge pull request #312 from square/jwilson.0522.actually_split

Fix a performance bug in AsyncTimeout.sink().write(). | 2017-05-22 14:42:26 | 20e259c08af6c96508387540a5ea53f89b1d01f5

Fix a performance bug in AsyncTimeout.sink().write().

Previously the behavior was correct but the intended behavior was less
efficient than intended. In particular there were two problems:

 * The loop to find a segment boundary may have made more iterations
   than necessary if the first segment was very small
 * The sink write may not have been on a segment boundary, causing more
   data than necessary to be copied.

Closes: https://github.com/square/okio/issues/311 | 2017-05-22 12:14:32 | 80f3aa2e7bb9ac9691e62ec619e6b53259d78958

Import jsr305 and use it to mark @Nullable stuff.

The result is that IntelliJ + Kotlin correctly infers the right nullability
for Okio's APIs. I used IntelliJ's "Specify types explicitly" quick fix on
the 'a' and 'b' variables below and it did the right thing.

    fun specifyTypeExplicitly(source: BufferedSource) {
      val a: String? = source.readUtf8Line()
      val b: String = source.readUtf8LineStrict()
    } | 2017-05-02 02:39:52 | 2320c7f6ad9d05c1b65fb1e8cc43e257965792b4

Merge pull request #274 from larsgrefer/patch-1

endsWith -> suffix | 2016-12-07 22:57:38 | d412a4a2f9034a9bc59a8637e477822bd54d4504

endsWith -> suffix | 2016-12-07 22:54:57 | 032ad9948d5df69ee49367c90ad30f8823fc200b

Merge pull request #259 from square/jwilson.0829.substring

Fix a major bug where writeString() didn't always respect offsets. | 2016-08-29 12:54:40 | 927902b565479277178bdb7b0c986ce8beca07a3

Fix a major bug where writeString() didn't always respect offsets.

Closes: https://github.com/square/okio/issues/258 | 2016-08-29 12:16:03 | 8f5ae7376486990db25696304367f8e8b16f5534

Merge pull request #253 from square/jwilson.0814.fix_gzip_sink

Fix GzipSink for symmetry. | 2016-08-14 16:17:04 | 838a215b2bdbd77550ee876bc8870a61ad7219df

Merge pull request #252 from square/jwilson.0813.gzip_fix

Fix GzipSource to handle large files on AOSP. | 2016-08-14 04:32:14 | 4934879155da13b82be1775ac9840dbbd6b5c0cf

Merge pull request #247 from cketti/base64_encode_buffer_size_fix

Don't overallocate when base64-encoding. | 2016-08-07 00:11:57 | 834a35c2c8ff533f9e6d476714e7410c53cfd971

Import org.junit.Assert.fail instead of junit.framework.TestCase.fail

Use the JUnit 4 version in the couple of places were JUnit 3 imports
still existed; this makes the imports more consistent and also fixes
compilation if the JUnit 3 version is not available. | 2016-07-28 12:32:38 | 2f6e7783503aeb68d58fd7d50c47b7985d80203d

Merge pull request #227 from square/jwilson.0618.hashfail

Fix a major bug where HashingSource is incorrect for large writes. | 2016-06-19 01:58:13 | 2244048477890e33893613affc8f1fc82230c178

Fix a major bug where HashingSource is incorrect for large writes.

There was a bug where it wasn't traversing through the segments of
the buffer being hashed. This means that HashingSource was returning
incorrect answers for any writes that spanned multiple segment
boundaries.

The problem wasn't detected by our test cases because although
we have tests for non-uniform segments, and for buffers that
span multiple segments, we don't have tests for non-uniform
buffers that span multiple segments. This has been fixed too. | 2016-06-18 22:04:20 | 657278fff2ebb521659a330d0f7fc2b66d99cfbd

Merge pull request #210 from aried3r/patch-1

Fix typo in changelog | 2016-04-11 16:45:29 | 2c92d8261bc932473f4580bc62f22818a76acb47

Merge pull request #209 from chrisdoc/master

fix wrong changelog date for Version 1.7.0 | 2016-04-11 05:19:36 | 33cb196bb5182ebcad50303660f9e44635071696

fix wrong date for Version 1.7.0 | 2016-04-11 05:15:07 | 52dd9f5665f840dd4b6b4be93ac09f6c8252a791

